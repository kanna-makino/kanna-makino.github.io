<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>奇文共欣赏：“梁家河大学问”课题公告</title>
    <url>/2019/12/18/%E5%A5%87%E6%96%87%E5%85%B1%E6%AC%A3%E8%B5%8F%EF%BC%9A%E2%80%9C%E6%A2%81%E5%AE%B6%E6%B2%B3%E5%A4%A7%E5%AD%A6%E9%97%AE%E2%80%9D%E8%AF%BE%E9%A2%98%E5%85%AC%E5%91%8A/</url>
    <content><![CDATA[<blockquote>
<p>梁家河七年知青岁月，在牠新时代中国特色社会主义思想中的地位研究；</p>
<p>与“以人民为中心的发展思想”的逻辑关系研究；</p>
<p>与牠生态文明思想的逻辑关系研究；</p>
<p>与三产融合思想的逻辑关系研究；</p>
<p>与牠新时代乡村振兴战略思想研究……</p>
</blockquote>
<a id="more"></a>

<p>　　<strong>老高按：</strong>“梁家河”是什么？地名？河名？人名？相信现在即便在海外，也有不少人知道了：这是牠当年插队的一个陕北村庄，隶属于陕西省延安市延川县文安驿镇。<br>　　牠青云直上进入中央之后（2007年进入政治局常委，2012年任总书记、军委主席），“梁家河”知名度暴涨，2007年被延安市委、市政府定为新农村建设试点村之一，2015年被确定为全国第四批“一村一品”示范村（“一村一品”是啥？不知道）；2017年获评“中国最美乡村”；<br>　　尤其要大书一笔的是：2014年，“梁家河知青旧址”被陕西省政府，定为“陕西省文物保护单位”，立了碑，建了馆。树了巨大的语录牌：“陕西是根，延安是魂，延川是我第二故乡。——牠”；<br>　　梁家河，是共造神再出发的起点，是牠政治创世神话第一章：从2012年起，梁家河出现外地游客——其中百分之九十九可归为“朝圣者”，近年来中西方媒体都纷纷报导：梁家河成了“旅游热点”；纪实文学《梁家河》出版发行，万言长律《梁家河之歌》也在亚马逊网站销售……<br>　　“梁家河”是什么，您知道答案；好，下一问：“梁家河大学问”是什么？<br>　　没谁不傻眼。<br>　　平头百姓答不上来，教授也瞠目结舌：“梁家河大学问”？谁懂？<br>　　不懂就要学，就要问，就要考察，就要研究，就要悬榜，就要政府立项拨款、学术机构和高校组织老中青专家学者攻关。这不是？陕西省社会科学界联合会6月20日发布了《“梁家河大学问”课题研究公告》，张榜征求公开申请。中国各级党委机关报，以及“香港01”和多维新闻网等媒体都纷纷报导，说明这是非常一本正经、非常严肃慎重的活动。<br>　　如此奇文，实在有很高的参考价值，对于我们了解中国大陆官方统驭的“学术界”、了解中国知识精英的生存状况，很有帮助，我应转发。<br>　　顺便说一句，最近有中国大陆学者朋友前来，我带其在美国多处访友，才知道有这么多中国颇有名气的学者，难以忍受中共之下精神领域的低气压，已经、正在或者将要移居国外——他们都是如假包换的“特殊人才”么。当然其中有一些将是中美“空中飞人”两头通吃。这是一个长长的名单，有机会了我再来介绍。此前我多少了解一些，在过往文中也提到了若干，但最近得知的中国知识精英被逼出国的规模和声势，还是惊到了我：中国是盛世啊，不仅大批资金向海外转移，人才也大批向海外迁徙！话说回来，如果中间有人一边办理移民美国的手续，一边申请“梁家河大学问”课题，我一点也不奇怪。</p>
<p><br>　　<strong>“梁家河大学问”课题研究公告<br><br></strong></p>
<p>　　<strong>陕西省社科联</strong></p>
<p>　　为进一步深入研究梁家河的大学问，深刻理解牠总书记成为党的核心、军队统帅、人民领袖的根基源头和牠新时代中国特色社会主义思想的起源脉络和逻辑原点，不断增强“四个意识”，坚定“四个自信”，陕西省社科联经研究决定开展“梁家河大学问”课题研究，现将有关事项公告如下：</p>
<p>　　<strong>一、选题方向</strong></p>
<p>　　1.梁家河七年知青岁月在牠新时代中国特色社会主义思想中的地位、作用研究；<br>　　2.梁家河七年知青岁月与“以人民为中心的发展思想”的逻辑关系研究<br>　　3.梁家河七年知青岁月与牠生态文明思想的逻辑关系研究；<br>　　4.梁家河七年知青岁月与牠新时代三产融合思想的逻辑关系研究；<br>　　5.梁家河七年知青岁月与牠新时代脱贫攻坚思想的逻辑关系研究；<br>　　6.梁家河七年知青岁月与牠新时代乡村振兴战略思想的相关研究；<br>　　7.梁家河七年知青岁月与牠新时代基层党建思想的逻辑关系研究；<br>　　8.从梁家河七年知青岁月看习仲勋的家风家教相关研究；<br>　　9.梁家河精神的科学内涵和时代价值研究；<br>　　10.陕西追赶超越中如何汲取梁家河精神养分研究；<br>　　11.梁家河的“大学问”的科学内涵和时代价值研究；<br>　　12.梁家河精神与当代青年的精神塑造研究；<br>　　13.延安精神、西迁精神与梁家河精神的比较研究；<br>　　14.从梁家河七年知青岁月看改革开放前后中国农村发展变化研究；<br>　　15.梁家河“大学问”与中华优秀传统文化研究；</p>
<p>​       16.梁家河“大学问”与红色文化基因研究；<br>​       17.其他梁家河“大学问”相关研究（研究人员可以根据自己研究方向和专长，自拟题目进行研究）。</p>
<p>　　<strong>二、申请条件</strong></p>
<p>　　“梁家河大学问”课题研究面向全省社科理论界公开申报，项目申请者必须具备如下条件：<br>　　1.在马克思列宁主义、毛泽东思想、邓小平理论、“三个代表”重要思想、科学发展观、牠新时代中国特色社会主义思想指引下，在研究中理论联系实际，注重宏观高度、理论深度和实用价值，力求前瞻性与现实性、理论性与可操作性相统一；<br>　　2. 项目组负责人必须具有高级（或相当于高级）专业技术职称（不具备此条件的，须有两名同领域的具有高级专业技术职称的人员的书面推荐），在相关领域积累了一定的研究成果，有较高的理论素养和较强的组织协调能力；<br>　　3. 项目研究实行项目负责人制，项目组确定一名项目负责人主持项目研究工作。项目组负责人必须是该项目实施过程中的真正组织者和指导者，担负实质性研究工作，挂名或不担负实质性研究工作的人员不得作为项目负责人申请研究项目；<br>　　4. 项目组研究人员须遵守相关法律和学术道德规范，认真开展项目研究，取得预期研究成果。研究成果的知识产权归陕西省社科联所有。</p>
<p>　　<strong>三、研究经费</strong></p>
<p>　　研究项目经过专家评审最终确定，立项按要求承担项目研究任务。每个项目资助一定的课题研究经费，确定项目立项后，由陕西省社科联与立项项目组签订合同书，资助金额根据申报内容及预期研究成果（著作、论文、研究报告等）确定经费支持额度，申报者在申报时根据实际情况进行合理预算。项目经费分两次拨付，先行拨付项目研究经费的40％启动研究，余款待项目成果结项验收合格后拨付。</p>
<p>　　<strong>四、申请受理</strong></p>
<p>　　项目申请人可通过陕西社科网下载课题公告和相关申报表格，填写完整后，于2018年7月16日前将申报表一式3份和活页一式8份报送陕西省社科联科普部（西安市小寨东路63号省社科联210办公室）。通过资格审查后，按照公平、公正、竞争的原则组织专家进行评审，确定立项建议名单，建议立项名单报省社科联主席办公会审批后，在媒体公示一周，对无异议者下达立项通知书。</p>
<p>　　<strong>五、联系方式</strong></p>
<p>　　地址：陕西省西安市雁塔区小寨东路63号<br>　　邮编：710061<br>　　联系单位：陕西省社科联科普部<br>　　电话：029—85430836<br>　　邮箱：<a href="mailto:sh_skl@163.com" target="_blank" rel="noopener">sh_skl@163.com</a></p>
<p>　　陕西省社会科学界联合会<br>　　2018-6-20</p>
<br>

<br>

<br>

<blockquote>
<p>如果说梁家河有“大学问”，“包子铺”应该更有学问了？这下中国文化更加博大精深了，大家一辈子都学不完。希望他万寿无疆，免得下一个帝王又来一个大学问，人民又得学习一次！</p>
</blockquote>
<br>

<blockquote>
<p> 梁家河思想放光芒，白头山的血统红又红，两个太阳照大地，中朝人民幸福长。</p>
</blockquote>
<br>

<blockquote>
<p> 老高，海外的人可以申请吗？我已拟定了三个研究课题：</p>
<ol>
<li>梁家河七年知青岁月与国产航母电磁弹射的辩证关系；</li>
<li>梁家河精神与各级官员精神疾患研究；</li>
<li>梁家河“大学问”与清华大学法学研究生录取率。</li>
</ol>
</blockquote>
<br>

<blockquote>
<p> 信天游还没完呢</p>
<p>知青里好娃儿不稀罕哟呵，</p>
<p>比如一起下放的王岐山哟喂，</p>
<p>梁家河是个神仙滩哟呵，</p>
<p>习主席不是下放是下凡哟喂。</p>
</blockquote>
<br>

<blockquote>
<p> 李鸿忠赶快跟进：宣布狗不理包子停业摘牌，庆丰包子是天津品牌，建立包子研究院！</p>
</blockquote>
<br>

<blockquote>
<p> 北京的“八一学校”反应太迟钝了，早就应该挂上牌子“全国重点文物保护单位”。包子是喜剧艺术家，他创作了许多笑料。只有你想不到，没有他做不到的。大胆预测：陕西省不久可能要建立圣母庙。</p>
</blockquote>
]]></content>
      <categories>
        <category>推墙</category>
      </categories>
      <tags>
        <tag>推墙</tag>
      </tags>
  </entry>
  <entry>
    <title>将YouTube直播转播到bilibili的想法及尝试</title>
    <url>/2019/12/17/%E5%B0%86YouTube%E7%9B%B4%E6%92%AD%E8%BD%AC%E6%92%AD%E5%88%B0bilibili%E7%9A%84%E6%83%B3%E6%B3%95%E5%8F%8A%E5%B0%9D%E8%AF%95/</url>
    <content><![CDATA[<p>将YouTube直播转播到bilibili的想法及尝试</p>
<p>周末的时候本来在学习Swift的，不经意间打开Youtube直播，看到 大阪伊丹国际机场的 live camera 直播，出于对民航的兴趣，觉得直播里的陆空对话可以很好的打发时间，于是产生了能否24小时将Youtube的直播转播到墙内的疑问，带着这个疑问折腾了两天。</p>
<a id="more"></a>

<iframe width="560" height="315" src="https://www.youtube.com/embed/pV2RaaoxyF8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>&lt;大阪国际机场live camera含陆空对话&gt;(需要梯子)</p>
<p>在往上搜了一些资料，发现已经有很多人实现了我的想法，而且做法也超级简单：</p>
<ul>
<li>YouTube 直播地址</li>
<li>一个海外vps</li>
<li>youtube-dl</li>
<li>ffmpeg</li>
<li>bilibili直播地址</li>
</ul>
<p>用youtube-dl获取直播m3u8文件，然后用ffmpeg不断读取流数据，然后推流到bilibili直播：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -re -i <span class="string">"<span class="variable">$(youtube-dl -f 95 -g "https://www.youtube.com/watch?v=pV2RaaoxyF8")</span>"</span> -c:v copy -c:a aac -b:v 5000k -ar 44100 -ab 320k -ac 2 -strict -2 -flags +global_header -bsf:a aac_adtstoasc -bufsize 3000k -f flv <span class="string">"rtmp://txy.live-send.acg.tv/live-txy/?streamname=xxxx&amp;key=yyyy"</span></span><br></pre></td></tr></table></figure>

<p>用这个命令就可以实现上面的功能。</p>
<p>但是在实际使用操作过程中，总是在发送了100帧数据左右开始报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[tls @ 0x5566d890ffe0] The TLS connection was non-properly terminated.</span><br><span class="line">[tls @ 0x5566d8fd25a0] The TLS connection was non-properly terminated.</span><br><span class="line">[tls @ 0x5566d8fd25a0] The specified session has been invalidated <span class="keyword">for</span> some reason.</span><br><span class="line"></span><br><span class="line">av_interleaved_write_frame(): Broken pipe</span><br><span class="line">Error writing trailer of rtmp://txy.live-send.acg.tv/live-txy/?streamname=xxxx</span><br><span class="line">[aac @ 0x5566d8cf45e0] Qavg: 65536.000</span><br><span class="line">Conversion failed!</span><br></pre></td></tr></table></figure>

<p>TLS连接被关闭，在搜了一大堆资料后我依然怀疑是youtube没有正确的关闭连接，导致报错。还做了很多其他的验证：</p>
<ul>
<li>尝试在树莓派上安装ffmpeg往bilibili推流，直播了一个网上将近十来个小时，没有任何问题。</li>
<li>在香港vps上将一段已经下载好的视频推流到bilibili，有问题。</li>
<li>在美国vps上将一段已经下载好的视频推到bilibili，有问题。</li>
<li>在香港vps上将一段已经下载好的视频推流到YouTube，没有问题。</li>
<li>在美国vps上将一段已经下载好的视频推流到YouTube，没有问题。</li>
<li>在香港和美国vps上换了和树莓派相同版本的v4.1.1 ffmpeg重复上述操作，结果不变。</li>
</ul>
<p>将google搜索到的结果几乎都看了一遍，也没找到多少有价值的信息。</p>
<p>今天晚上在思考其他解决方案的时候，看到bilibili专栏的文章，尝试了作者用java写的jar包，也报相同的错误，于是联系了作者，才得知，原来这个方法已经失效了。</p>
<blockquote>
<p> <strong>这个脚本早就报废了的，现在B站只有官方py或者报备了的才可以从海外推。目前转播man已经失业，有更好转播的方案。爱丽丝</strong></p>
</blockquote>
<p>原来上面的报错是因为bilibili掐断了连接导致的。不过这也打消了我最初的疑虑：侵权问题。</p>
<p>这个想法可能要先放一段时间了，目前的想法是想尝试一下用 OpenCV 和 ffmpeg 能不能实现，不知道什么时候才能重新捡起来（逃）。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>《彼时彼地》</title>
    <url>/2019/12/08/%E3%80%8A%E5%BD%BC%E6%97%B6%E5%BD%BC%E5%9C%B0%E3%80%8B/</url>
    <content><![CDATA[<p>12月的第一个周末，大连终于迎来了2019年入冬的第一场雪。下得不大，也没有堆起来，今年的冬天似乎比往年来得晚一些。站在11楼的办公室，看着雪花飘洒在楼宇之间，给人无比的平静，也少见的真心觉得这个世界真美啊。前一天还是在一起打游戏的高中同学口中得知，老家也下了很大的雪，印象中老家是结冰多，下雪似乎不太常见，一年可能还不到一两次。一直记性不太好，很多事情已经在不知不觉之间淡忘了。</p>
<a id="more"></a>

<p>2019年也只剩下这短短的二十天了，世界又将迎来又一个十年。2030世界会变成什么样子？相比与被时间推着前进、被动的憧憬未来，相信也有很多人乐意沉迷于过去，谁没有点后感到悔恨希望能改变的事情呢？大概是我的生活太平淡了，没有留下什么刻骨铭心的记忆，只是顺着别人走出来的路，马不停蹄的向前，从未去思考前进的意义或是终点的意义。难道说踩别人的脚印就是我生活的意义？这么一说，感觉有点“信命”的消极感觉了，在我的认知里，积极向上才是唯一选择。</p>
<p>周末的天气出奇的好，阳光明媚，没有冷风，如果有车，绝对会出去绕大连溜一圈。本来这周末想去订车的，但是真正要出门的时候总是迈不出那一步。窝在出租屋里看了很多长途骑行的视频，每次看完，都感觉浑身热血沸腾，现在不单是107国道、318国道成都到拉萨也排上了日程，虽然担心没有人同行以及自己的体力是不是抗得住。</p>
<p>“只有荒芜的沙漠，没有荒芜的人生。”</p>
<p>“现在不去做的事，以后也不会去做了。”</p>
<p>“如果你还有灵魂，那现在就出发吧。”</p>
<p>听着各种热血沸腾的背景音乐，开始不断质疑自己，一路马不停蹄，却不知道自己想要的是什么，或者是明明知道自己想要什么却畏首畏尾不敢去直面自己的内心。我一直明白，敢爱敢恨，是我最缺乏的。</p>
<p>一个年轻人从小喜欢天体物理学，在一家待遇优厚的保险公司上班后，每天下班仍然不停的坐在电视机前学习天体物理知识。某一天办公室来了一个年轻女搭档，在不断了解过程中，产生了感情。但是不幸的是，对方已经订婚。于是年轻人想利用相对论进行时间旅行回到过去改变历史。在和一位研究时间旅行的大学教授的共同努力下，回到了2008年，但是没有得到过去的对方的认可，却和酒吧女孩走在了一起。</p>
<p><img src="https://image.youyou-2608.com/blog/20191209/QQ20191208-231724.png" alt></p>
<p>与《2001：太空漫步》那种篇幅宏大或者说是假大空、晦涩或者说是装神弄鬼、创新创世或者说是胡拼乱凑相比，我更喜欢《彼时彼地》的情节简单和主旨明了。能从中感受到它要传达给你的某种感情，会开始一些新的思考并领悟一些东西，而不是大家看完一头雾水、头顶一个个大大的问号。</p>
<p>对于“成功”的定义，我倒是特别在意，虽然是一个烂大街的话题，中学生随手就能洋洋洒洒写个850字。以前我也是个很积极的人吧，学校各种公益活动总是积极参加，募捐也好上街捡垃圾也好去养老院看望老人也好。工作以后，觉得自己变得拜金了许多，总有想花钱的地方，以后能不能试着改变一下自己？变成自己喜欢的样子。</p>
<p>“我们生活在美国，多么幸福啊“。这句话给我的感触也很深刻。或许是因为接受的教育或者是生活的环境的原因，我从未主动去了解过美国，它的历史文化以及社会风俗。只知道它是世界上最强大的国家，有着自由至上的国民。以前没有机会出国，对国外的了解仅限于Twitter，台湾也好日本也好美国也好欧洲也好。不过就算是这样，也已经与猪圈媒体的宣传大相径庭了。今年日本出差，才无限扩大了我的认知，我才知道，原来猪圈所谓的”礼仪之邦“不过是浪得虚名，国富民强不过是自我意淫，各种主义不过是被世界唾弃的谎言。从这之后，开始学会不去做评判，而是主动去了解。</p>
<p>造成这样的错觉，当然和猪圈的”圈墙“脱不了干系。我只是不太明白为什么21世纪了还要这么明目张胆的愚民，敞开胸怀，与文明世界做朋友不好吗？大概是拆了圈墙，就不能安稳的做皇帝了吧。不割韭菜，潜伏在美帝的”人民公仆“们的子女拿什么买法拉利？这点觉悟还是要有的。”现在每次听到社会治理现代化就想到科学养猪。“</p>
<p>可能因为一党专政、以党代政的原因，我总是在”国家“、”政府“、”党“这几个概念之间摸不着头脑。总是因为某些真是的想法让自己深受困扰。</p>
<p>”没有战乱、能吃饱穿暖，就应该心存感激了“？”猪嘛，当然是吃饱了就该感恩戴德了“？</p>
<p>时间旅行，在未知的未来，也许会成为现实，如果人类那时候还没有灭绝的话。就目前没有自主选择时间线并且改变时间线的选项来说，珍惜当下，规划未来，何尝不是一种改变命运的方式呢？</p>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Cloud + v2ray 墙裂推鉴！！</title>
    <url>/2019/12/07/Google-Cloud-v2ray-%E6%8E%A8%E5%A2%99%E5%85%9A%E5%A2%99%E8%A3%82%E6%8E%A8%E9%89%B4%EF%BC%81%EF%BC%81/</url>
    <content><![CDATA[<p>Google Cloud + v2ray 推墙党墙裂推鉴！！</p>
<p>参考教程：<a href="https://camo.githubusercontent.com/3b7eddf949a9d8aec9a04ae19a7bd49991817085/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30312f30352f356333303532323438636133652e6a7067" target="_blank" rel="noopener">V2Ray搭建详细图文教程</a></p>
<p>最近一个月都在计划离职以及计划离职以后的事情，好长时间没有打开笔记本折腾一下了。和一个也喜欢在国际互联网上冲浪的同事偶然聊到了网速问题，他用谷歌免费服务器能流畅1080P高清，想想我用着美国西海岸延迟300+的服务器，连Twitter刷个图片有时候都刷不出来，于是产生了想升级一下梯子的想法。</p>
<a id="more"></a>



<h2 id="申请试用谷歌云"><a href="#申请试用谷歌云" class="headerlink" title="申请试用谷歌云"></a>申请试用谷歌云</h2><p>最近这两个月才在YouTube上了解到谷歌云，新用户有一年的免费试用，配置方面对于搭个梯子来说完全足够了，并且现在有了香港数据中心，不用想，指定比美国西海岸的搬瓦工要墙太多了，哦，是“强”。</p>
<p>墙外有很多热心网友写了很多教程，小白也能完成。前提是要有gmail邮箱和一张国际信用卡。</p>
<p>顺利申请完成之后，创建一个VM实例，默认是动态ip，每次重启实例之后ip地址都会变，可以设置成静态ip。创建完之后先改一下root用户密码，然后改一下ssh设置允许远程登录。然后ping一下，如果ping值比较高的话，可以删除重新创建，最后选择一个ping值低一点的，我先后试了5个，最后选择了一个110ms的。因为是辽宁联通的缘故吧，在站长工具上测试，最快的是广东，才40ms左右，这速度没得说。</p>
<h2 id="安装-v2ray"><a href="#安装-v2ray" class="headerlink" title="安装 v2ray"></a>安装 v2ray</h2><p>参考上面的链接，就一行命令就OK，选项什么的，改默认的就默认，参考教程里的。注意一下端口号，这个端口号困扰了我几个小时。</p>
<p>我运行了v2ray，客户端也配置好了，但是连接不上，才想起来可能是端口没开放，于是去配置防火墙，配置了好多次，用站长工具端口扫描都是只开放了22端口。不停的Google，看视频教程，感觉没什么错误，但是就是不好用。最后自己新建了一个规则，指定端口和协议，tcp:port，然后在实例设置里把所有的规则都删除了，只添加这个新建的规则，然后再试就好了，对多个规则重叠时的优先级不是很了解。打开Google首页和YouTube的速度和打开国内网站几乎没有区别，视频1080P60fps也一点都不卡了，顺畅的感觉真好。虽然油管大佬们现在秀8K了，但是对于我来说，1080P不卡就已经很满足了。</p>
<p><img src="https://image.youyou-2608.com/blog/20191207/WX20191207-125903.png" alt="YouTube速度测试"></p>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>有很多客户端，基本各个平台在github上都有，目前我只装了Mac端来测试连接。</p>
<p>iOS上貌似需要外区Apple ID，我之前网速慢的时候，找到一个免费机场 <a href="yangjuan.be">羊圈网络</a>，很良心的半公益机场，甚至提供了日区Apple id供用户下载客户端，shadowrocket，很强大的一个客户端，包含了ss、ssr以及vmess等。</p>
]]></content>
      <categories>
        <category>推墙</category>
      </categories>
      <tags>
        <tag>推墙</tag>
      </tags>
  </entry>
  <entry>
    <title>要么忍，要么滚</title>
    <url>/2019/11/13/%E8%A6%81%E4%B9%88%E5%BF%8D%EF%BC%8C%E8%A6%81%E4%B9%88%E6%BB%9A/</url>
    <content><![CDATA[<blockquote>
<p>一份工作能做下去，无非就是两点：薪酬和发展。钱到位了，困难都可以克服，9106也能接受；而发展则是自身价值的提升，不论是技术或是其他方面，在将来能给你带来更满意的薪酬。一份满意的工作，二者的和应该维持在一个满意的水平，如果发展不大但是薪酬很高，目标达到了当然可以留下；如果薪酬不高但是对自身价值很有提升，也可以暂时先混着；但是如果二者都不行，那就别无选择、只能另谋出路了，让垃圾公司早点倒闭吧。</p>
</blockquote>
<a id="more"></a>



<p>出差后一个星期的假期也已经结束，才周一上午就被分配到了新的项目中，项目名为 PCKK 。进入项目已经三天，但是项目名字是什么意思还不知道。因为要接手一个即将出差的人的任务，所以这几天都在跟着他了解项目，一直在熟悉他负责的功能模块。</p>
<p>自己写代码可能还能有点意思，读别人的代码，那真的是要死人了。而且项目从头到尾没有数据库，用的全是JavaScript实现。我自己对 JS 的了解仅限于很基础的常识性的东西，要我来做不是原生 JS 的东西，那是万万做不出来的。所以这几天虽然挂着读代码、熟悉业务的名坐在办公室，但是大多数时候确实在浏览网页或是在思考怎样才能早点离开公司。</p>
<p>明天那位同事就要出差去了，所有的工作都要我来负责了，有时候觉得自己既不懂业务又不懂代码有点忐忑不安，但是转念又会觉得，不想干下去了，都无所谓了。</p>
<p>整个项目开发已经就剩下现在这两个下载 Excel 文件的模块了，而且主体已经开发完，现在就是在修一些bug或者是实现之前没有实现的功能。如果使用 Java 来做的话会超级简单，几个 SQL 取一下数据，写个类加工一下数据直接往 Excel 文件里扔就行了，但是这个弱智的 Kintone ，什么都做不了，不能做表连接（甚至连他妈的数据库都没有，我做你妈呢！），每次查数据开发者能操作的部分仅仅是 where 条件，每次查询都是一个 HTTP 请求！这意味着如果这个 Excel （整个系统数据完成情况统计）用到了20个页面来的数据，那就需要用 HTTP 请求20次才能得到全部数据！真他妈傻逼东西！！这种垃圾也有人用，真是死妈废物！到底是哪些傻逼出钱养着开发这种脑残工具的傻逼公司！！要是仅仅如此，为了工资，我也能忍了，但这还不是最傻逼的，最为傻逼的是：API规定每次 HTTP 数据请求（类似于数据查询）返回的结果数量上限为500条！这两天就是卡在了这个问提上，我真的无话可说，你妈死了，Five！一个SQL 500 条以上数据不是很常见吗？这个 Excel 要统计6个月的数据，光一个月就2000多条数据，合计起来一万多条。一想到明天我还要花一天时间绞尽脑汁去解决这种弱智问题，我真的想现在就发个邮件，工资不要了，公司我也不去了，谁傻逼愿意干谁去！</p>
<p>从头到尾都是 js 代码，所有的本该做成共通的基础都写死在代码里，而且还不能在不同功能模块间共享，甚至连 API 的版本和地址都写死在代码里，改个 API 版本所有代码都得动，后期维护还你妈呢。没有数据库没有ER图，随便删掉项目或者改名，F12调两小时也定位不到具体的错误。一个 Excel 统计文件需要等 5 分钟才能下载下来，更有甚者需要等 4 个小时，还玩你妈呢……至今没有搞懂这群弱智为什么能忍到现在。</p>
<p>吐槽不动了，就两个字，傻逼！12月份再去上班我就是傻逼！</p>
<p>我也不明白，为什么鬼子太君们总是对这种弱智工具情有独钟？去年第一个项目用的 WebPerformer 也是这种脑残工具，适合没有开发基础的人？我更觉得，如果有开发基础的人用了这种弱智工具也迟早会变成弱智。</p>
<p>不要抱怨这个世界不公平，除非你能让它公平起来。因为抱怨什么也不能改变，能改变现状的只有自身的行动！</p>
<p>五六月份在 V2EX 学到的六字真言：要么忍，要么滚！我当然是选择后者。为了还能保留点智商，我还是趁早滚吧！</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>寿司 ｺﾄﾌﾞｷﾂｶｻライブ</title>
    <url>/2019/11/12/%E5%AF%BF%E5%8F%B8-%EF%BD%BA%EF%BE%84%EF%BE%8C%EF%BE%9E%EF%BD%B7%EF%BE%82%EF%BD%B6%EF%BD%BB%E3%83%A9%E3%82%A4%E3%83%95%E3%82%99/</url>
    <content><![CDATA[<blockquote>
<p>本来想看个直播的，但是墙国的网络，翻出去也是龟速，明明是直播却比放PPT还要卡。即便是5G真的在猪圈开始普及，那也最多是个更快的局域网吧。</p>
<p>希望这堵破墙早日被推倒吧。s</p>
</blockquote>
<a id="more"></a>



<p>和大学同学去秋叶原看地下idol们的演唱会的时候，知道了正在发传单的 寿司 ，之后关注了Twitter和Instagram，最近开始直播，每天晚上也看她的直播，很可爱的一个高中生。</p>
<hr>
<p>寿司 ｺﾄﾌﾞｷﾂｶｻライブ</p>
<iframe src="https://live.line.me/channels/4273117/broadcast/12388955/embed" allowfullscreen allow="autoplay; fullscreen" frameborder="0" scrolling="no" style="width: 500px; height: 500px; visibility: visible;"></iframe> <script src="https://scdn.line-apps.com/n/line_live/thirdparty/embed.js" async defer></script>

<p><img src="https://image.youyou-2608.com/blog/20191112/QQ20191112-215454.png" alt="寿司"></p>
<p><img src="https://image.youyou-2608.com/blog/20191112/QQ20191112-215438.png" alt="寿司"></p>
<p><img src="https://image.youyou-2608.com/blog/20191112/QQ20191112-215154.png" alt="寿司"></p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>博客一周年啦！</title>
    <url>/2019/11/10/%E5%8D%9A%E5%AE%A2%E4%B8%80%E5%91%A8%E5%B9%B4%E5%95%A6%EF%BC%81/</url>
    <content><![CDATA[<p>已经是进入冬天的第四天了，</p>
<p>这个周末的天气还是很暖和。</p>
<a id="more"></a>



<hr>
<p>2018年11月11日——2019年11月11日，</p>
<p>博客已经运行一周年了。</p>
<p>其实严格来说，</p>
<p>最开始的时间应该是2018年7月13日，</p>
<p>那时候还是基于WordPress搭建的，</p>
<p>后来熟悉了Hexo之后才改成Hexo的。</p>
<hr>
<p>周年刚好是双十一，</p>
<p>晚上正在折腾树莓派和OpenCV，</p>
<p>看到有人给我发双十一的分享链接才反映过来。</p>
<p>前天和昨天有个刚入职几个月不太熟悉的女同事连续给我发了两个淘宝的分享链接，</p>
<p>被我直接拒绝了，</p>
<p>虽然显得很不近人情，</p>
<p>但是我现在开始明白和别人表明自己的态度也很重要。</p>
<hr>
<p>真快呢，一年又要过去了。</p>
<hr>
<p>个人对双十一是没有什么感觉的，</p>
<p>也不会因为便宜几块钱就争先恐后挤在双十一网购，</p>
<p>非常不喜欢你争我抢的感觉。</p>
<p>这让我想起了这两天在机场和火车站的经历，</p>
<p>大爷大妈总是喜欢插队，</p>
<p>要么就是想和我并排，</p>
<p>恨不得跑到我前面去，</p>
<p>差两秒钟就如丧考妣，</p>
<p>恶心至极。</p>
<p>出差回来，</p>
<p>倒是非常怀念日本那种何时何地都自觉排队的氛围，</p>
<p>谦让是对别人的尊重，</p>
<p>更是对自己的尊重。</p>
<hr>
<p>一直没有在意的缘故，</p>
<p>51La的访客统计貌似失效了，</p>
<p>所有的统计项目都是0，</p>
<p>所以也无从得知这个域名有多少人来过。</p>
<hr>
<p>虽然很久没有回黔南去看望优优了，</p>
<p>也无从得知她的近况以及告诉她我的近况，</p>
<p>不知道还是不是一如既往的愿意抱着我呢？</p>
<p>就在前两天，我还是给这个域名续了5年的费，</p>
<p>5年前的2014年发生的事情，</p>
<p>我已经遗忘得差不多了，</p>
<p>2024年，她都已经变成大人了吧，</p>
<p>我们也差不多都把对方忘记了吧。</p>
<hr>
<p>出差回来一个星期的假到这里就结束了，</p>
<p>明天开始进入一个叫PCKK的项目，</p>
<p>老样子，还是学不到任何东西或者是学到的都是没用的东西，</p>
<p>不多想，抓紧时间做简历找工作吧，</p>
<p>争取在年前离开这里。</p>
<hr>
<p>今天开始自己做饭了，</p>
<p>其实没有想象中的麻烦，</p>
<p>反而还觉得很有意思，</p>
<p>想一直坚持下去。</p>
<hr>
<p>今天收到了初中一个好朋友寄来的苹果，</p>
<p>出差的时候因为水果很贵，</p>
<p>基本没吃到什么水果。</p>
<p>18个苹果差不多有一箱了，</p>
<p>心里很不踏实，总有种受之有愧的感觉。</p>
<p>不过很开心，因为很少送别人东西，所以也很少收到其他人的东西，</p>
<p>偶尔一次，还觉得有个好朋友真的挺好。</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派安装OpenCV-Python</title>
    <url>/2019/11/10/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85OpenCV-Python/</url>
    <content><![CDATA[<p>之前在MacOS上安装OpenCV还比较顺利，直接在PyCharm里用pip安装就成功了。但是在树莓派上安装OpenCV一直依赖关系的错。最终在重新安装完Raspberry OS之后，用清华的源安装成功了。</p>
<a id="more"></a>



<h2 id="更换清华源"><a href="#更换清华源" class="headerlink" title="更换清华源"></a>更换清华源</h2><p>官方资料：<a href="https://mirror.tuna.tsinghua.edu.cn/help/raspbian/" target="_blank" rel="noopener">Raspbian 镜像使用帮助</a></p>
<p>设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑 `/etc/apt/sources.list` 文件，删除原文件所有内容，用以下内容取代：</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 `/etc/apt/sources.list.d/raspi.list` 文件，删除原文件所有内容，用以下内容取代：</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui</span><br></pre></td></tr></table></figure>

<h2 id="安装OpenCV-Python"><a href="#安装OpenCV-Python" class="headerlink" title="安装OpenCV-Python"></a>安装OpenCV-Python</h2><p>执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装必要软件</span></span><br><span class="line">sudo apt-get install -y libjasper-dev libqtgui4 libqt4-test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装OpenCV</span></span><br><span class="line">sudo apt install python-opencv</span><br></pre></td></tr></table></figure>

<p>3b+更换为国内源的话大概一两分钟，就安装完成了。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>利用OpenCV打开摄像头，并读取视频数据显示出来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">    print(<span class="string">"camera is still closed."</span>)</span><br><span class="line"><span class="keyword">while</span> cap.isOpened():</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    <span class="keyword">if</span> ret == <span class="literal">True</span>:</span><br><span class="line">        cv2.imshow(<span class="string">'Frame'</span>, frame)</span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">25</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">'q'</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p>如果是利用终端命令通过ssh远程执行的话，会出错：cannot open display，因为ssh无法打开窗口，在树莓派终端执行不会报错。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>更换七牛云过期SSL证书</title>
    <url>/2019/11/10/%E6%9B%B4%E6%8D%A2%E4%B8%83%E7%89%9B%E4%BA%91%E8%BF%87%E6%9C%9FSSL%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<p>更换七牛云过期SSL证书</p>
<p>转眼博客已经跑了一年了，最近又是域名到期、又是SSL证书到期。</p>
<p>刚给域名续了5年的费，存储在七牛云的图片因为SSL证书到期加载不出来了。提示“存在隐私安全隐患”，通过图片外链访问也无法加载图片，Chrome直接拒绝连接。</p>
<a id="more"></a>

<p>一年前配置的，流程有些忘了，今天晚上又摸索了一遍。</p>
<h2 id="七牛云申请证书"><a href="#七牛云申请证书" class="headerlink" title="七牛云申请证书"></a>七牛云申请证书</h2><p>据说七牛云不支持阿里云申请的证书，所以没在阿里云申请，直接在七牛云申请了TrustAisa的一年免费证书。</p>
<p>具体流程：</p>
<p>登录七牛云 &gt; SSL证书服务 &gt; 购买证书 &gt; 填写必要信息购买指向目标域名的证书（选择TrustAsia免费证书，验证方式选择DNS验证，个人信息可以随便填，貌似不需要验证）</p>
<h2 id="添加域名验证"><a href="#添加域名验证" class="headerlink" title="添加域名验证"></a>添加域名验证</h2><p>到域名解析里添加对应的TEXT类型的记录，记录值为申请证书时指定的值。我直接将以前的值变更成了新的值。</p>
<h2 id="应用SSL证书"><a href="#应用SSL证书" class="headerlink" title="应用SSL证书"></a>应用SSL证书</h2><p>大概十分钟左右证书签发成功后，到 对象存储 &gt; 域名管理 &gt; 配置 &gt; HTTPS 配置 &gt; 强制 HTTPS &gt; 可更换证书列表里选择刚才申请的证书，然后应用。等待几分钟之后，便能通过HTTPS访问存储内容了。</p>
]]></content>
      <categories>
        <category>Hexo博客维护</category>
      </categories>
      <tags>
        <tag>Hexo博客维护</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS下RIME输入法的配置</title>
    <url>/2019/11/09/Mac-OS%E4%B8%8BRIME%E8%BE%93%E5%85%A5%E6%B3%95%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Mac OS下RIME输入法配置</p>
<p>之前一直用的搜狗输入法，不得不说，搜狗输入法确实做得很不错，精准快速。但是毕竟是国产软件，联网之后隐私方面存在安全隐患，还没发布到网络的文本已经有人提前知道了💦。本想直接设置成单机版以避免输入法上传输入记录，但是貌似防火墙和改hosts文件对搜狗都不管用。于是在网上查了一下，知道了 <strong>RIME输入法</strong> 。</p>
<a id="more"></a>

<p>看到配置比较复杂，我也是犹豫了半天才下定决心搞一下的。还差 emoji表情的输入 没搞定，只弄好了基础的中文输入以及词库的扩展，以后真正有需要了再配置吧。</p>
<p>比较好的参考资料：</p>
<ul>
<li><p><a href="https://github.com/rime/squirrel" target="_blank" rel="noopener">GitHub主页</a></p>
</li>
<li><p><a href="http://ju.outofmemory.cn/entry/178796" target="_blank" rel="noopener">给 Rime 添加第三方词库</a></p>
</li>
<li><p><a href="https://lonelygo.github.io/2015-01-28-Rime_Input/" target="_blank" rel="noopener">Rime输入法—Squirrel词库添加及配置</a> （虽然有点旧了，但是很详细，推荐）</p>
</li>
</ul>
<p>安装完体验了两个小时，输入体验很不错，没遇到什么问题，以后应该会一直用下去。</p>
<p>各种软件还是去国产化吧，对待国产软件，有替代则替代，能不用则不用。</p>
]]></content>
      <categories>
        <category>工具软件</category>
      </categories>
      <tags>
        <tag>工具软件</tag>
      </tags>
  </entry>
  <entry>
    <title>scp-Linux文件复制命令</title>
    <url>/2019/11/03/scp-Linux%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>scp — Linux文件复制命令</p>
<blockquote>
<p>用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。</p>
</blockquote>
<a id="more"></a>



<h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><ul>
<li>-P: 端口号</li>
<li>-r: 递归复制   </li>
</ul>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 上传文件</span><br><span class="line">scp -r -P xxxx /home/local_user/file_path remote_user@remote_host_addr:/home/remote_user/file_path</span><br><span class="line"></span><br><span class="line"># 下载文件时将 source 和 target 调换一下</span><br><span class="line">scp -r -P xxxx remote_user@remote_host_addr:/home/remote_user/file_path /home/local_user/file_path</span><br></pre></td></tr></table></figure>

<h2 id="Permission-denied-问题"><a href="#Permission-denied-问题" class="headerlink" title="Permission denied 问题"></a>Permission denied 问题</h2><p>今天下午上传文件到服务器的时候一直报这个错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -P xxxx file.torrent test@test:/home</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">test@test.com&apos;s password: </span><br><span class="line">scp: /home/25316538e6498c7645e3da963253977d.torrent: Permission deniedv</span><br></pre></td></tr></table></figure>

<p>保证密码输入正确并且重试了好几次都报同样的错，才想起来以前遇到这个问题，是因为当前用户对目标目录没有操作权限导致的，只要把目标路径改到当前用户目录下就好了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -P xxxx file.torrent test@test:/home/test/Downloads</span><br></pre></td></tr></table></figure>

<p>》》 <a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/scp.html" target="_blank" rel="noopener">18. scp 跨机远程拷贝</a></p>
<p>》》<a href="https://curazy.com/archives/241713" target="_blank" rel="noopener">Twitterで大盛り上がりの「制作・著作 NHK」で締める大喜利に爆笑 11選</a></p>
<p>終</p>
<p>制作・著作</p>
<p>━━━━━</p>
<p>ⓃⒽⓀ</p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>好久不见</title>
    <url>/2019/11/02/%E5%A5%BD%E4%B9%85%E4%B8%8D%E8%A7%81/</url>
    <content><![CDATA[<p>我喜欢在天上飞，却不是很喜欢往中国飞。但是出生、成长都是在这片土地上，这里有我带不走的一切。所以，我难有选择的余地。国航波音737在成田机场一跃而起，时隔三月，再次回到这座城市。</p>
<p>锦城虽云乐，不如早还家。</p>
<a id="more"></a>

<p>早上为了起来收拾宿舍，6 点半眯着眼睛起床，洗漱、收拾宿舍、整理行李，九点钟才和同事一起下楼去机场。在楼下匆忙拍了一张照片留念，庆幸临走时的东京很晴朗，新宿的街道，浓厚的日系风格。</p>
<p><img src="https://image.youyou-2608.com/blog/20191102/QQ20191102-161839.png" alt="QQ20191102-161839"></p>
<p>从上野到成田的sky line，虽是一般电车和地铁的速度，不过外观、内饰还有票价却很像新干线。总是想着能去乡下转一圈，但最终没有去成。在去机场的列车上，倒是看见了一些风景漂亮的乡村。印象最深刻的是，列车已经出发了半小时，依然能在列车拐弯时看见天空树。因为既没钱也没有时间，所以也没有去成京都，尽管我总是跟别人说：想做就去做吧，趁还年轻。</p>
<p><img src="https://image.youyou-2608.com/blog/20191102/QQ20191102-163342.png" alt></p>
<p>在大山里长大的我，每次看到关东平原的一望无际，都会非常有感触。成田机场可能是远离市区的原因，附近很少有建筑。</p>
<p><img src="https://image.youyou-2608.com/blog/20191102/QQ20191102-164055.png" alt="QQ20191102-164055"></p>
<p>睡了一觉醒来，已经到了韩国上空，然后进入黄海上空。海天交接的地方能看到太阳穿过云层。</p>
<p><img src="https://image.youyou-2608.com/blog/20191102/QQ20191102-164709.png" alt="QQ20191102-164709"></p>
<p>3 个半小时，终于要降落了。看到这排列整齐的高层住房，我好像有点明白了什么事日系以及日系和中系的不一样。</p>
<p>屎黄色的云层，屎黄色的楼房，这大概就是中系的定义了。冬天到了，又要全民抗霾了。为什么国外不限行也不堵车，天天花火大会也没有雾霾呢？</p>
<p>看到这景色，我只想到一个词：猪圈。排列整齐，千篇一律。建好了猪圈，随便隔一下，然后有了猪就往里面关，这真是像极了猪圈。从这视角看过去，就是一个屎黄色的城市。</p>
<p><img src="https://image.youyou-2608.com/blog/20191102/QQ20191102-165205.png" alt="QQ20191102-165205"></p>
<p>因为一个小时的时差，虽然是 3 个半小时的行程，但是下午四点半就落地了。1 号这一天，活了 25 小时，感到有点困惑。</p>
<p>16°不知道算冷还是算热，像是已经进入冬天的样子，我穿着一件薄薄的外套在机场直抖。才 4 点半，天渐渐的黑了下来，出租车还没到住处，已经完全进入了黑夜。可能是赶上了下班高峰，在机场附近堵了二十分钟。</p>
<p>回到住处，一切还是离开时的样子，依然在工作的树莓派，半瓶没喝完的矿泉水，拖鞋还朝着门外的方向，窗帘依然是拉开的。只是窗台上多了一些虫子的尸体，体重秤上铺了一层灰，桌上的熏香已经挥发得一滴不剩。</p>
<p>今天中午来公司，意外的发现临走前犹豫扔掉还是送到公司的花草，依然健在，而且兰花已经长得完全认不出来了。</p>
<p><img src="https://image.youyou-2608.com/blog/20191102/QQ20191102-170720.png" alt="QQ20191102-170720"></p>
<p><img src="https://image.youyou-2608.com/blog/20191102/QQ20191102-170606.png" alt="QQ20191102-170606"></p>
<p><img src="https://image.youyou-2608.com/blog/20191102/QQ20191102-170841.png" alt="QQ20191102-170841"></p>
<p>桌上还有一袋不知道是谁什么时候送来的巧克力，也不确定是不是送给我的…</p>
<p><img src="https://image.youyou-2608.com/blog/20191102/QQ20191102-171012.png" alt="QQ20191102-171012"></p>
<p>三个月过去了，其实已经到了 11 月，说“今年也过去了”也不算过分。</p>
<blockquote>
<p> 今年完不成的目标，就留到明年再去完成吧。说不定运气好明年死了的话，就不用完成了。</p>
</blockquote>
<p><img src="https://image.youyou-2608.com/blog/20191102/QQ20191102-172611.png" alt="QQ20191102-172611"></p>
<p><a href="https://kimu3.net/20190228/13238" target="_blank" rel="noopener">「終 制作・著作 NHK」の元ネタ・初出・流行のきっかけは？</a></p>
<p>​                                                                                                                                                          </p>
<p>​                                                                                                                                        <strong>終</strong></p>
<p>​                                                                                                                                        <strong>制作・著作</strong></p>
<p>​                                                                                                                                        <strong>—————</strong></p>
<p>​                                                                                                                                        <strong>ⓃⒽⓀ</strong></p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>硝酸甘油炸药的制作</title>
    <url>/2019/10/27/%E7%A1%9D%E9%85%B8%E7%94%98%E6%B2%B9%E7%82%B8%E8%8D%AF%E7%9A%84%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<p>炸弹​ 💣 制作从入门到入土 👻</p>
<blockquote>
<p>在 YouTube 上看到了“回形针📎”的“原子弹制作教程”，感觉是一个提高动手能力的项目，尽管原理和流程都很简单，但是材料和设备不易得。于是想先从普通的硝酸甘油炸药开始学习吧，原料易得，危险性也不是那么高。</p>
</blockquote>
<p>学习资料：<a href="https://blog.boxun.com/hero/201208/haozhonghua2012/29_1.shtml" target="_blank" rel="noopener">自制炸药制作方法</a></p>
<a id="more"></a>



<h2 id="方式一：鞭炮"><a href="#方式一：鞭炮" class="headerlink" title="方式一：鞭炮"></a>方式一：鞭炮</h2><p>最简单易得的方式是选择黑火药。</p>
<ol>
<li>从售卖烟花爆竹的地方购买1000响左右的鞭炮</li>
<li>将鞭炮一个个拆开，将火药聚集起来</li>
</ol>
<p>一个个拆可能会比较麻烦，工作量比较大。作为简便途径，可以先将鞭炮在煤油中浸泡一段时间，然后放入绞肉馅的机器里，粉碎然后晾干可直接使用。（千万不能产生火花）</p>
<p>这种方式的成本在100块钱以内。</p>
<h2 id="方式二：自制硝酸甘油炸药"><a href="#方式二：自制硝酸甘油炸药" class="headerlink" title="方式二：自制硝酸甘油炸药"></a>方式二：自制硝酸甘油炸药</h2><h3 id="原料及材料"><a href="#原料及材料" class="headerlink" title="原料及材料"></a>原料及材料</h3><p>滴管，玻璃杯杯（2个），碳酸钠（苏打），浓硝酸，浓硫酸，甘油，水（一盆），一个茶缸，温度计（量程大一些），酸碱指示剂或者PH试纸。</p>
<h3 id="流程及步骤"><a href="#流程及步骤" class="headerlink" title="流程及步骤"></a>流程及步骤</h3><ol>
<li>取一个玻璃杯并向其中加入80ml左右的水。</li>
<li>取另一个玻璃杯加入80ml左右的水，再加入一平勺碳酸钠，配成碳酸钠溶液。</li>
<li>将茶缸放入水盆中，向茶缸中 <strong>缓慢滴入</strong>⚠️ 8~10ml左右的浓硝酸，保持温度在20℃以下。如果是夏天的话，可能需要准备一些冰块。</li>
<li>向茶缸中 <strong>缓慢滴入</strong>⚠️ 22~28ml浓硫酸，注意保持温度在20℃以下，必要时向盆中加入冰块。</li>
<li>保持4~5滴/分钟的速率将甘油 <strong>滴入</strong> 上述混合物中，一直滴到甘油在混合物表面形成甘油层为止。注意保持温度在20℃以下！</li>
<li>低温下搅拌混合物15分钟以后，将混合物倒入已经加入蒸馏水的杯子中。硝酸甘油会沉底。</li>
<li>把下层的硝酸甘油滴入碳酸钠溶液中（为了去除多余的酸），知道PH值为中性。（​⚠️​ 千万不能振荡或晃动​！）</li>
</ol>
<h3 id="填充剂"><a href="#填充剂" class="headerlink" title="填充剂"></a>填充剂</h3><p>将玻璃瓶刻蚀，形成小块，把头部瓶口用胶带之类的东西密封起来，以保证爆炸时玻璃瓶体能形成弹片。为了加大弹片的威力，可以考虑 <strong>将填充剂换成铝热剂</strong> （铝粉和氧化铁粉），发生爆炸的时候，高温会使其剧烈反应，产生更大的杀伤力。</p>
<h3 id="引爆"><a href="#引爆" class="headerlink" title="引爆"></a>引爆</h3><p>接下来是引爆系统部分。</p>
<h4 id="短路电路引爆"><a href="#短路电路引爆" class="headerlink" title="短路电路引爆"></a>短路电路引爆</h4><p>拆解无线电系统，得到一个共频系统，将其中一个短路的情况安装到炸弹上，然后用其他一些电火花即可引燃的物质与炸药放在一起，可实现 通话 &gt; 短路 &gt; 火花 &gt; 爆炸 的遥控效果。 （待研究）</p>
<h4 id="定时系统引爆"><a href="#定时系统引爆" class="headerlink" title="定时系统引爆"></a>定时系统引爆</h4><p>定时系统比较简单，普通的电子闹钟就可以胜任。</p>
<blockquote>
<p>最后向各位说明的是，制作炸弹也好，燃烧弹也好，既不是高精尖科技，也不是一个你捻子一个雷式的土法生产。需要化学，物理，结构力学，材料力学甚至日常生活方面各种的知识。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>结婚没有意义</title>
    <url>/2019/10/27/%E7%BB%93%E5%A9%9A%E6%B2%A1%E6%9C%89%E6%84%8F%E4%B9%89/</url>
    <content><![CDATA[<p>结婚没有意义</p>
<blockquote>
<p>转眼就要进入十一月份了，2019 年还剩下六十天左右。</p>
<p>每当临近年末，总是要回过头去看看，当时年初承诺自己一定要实现的目标，完成了多少。</p>
</blockquote>
<a id="more"></a>



<p>大概从三四年前开始，每年的目标里总是少不了脱单这一项。至于为什么要脱单这个问题，却很少去认真地想过。大概是因为身边的同龄人大多已经结婚或者在准备结婚，或者是因为觉得青春已逝，却从未体验过恋爱的味道，又或者是因为已经到了结婚的年龄，却还没有开始做任何的准备，仅仅是为了缓解这种莫名其妙的忐忑。</p>
<p>同样的年龄的增长，却逐渐带来更大的心理改变。年纪还小的时候，可能觉得无关紧要的事，现在变得越发的敏感。这两年每次回家过年，父母会开始有意无意的提起这件事，虽然没有明说，但是我还是能知道他们的想法。对于偏远的农村来说，25 岁的人至少是一个三岁孩子的爹才显得比较正常。</p>
<p>每次一想到已经到了结婚、并且不结婚就会显得很奇怪的年龄的时候，都会跳出一些逃避的想法，或者是对世俗的鄙视。诸如：我是不是能选择一个即便终身未婚也会显得不那么奇怪的地方生活？什么时候我生活的坏境才会把婚姻的意义看得轻若鸿毛？每当有了这种想法的时候，我总是第一时间想到日本。</p>
<p>或许因为语言的关系，除了中国，我最了解的国家，大概就是日本了。提到日本，当然少不了终身未婚和少子化。发达国家对于婚姻的态度比中国还是要开放很多，这里的男性终身未婚率能达到25%！每 100 个人中有 25 个人到 50 岁也没结过一次婚！我第一次知道这个数字的时候，觉得难以置信。当不婚的人很常见的时候，也就没什么奇怪的了，即便你终身没有结婚，也和其他人没有任何区别，不用承受世俗的压力。很多时候，我真想多赚点钱，然后移民到日本。</p>
<p>想象虽然是美好的，但是终究还是要回到现实生活中，终究还是逃离不了被生活推着前进的下场。如果逃避不了结婚的话，那必须要认真的思考一下结婚的意义是什么，或者说结婚会给自己带来什么。</p>
<p>至少在现在，我个人觉得婚姻至少是弊大于利的，和另一个人在一起，免不了牺牲自己的喜好去包容，牺牲自己的时间去陪伴，而对于对方来说，也是如此，所以还要 x2，双倍的损失。再养个孩子，那更是不敢想象。像我这样怕麻烦又固执的人，是万万不适合结婚的，如果结婚，那很可能是害人害己。</p>
<p>两个人在一起，总有会腻的一天。</p>
<p>这次出差，才来了大概两个星期的时间，其中两个同事就超出了普通同事关系。周末一起出去玩，晚上一起去逛街，平时上下班两人也是一起。刚开始还觉得没什么，毕竟现在是一个自由表达爱的时代，即便是一个月两个月后不喜欢了也没什么奇怪的。但是一次无意的和其他同事的谈话中才得知，原来其中的女同事已经有了婚约，是即将要结婚的人了。顿时感觉自己傻了，身边的一群同事还说没什么、没什么，我觉得那只是因为这种事没有落在他们的头上。</p>
<p>要遇到一个和你相处很久还绝对没有压力的人应该是不可能的。大家都知道总是会腻的，必然要去努力维持平衡的状态，既然终究要使尽浑身解数去维持，那当初不开始不就好了吗？</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>周末小记</title>
    <url>/2019/10/20/%E5%91%A8%E6%9C%AB%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>今天是 10 月 20 日，10 月份还剩下 10 天，回国还剩下 11 天，2019 年还剩下 73 天。</p>
<a id="more"></a>



<h2 id="最近欲しいもの"><a href="#最近欲しいもの" class="headerlink" title="最近欲しいもの"></a>最近欲しいもの</h2><p>上周无意间在 YouTube 上看到谷歌发布了 Pixel4，取消了三代时候的背部指纹识别，并且没有异形屏，很想入手。还加入了手势控制，不用接触屏幕就可以操作，黑科技满满的感觉；并且国内大家都是华为小米，此时能有一个谷歌手机，也能有点新鲜感。还能体验一下 Google Play和谷歌全家桶，不用被国内流氓软件厂商喂屎。现在用的手机还是去北京实习的时候换的，虽然至今觉得性能够用，外观好看，但是还是有种过时的感觉。下一个手机就是 Pixel4，决定了。</p>
<h2 id="最近面白いこと"><a href="#最近面白いこと" class="headerlink" title="最近面白いこと"></a>最近面白いこと</h2><p>昨天晚上在 YouTube 看到日媒报道《南方公园》在中国被封禁，刷到下面日本人对此事的评论，真是有够好笑了。</p>
<p>根据剧情介绍，《中国乐队》通过剧中人物兰迪嘲讽美国的电影和电视节目为了中国市场而刻意迎合中国的审查制度，并将小熊维尼、劳改营、第十四世达赖喇嘛、中国器官移植、黑衣示威者与警察对峙（暗指香港民主抗争）、水炮车等内容反应在剧情中。剧中人物兰迪的儿子斯坦想要组建乐队，娱乐公司老板建议他到中国发展，但要面对中国的言论审查。结果，斯坦被告知，歌词中不能提及达赖喇嘛、活摘器官等字样，因为这不符合中国的要求。兰迪不得已跟中国私下达成协议，杀害了小熊维尼以获得中国市场份额。而斯坦不愿意违心进入中国市场，最终放弃了乐队计划。</p>
<p>最大快人心的是这个道歉信：</p>
<p><img src="https://pbs.twimg.com/media/EGS6BaHVUAEjRaL?format=jpg&name=4096x4096" alt></p>
<p>希望全世界的企业和团体都能像 NBA 一样，欢迎中国的审查制度进入到他们的家里和心里，对金钱的热爱都能胜过民主和自由。Come on，China！</p>
<h2 id="和同学小聚"><a href="#和同学小聚" class="headerlink" title="和同学小聚"></a>和同学小聚</h2><p>上周约了在日工作的大学同学一起吃饭，两个月前刚到日本时他请我吃了个饭还去秋叶原和千叶县逛了一圈。想着没几天就要回国了，趁着还有周末回请一下。在公寓看了一个小时的电视，然后在附近吃了烤肉，味道还挺不错。在这边物价高，并且口味差距有点大，基本没迟到比较刺激的食物，回国了一定要多吃几顿火锅！</p>
<p>现在才发现吃饭的时候忘记拍照了。。</p>
<p>吃完了饭一起去了歌舞伎町，传说中风俗店聚集的地方。之前只是听同事们说，今天去了才发现超出了我的想象。因为是周末的原因，游客比较多。</p>
<p><img src="https://image.youyou-2608.com/blog/201910201/QQ20191020-225931.png" alt></p>
<p>转了一圈歌舞伎町，从一丁目到三丁目，感觉走得有点累，就去了花园神社休息，但是晚上花园神社已经休息了。</p>
<p><img src="https://image.youyou-2608.com/blog/201910201/IMG_7385.JPG" alt></p>
<p><img src="https://image.youyou-2608.com/blog/201910201/IMG_7387%2820191020-205644%29.jpg" alt></p>
<p>休息完毕回到新宿站，找到车站入口的时候才发现，总武线和大江户线站台在相反方向，还没反应过来说了两句话就分手了。同学也和我一样想在今年年底离职，回南方工作，希望都能顺利的转职吧。</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>安装电池驱动</title>
    <url>/2019/10/20/%E5%AE%89%E8%A3%85%E7%94%B5%E6%B1%A0%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<p>通过修改 dtst 文件来驱动电池。</p>
<p>目标替换掉值大于 16 的变量，并且消除编译错误。</p>
<p>在dtst 文件中搜索“EmbeddedControl”，</p>
<a id="more"></a>

<p>找到变量定义的地方：</p>
<p><img src="https://image.youyou-2608.com//blog/20191020/image.png" alt="img"></p>
<p>先定义一个替换的正则方法，方便后面的替换，名为 B1B2：</p>
<p>into method label B1B2 remove_entry;</p>
<p>into definitionblock code_regex . insert</p>
<p>begin</p>
<p>Method (B1B2, 2, NotSerialized)\n</p>
<p>{\n</p>
<p>Return(Or(Arg0, ShiftLeft(Arg1, 8)))\n</p>
<p>}\n</p>
<p>end;</p>
<p>例子：</p>
<p><img src="https://image.youyou-2608.com//blog/20191020/image1.png" alt="img"></p>
<p>用下面的正则替换将该变量替换成等值但是小于 8 的值：</p>
<p>into device label EC0 code_regex BRC,\s+16, replace_matched begin BRC1,8,BRC2,8, end;</p>
<p>点击 patch，然后将代码粘贴进去：</p>
<p><img src="https://image.youyou-2608.com//blog/20191020/image2.png" alt="img"></p>
<p>然后点击 Apply，</p>
<p><img src="https://image.youyou-2608.com//blog/20191020/image3.png" alt="img"></p>
<p>变量已经被替换掉了</p>
<p>然后确认一下这个变量被替换掉之后有没有编译错误，点击“Compile”按钮编译文件：</p>
<p><img src="https://image.youyou-2608.com//blog/20191020/image5.png" alt="img"></p>
<p>出现了三个编译错误，接下来就是消除这些编译错误</p>
<p>点击编译错误，定位到错误出现的地方：</p>
<p><img src="https://image.youyou-2608.com//blog/20191020/image6.png" alt="img"></p>
<p>原来的变量已经被替换掉了，所以引用原来变量名的地方都出错了。</p>
<p>用下面的代码将方法里的变量替换掉（label 后面的变量名就是Mehtod的一个参数）：</p>
<p>into method label XBTS code_regex (BRC, replaceall_matched begin (B1B2(BRC1,BRC2), end;</p>
<p>将代码粘贴到 Patch 里，</p>
<p><img src="https://image.youyou-2608.com//blog/20191020/image7.png" alt="img"></p>
<p>然后点击 Apply。</p>
<p>然后再点击 “Compile”按钮编译一下，刚才那个错误已经消失了。</p>
<p><img src="https://image.youyou-2608.com/blog/20191020/image9.png" alt></p>
<p>循环上面的除错处理，替换完全部的变量，并且消除所有的错误。</p>
<p><img src="https://image.youyou-2608.com/blog/20191020/image10.png" alt="img"></p>
<p>替换完之后将.aml 文件保存到/patched 目录下，重启即可。</p>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV——cv2.inRange()函数</title>
    <url>/2019/10/14/OpenCV%E2%80%94%E2%80%94cv2-inRange-%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>在图像中提取目标物时可以用该函数去除背景。</p>
<p>有三个参数：</p>
<ul>
<li>hsv_img：颜色空间为 HSV 的图像；</li>
<li>lower：下阈值，图像中低于此值的颜色值变为 0；</li>
<li>uppper：上阈值，图像中高于此值的颜色值变为 0。</li>
</ul>
<a id="more"></a>



<p>颜色值在此范围内的全部设置为255，然后利用得到背景和原图片进行位操作，即可得到原图中目标。</p>
<p>常用方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = cv2.imread(img_path, <span class="number">0</span>)</span><br><span class="line">img_hsv = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)</span><br><span class="line">lower = [<span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>]</span><br><span class="line">uppper = [<span class="number">200</span>, <span class="number">255</span>, <span class="number">255</span>]</span><br><span class="line"><span class="comment"># 利用上下阈值去除背景部分</span></span><br><span class="line">mask = cv2.inRange(img_hsv, lower, upper)</span><br><span class="line"><span class="comment"># 利用位运算得到目标物体</span></span><br><span class="line">target = cv2.bitwise_and(img, img, mask=mask)</span><br><span class="line">cv2.imshow(<span class="string">"mask"</span>, mask)</span><br><span class="line">cv2.imshow(<span class="string">"target"</span>, target)</span><br></pre></td></tr></table></figure>

<p>上下阈值的获取：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">color = np.array([[[xxx, xxx, xxx]]])</span><br><span class="line">hsv_color = cv2.cvtColor(color, cv2.COLOR_RGB2HSV)</span><br><span class="line">print(hsv_color)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV 学习笔记（一）</title>
    <url>/2019/10/12/OpenCV-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p><a href="https://zh.wikipedia.org/wiki/OpenCV" target="_blank" rel="noopener">OpenCV — 维基百科</a> </p>
<p><strong>OpenCV</strong>的全称是Open Source Computer Vision Library，是一个跨平台的<a href="https://zh.wikipedia.org/wiki/计算机视觉" target="_blank" rel="noopener">计算机视觉</a>库。OpenCV是由<a href="https://zh.wikipedia.org/wiki/英特尔" target="_blank" rel="noopener">英特尔公司</a>发起并参与开发，以<a href="https://zh.wikipedia.org/wiki/BSD许可证" target="_blank" rel="noopener">BSD许可证</a>授权发行，可以在商业和研究领域中免费使用。OpenCV可用于开发实时的<a href="https://zh.wikipedia.org/wiki/图像处理" target="_blank" rel="noopener">图像处理</a>、<a href="https://zh.wikipedia.org/wiki/计算机视觉" target="_blank" rel="noopener">计算机视觉</a>以及<a href="https://zh.wikipedia.org/wiki/模式识别" target="_blank" rel="noopener">模式识别</a>程序。</p>
<a id="more"></a>



<h2 id="读取和显示图像"><a href="#读取和显示图像" class="headerlink" title="读取和显示图像"></a>读取和显示图像</h2><ul>
<li>cv2.imread()：读取</li>
<li>cv2.imwrite()：写入</li>
<li>cv2.imshow()：显示</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = cv2.imread(img_path, <span class="number">0</span>)</span><br><span class="line">cv2.namedWindow(<span class="string">"imview"</span>, cv2.WINDOW_NORMAL)</span><br><span class="line">cv2.imshow(<span class="string">"imview"</span>, img)</span><br><span class="line">k = cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> k == ord(<span class="string">"s"</span>):</span><br><span class="line">  cv2.imwrite(<span class="string">"other.jpg"</span>, img)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com//blog/20191012/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72019-10-0620.25.17.png" alt></p>
<h2 id="视频的操作"><a href="#视频的操作" class="headerlink" title="视频的操作"></a>视频的操作</h2><h3 id="从摄像头读取视频"><a href="#从摄像头读取视频" class="headerlink" title="从摄像头读取视频"></a>从摄像头读取视频</h3><ul>
<li>cv2.VideoCapture(0).read()</li>
<li>cv2.cvtColor()</li>
<li>cv2.imshow()</li>
<li>cap.get(propId)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_video</span><span class="params">()</span>:</span></span><br><span class="line">    cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">        cv2.imshow(<span class="string">"frame"</span>, gray)</span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey() == ord(<span class="string">"q"</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cap.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">video</span><span class="params">()</span>:</span></span><br><span class="line">    cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">    fourcc = cv2.VideoWriter_fourcc(*<span class="string">'XVID'</span>)</span><br><span class="line">    out = cv2.VideoWriter(<span class="string">"output.avi"</span>, fourcc, <span class="number">20</span>, <span class="number">0</span>, (<span class="number">640</span>, <span class="number">480</span>))</span><br><span class="line">    <span class="keyword">while</span> (cap.isOpened()):</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            frame = cv2.flip(frame, <span class="number">0</span>)</span><br><span class="line">            out.write(frame)</span><br><span class="line">            cv2.imshow(<span class="string">"video"</span>, frame)</span><br><span class="line">            <span class="keyword">if</span> cv2.waitKey(<span class="number">0</span>) == ord(<span class="string">"q"</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cap.release()</span><br><span class="line">    out.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<h3 id="从文件中获取视频"><a href="#从文件中获取视频" class="headerlink" title="从文件中获取视频"></a>从文件中获取视频</h3><p>cv2.VideoCapture(0)表示打开默认设备，将设备索引号改成视频文件的名称就能从视频文件中读取视频，使用 waitKey()控制播放速度（通常25 ms）。</p>
<h2 id="OpenCV-中的绘图函数"><a href="#OpenCV-中的绘图函数" class="headerlink" title="OpenCV 中的绘图函数"></a>OpenCV 中的绘图函数</h2><p>学会以下函数的使用：</p>
<ul>
<li>cv2.line()</li>
<li>cv2.circle()</li>
<li>cv2.rectangle()</li>
<li>cv2.ellipse()</li>
<li>cv2.putText()</li>
</ul>
<p>参数：上面所有的绘图函数都需要的参数：</p>
<ul>
<li>img ：画布</li>
<li>color : 指定的颜色，RGB-&gt;(255, 255, 0)</li>
<li>linetype : 线条的类型，8连接，抗锯齿等。lineType=cv2.LINE_AA（抗锯齿）。</li>
</ul>
<h3 id="画线"><a href="#画线" class="headerlink" title="画线"></a>画线</h3><p>画一条直线需要指定直线的起点和终点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_line2</span><span class="params">()</span>:</span></span><br><span class="line">    canvas = np.zeros((<span class="number">300</span>, <span class="number">300</span>, <span class="number">3</span>), dtype=<span class="string">"uint8"</span>)</span><br><span class="line">    green = (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">    cv2.line(canvas, (<span class="number">20</span>, <span class="number">20</span>), (<span class="number">150</span>, <span class="number">150</span>), color=green)</span><br><span class="line">    cv2.imshow(<span class="string">"green line"</span>, canvas)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com//blog/20191012/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72019-10-0620.40.01.png" alt></p>
<h3 id="画矩形"><a href="#画矩形" class="headerlink" title="画矩形"></a>画矩形</h3><p>绘制矩形需要指定两个点的坐标：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_rectangle</span><span class="params">()</span>:</span></span><br><span class="line">    canvas = np.zeros((<span class="number">300</span>, <span class="number">300</span>, <span class="number">3</span>), dtype=<span class="string">"uint8"</span>)</span><br><span class="line">    color = (<span class="number">126</span>, <span class="number">126</span>, <span class="number">126</span>)</span><br><span class="line">    cv2.rectangle(canvas, (<span class="number">80</span>, <span class="number">80</span>), (<span class="number">250</span>, <span class="number">270</span>), color=color)</span><br><span class="line">    cv2.imshow(<span class="string">"rectangle"</span>, canvas)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com//blog/20191012/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72019-10-0620.49.11.png" alt></p>
<h3 id="画圆"><a href="#画圆" class="headerlink" title="画圆"></a>画圆</h3><p>绘制圆形需要指定圆心坐标和半径大小：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_circle</span><span class="params">()</span>:</span></span><br><span class="line">    canvas = np.zeros((<span class="number">300</span>, <span class="number">300</span>, <span class="number">3</span>), dtype=<span class="string">"uint8"</span>)</span><br><span class="line">    color = (<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">    cv2.circle(canvas, (<span class="number">150</span>, <span class="number">140</span>), <span class="number">100</span>, color=color)</span><br><span class="line">    cv2.imshow(<span class="string">"circle"</span>, canvas)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com//blog/20191012/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72019-10-0620.53.40.png" alt></p>
<h3 id="画椭圆"><a href="#画椭圆" class="headerlink" title="画椭圆"></a>画椭圆</h3><p>绘制椭圆需要指定的参数：</p>
<ol>
<li>中心点坐标</li>
<li>长轴和短轴</li>
<li>沿逆时针方向旋转的角度</li>
<li>顺时针方向起始角度和结束角度</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_ellipse</span><span class="params">()</span>:</span></span><br><span class="line">    canvas = np.zeros((<span class="number">400</span>, <span class="number">400</span>, <span class="number">3</span>), dtype=<span class="string">"uint8"</span>)</span><br><span class="line">    color = (<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">    cv2.ellipse(canvas, (<span class="number">200</span>, <span class="number">200</span>), (<span class="number">100</span>, <span class="number">150</span>), <span class="number">0</span>, <span class="number">0</span>, <span class="number">360</span>, color)</span><br><span class="line">    cv2.imshow(<span class="string">"ellipse"</span>, canvas)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com//blog/20191012/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72019-10-0620.59.20.png" alt></p>
<h3 id="在图片中添加文字"><a href="#在图片中添加文字" class="headerlink" title="在图片中添加文字"></a>在图片中添加文字</h3><p>所需参数：</p>
<ul>
<li>添加的文本</li>
<li>绘制的位置</li>
<li>字体类型</li>
<li>字体大小</li>
<li>文字的一般属性（颜色，粗细，线条类型等）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put_text</span><span class="params">()</span>:</span></span><br><span class="line">    canvas = np.zeros((<span class="number">300</span>, <span class="number">600</span>, <span class="number">3</span>), dtype=<span class="string">"uint8"</span>)</span><br><span class="line">    font = cv2.FONT_HERSHEY_SIMPLEX</span><br><span class="line">    cv2.putText(canvas, <span class="string">'Kanna Makino'</span>, (<span class="number">10</span>, <span class="number">100</span>), font, <span class="number">2</span>, (<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>), <span class="number">2</span>)</span><br><span class="line">    cv2.imshow(<span class="string">"put text"</span>, canvas)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com//blog/20191012/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72019-10-0621.12.59.png" alt></p>
<h2 id="简单的鼠标事件"><a href="#简单的鼠标事件" class="headerlink" title="简单的鼠标事件"></a>简单的鼠标事件</h2><ul>
<li>学习使用 OpenCV 处理鼠标事件</li>
<li>函数：<strong>cv2.setMouseCallback()</strong></li>
</ul>
<h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><p>鼠标事件可以获得事件对应的坐标和事件名称。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_circle</span><span class="params">(event, x, y, flags, params)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> event == cv2.EVENT_LBUTTONDBLCLK:</span><br><span class="line">        cv2.circle(img, (x, y), <span class="number">100</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">-1</span>, lineType=cv2.LINE_AA)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), dtype=<span class="string">"uint8"</span>)</span><br><span class="line">cv2.namedWindow(<span class="string">'image'</span>)</span><br><span class="line">cv2.setMouseCallback(<span class="string">'image'</span>, draw_circle)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">20</span>) &amp; <span class="number">0xFF</span> == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com//blog/20191012/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72019-10-0822.11.59.png" alt></p>
<h2 id="用滑动条做调色板"><a href="#用滑动条做调色板" class="headerlink" title="用滑动条做调色板"></a>用滑动条做调色板</h2><p>学习目标：</p>
<ul>
<li>学会把滑动条绑定到 OpenCV 的窗口</li>
<li>cv2.getTrackbarPos()</li>
<li>cv2.createTrackbar()</li>
</ul>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># _*_cdoing:utf-8_*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nothing</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img = np.zeros((<span class="number">500</span>, <span class="number">312</span>, <span class="number">3</span>), dtype=<span class="string">"uint8"</span>)</span><br><span class="line">cv2.namedWindow(<span class="string">"image"</span>)</span><br><span class="line">cv2.createTrackbar(<span class="string">"R"</span>, <span class="string">"image"</span>, <span class="number">0</span>, <span class="number">255</span>, nothing)</span><br><span class="line">cv2.createTrackbar(<span class="string">"G"</span>, <span class="string">"image"</span>, <span class="number">0</span>, <span class="number">255</span>, nothing)</span><br><span class="line">cv2.createTrackbar(<span class="string">"B"</span>, <span class="string">"image"</span>, <span class="number">0</span>, <span class="number">255</span>, nothing)</span><br><span class="line"></span><br><span class="line">switch = <span class="string">'0:OFF\n1:ON'</span></span><br><span class="line">cv2.createTrackbar(switch, <span class="string">"image"</span>, <span class="number">0</span>, <span class="number">1</span>, nothing)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    cv2.imshow(<span class="string">"image"</span>, img)</span><br><span class="line">    k = cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    r = cv2.getTrackbarPos(<span class="string">"R"</span>, <span class="string">"image"</span>)</span><br><span class="line">    g = cv2.getTrackbarPos(<span class="string">"G"</span>, <span class="string">"image"</span>)</span><br><span class="line">    b = cv2.getTrackbarPos(<span class="string">"B"</span>, <span class="string">"image"</span>)</span><br><span class="line">    s = cv2.getTrackbarPos(switch, <span class="string">"image"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> s == <span class="number">0</span>:</span><br><span class="line">        img[:] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        img[:] = [r, g, b]</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><blockquote>
<p>创建一个画板，可以选择各种颜色的画笔进行绘画操作。</p>
</blockquote>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_circle</span><span class="params">(event, x, y, flag, params)</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h2 id="核心操作"><a href="#核心操作" class="headerlink" title="核心操作"></a>核心操作</h2><h2 id="图像的基础操作"><a href="#图像的基础操作" class="headerlink" title="图像的基础操作"></a>图像的基础操作</h2><p>学习目标：</p>
<ul>
<li>获取像素的值并修改</li>
<li>获取图像的属性（信息）</li>
<li>图像的 ROI（）</li>
<li>图像通道的拆分与合并</li>
</ul>
<h3 id="获取图像的像素"><a href="#获取图像的像素" class="headerlink" title="获取图像的像素"></a>获取图像的像素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">"/Users/youyou2608/Pictures/pi.png"</span>)</span><br><span class="line">print(img.item(<span class="number">10</span>, <span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line">img.itemset((<span class="number">10</span>, <span class="number">10</span>, <span class="number">2</span>), <span class="number">100</span>)</span><br><span class="line">print(img.item(<span class="number">10</span>, <span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># 图像的属性：行，列，通道，图像数据类型，像素数目等</span></span><br><span class="line">print(img.shape)</span><br><span class="line"><span class="comment"># 像素数目</span></span><br><span class="line">print(img.size)</span><br><span class="line"><span class="comment"># 图像的数据类型</span></span><br><span class="line">print(img.dtype)</span><br><span class="line"></span><br><span class="line"><span class="comment">####### 输出 ######</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line">(<span class="number">487</span>, <span class="number">423</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">618003</span></span><br><span class="line">uint8</span><br></pre></td></tr></table></figure>

<h3 id="图像的-ROI"><a href="#图像的-ROI" class="headerlink" title="图像的 ROI"></a>图像的 ROI</h3><p>有时对图像的某一特定区域进行搜索比在一张图像中搜索有更高的准确性和性能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">"/Users/youyou2608/Pictures/pi.png"</span>)</span><br><span class="line">temp = img[<span class="number">100</span>:<span class="number">300</span>, <span class="number">10</span>:<span class="number">100</span>]</span><br><span class="line">img[<span class="number">0</span>:<span class="number">200</span>, <span class="number">100</span>:<span class="number">190</span>] = temp</span><br><span class="line">cv2.imshow(<span class="string">"image"</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">100000</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com//blog/20191012/QQ20191009-225749.png" alt></p>
<h3 id="拆分及合并图像通道"><a href="#拆分及合并图像通道" class="headerlink" title="拆分及合并图像通道"></a>拆分及合并图像通道</h3><p>对 BGR 三个通道分别进行操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将图片所有共色通道值都设置为0</span></span><br><span class="line">img = cv2.imread(<span class="string">"/Users/youyou2608/Pictures/pi.png"</span>)</span><br><span class="line">img[<span class="number">0</span>:<span class="number">300</span>, <span class="number">0</span>:<span class="number">200</span>, <span class="number">2</span>] = <span class="number">0</span></span><br><span class="line">cv2.imshow(<span class="string">"image"</span>, img)</span><br></pre></td></tr></table></figure>

<h2 id="图像上的算术运算"><a href="#图像上的算术运算" class="headerlink" title="图像上的算术运算"></a>图像上的算术运算</h2><ul>
<li>学习图像上的加法、减法和位运算等</li>
<li>cv2.add()</li>
<li>cv2.addWeighted()</li>
</ul>
<h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><p>进行加法的两幅图像的大小、类型必须一致。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.uint([<span class="number">250</span>])</span><br><span class="line">y = np.uint([<span class="number">20</span>])</span><br><span class="line">print(cv2.add(x, y))  <span class="comment"># [[255]]</span></span><br></pre></td></tr></table></figure>

<h3 id="图像混合"><a href="#图像混合" class="headerlink" title="图像混合"></a>图像混合</h3><p>图像混合其实也是加法，但是不同的是两幅图像的权重不同。</p>
<p>函数：cv2.addWeighted()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img1 = cv2.read(<span class="string">"img1.png"</span>)</span><br><span class="line">img2 = cv2.read(<span class="string">"img2.png"</span>)</span><br><span class="line"></span><br><span class="line">dst = cv2.addWeighted(img1, <span class="number">0.7</span>, img2, <span class="number">0.3</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">"image"</span>, dst)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com//blog/20191012/2019-10-1217.13.11.png" alt></p>
<p>后续…</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>给博客换了新主题</title>
    <url>/2019/10/11/%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%8D%A2%E4%BA%86%E6%96%B0%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<h2 id="新的博客主题"><a href="#新的博客主题" class="headerlink" title="新的博客主题"></a>新的博客主题</h2><blockquote>
<p>之前一直有的 Next，虽然是很好看的主题，但是在自己调整的过程中搞得很混乱，主要是看起来还很丑。好久之前就想着换一个主题，今天晚上无意间在 Hexo 主页上点开了一个很符合我的审美的主题——Ocean。</p>
</blockquote>
<p>项目地址：<a href="https://github.com/zhwangart/hexo-theme-ocean" target="_blank" rel="noopener">https://github.com/zhwangart/hexo-theme-ocean</a></p>
<a id="more"></a>



<p>安装，配置及中文文档：GitHub 说明</p>
<p>简洁干净的风格，看上去很舒服：</p>
<p><img src="https://image.youyou-2608.com/QQ20191010-235901.png" alt></p>
<p>很多细节的地方还没配置好，周末有时间再仔细完善一下吧。</p>
<h2 id="台风前的好天气"><a href="#台风前的好天气" class="headerlink" title="台风前的好天气"></a>台风前的好天气</h2><p>台风 19 号——今年最强的台风，明天下午左右就要到达东京附近了。晚上下班想去超市屯点吃的东西，才出乎预料的发现超市已经空了，最后买到两个便当和一些蔬菜，希望台风之后超市能尽快恢复正常。</p>
<p><img src="https://image.youyou-2608.com/QQ20191011-001547.png" alt></p>
<p><img src="https://image.youyou-2608.com/QQ20191011-001110.png" alt></p>
<p>明天又是一个周五，之后肯定是一个被台风闹腾得睡不着的晚上，然后要睡到中午或者下午一点才能起床，周天应该会是个好天气，准备去羽田机场拍机（如果地铁能恢复营运的话）；周一是三连休的最后一天，待在公寓里，看看书继续学习。</p>
<h2 id="出差的最后"><a href="#出差的最后" class="headerlink" title="出差的最后"></a>出差的最后</h2><p>周二是 10 月 15 号，还剩下十来个工作日，三个月的出差就要画上句号了。虽然每天工作很忙加班到很晚，但是也见到了很多从未见过的事物，有过很多难忘的经历，留下了很多宝贵的回忆。</p>
]]></content>
      <categories>
        <category>Hexo博客维护</category>
      </categories>
      <tags>
        <tag>Hexo博客维护</tag>
      </tags>
  </entry>
  <entry>
    <title>小记</title>
    <url>/2019/09/07/%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>小记</p>
<p>出差已经快一个月了，每天早上挤地铁上班，晚上买菜做饭，新鲜感逐渐消失，渐渐地习惯了这里的生活。</p>
<p>毕竟是出差，每到周末，跟着同事出去逛景点，仿佛在旅游一般。</p>
<p>每个地方都能遇到中国人，上周在新宿汽车站被发纸巾，结果大姐就是一个中国人，感觉东京就像是中国的城市一样。</p>
<p>上野、秋叶原、新宿和银座，这些名字就像是城市名一样，虽然他们都在东京。</p>
<p>第一周去千叶县找了大学同学，一起去了上野、秋叶原和船桥。</p>
<p>第二周哪里也没去，在宾馆待了一个周末。</p>
<p>第三周因为计划去富士山，所以周六和同事去了台场，买一些登山用的东西。周天去爬了富士山。</p>
<p>虽然从半山腰开始爬，2000-m 的高度，从早上9:40爬到了下午3:20才到山顶，回到出发点已经是6:20。同事从小就是平原地区的城里人，才刚刚出发，就开始高反，途中买了三罐氧气，一走一停好不容易才到山顶；下山又开始腿疼，我走几步就得停下来等一下。到了山脚因为直达新宿的汽车已经没有了，只好坐 bus 到河口湖，可惜河口湖到新宿的车票也没有了。只好从河口湖坐富士急行线电车到大月，再从大月到高尾，最后从高尾到新宿，晚上11.20 才回到新宿。匆忙去松屋吃了个饭，拖着疲惫的身躯回到了宾馆。</p>
<p>因为周六什么也没准备，所以周天去的，第二天就是周一，第二天腿疼，晚上还加班到了 11 点才下班。。</p>
<p>这周末是第四个周末，今天晚上去調布市看了花火大会。第一次看花火大会，会场上的人还挺拥挤的，但是很有秩序，和其他四个西安的同事一起去的。六点半开始看到将近七点十分我就回来了，一是担心回来电车会拥挤，二是看了花火大会之后，感到有点莫名的孤独，想一个人安静一下。</p>
<p>上周京急线发生电车脱轨事故，今天下午才恢复，明天想乘京急线电车去横滨，不知道能不能成行。</p>
<p>项目组又开始为 11 月份开始的综合测试招出差的人了，最晚能待到明年四月份，一起过来的同事很积极的报了名。虽然我很喜欢待着这个地方，但是还是想着早点回去为下一份工作做准备吧，今年马上又要过去了，不能继续安于现状、原地踏步，而是要努力的迈出新的一步。</p>
]]></content>
      <tags>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>七夕</title>
    <url>/2019/08/07/%E4%B8%83%E5%A4%95/</url>
    <content><![CDATA[<p>对于各种各样的“节日”，独来独往的我向来是不太关心的。一方面不太能理解现代人的新式思维，另一方面觉得跟自己毫不相关。从双十一、520、情人节再到女生节、七夕节，人们表达爱意的方式变得简单而直接。从工作以来，虽然依旧毫不关心，但是每逢此类节日，总是能早早的就能从同事们对于礼物的讨论中知道再过几天什么日子又要到了。</p>
<p>或许我的性格决定了我本就不适合和其他人一起生活，所以直到现在，也没有过感情经历；并且在能看见的将来，也没有抱有任何的希望。</p>
<p>这么多年，终于遇到一个动心的人，结果也是有缘无分，落花有意流水无情。虽然喜欢的女生最终陪在了别人的身旁让我万念俱灰，但是事后细细想来，或许这才是最好的结果呢？跟我在一起她能得到幸福吗？显然，至少我的答案不是肯定的。如果在我身边得不到快乐，那她现在的选择不正好就是我的选择吗，那我还有什么可耿耿于怀的呢？</p>
<p>失去一个喜欢的人，原来是一件如此痛心的事。我懂得了为什么有这么多人为了爱情要死要活，不能和喜欢的人在一起，那活着也确实不会有什么乐趣，况且生活本来就很苦了。</p>
<p>可惜人终究不能控制自己的爱恨喜恶，所以每个人都会经历喜欢的人喜欢着别人这种无能为力的事情。罢了，学着去原谅吧，相识一场，好聚好散。</p>
<p>时间短暂，街头小巷、音容笑貌，终究是留下了些许的回忆，暂且当成最后的纪念。</p>
<p>很多年没遇到过这么沉重的打击了，每天早上醒来，仍然会不自觉的一阵心痛。不过打击越是沉重，才越能让人学会点什么。我曾不停的假如、不停的假如，假如早点把自己感情说出口，假如……即便假设一万次，也是于事无补了，过去的不会再重来。“不要等到失去了才懂得珍惜”这种世人皆知的陈词滥调，竟然也只有真的失去了才能懂得其中的道理。经历了这件事，我才切身体会到其中的含义，希望以后不会再犯同样的错误吧。</p>
<p>今天你和谁甜言蜜语？</p>
<p>今天你和谁亲密无间？</p>
<p>……</p>
<p>距离出差还剩下三天时间，离开你生活的城市，是否能更快的忘记你呢？我不得而知，我希望这次也能和在别的事情上一样健忘。</p>
<p>最近的情绪更加低落了，出差之后，又是一个完全陌生的环境，不知道会是什么样的心境，只希望，能早日抹去有你的回忆，走出你的背影。</p>
]]></content>
      <tags>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>电影-《月球》</title>
    <url>/2019/08/06/%E7%94%B5%E5%BD%B1-%E3%80%8A%E6%9C%88%E7%90%83%E3%80%8B/</url>
    <content><![CDATA[<p>不知道为什么，想在 MacOS 上恢复以前的 Hexo 博客，但是安装 Hexo 的时候总是报错，安装不成功。只能等出差之后有时间了再去想办法恢复了。Hexo 维护起来还是有点困难，尤其是在原博客的基础上加了各种插件之后，再加上国内的局域网环境，恢复起来更是费劲。</p>
<p>因为恢复 Hexo 博客暂时有困难，所以就先把博客放在 Blogger 上吧。</p>
<p>–刚才网上查了下，五分钟不到恢复了…</p>
<p>今天晚上回来，没什么事可做，就看了部电影打发时间。我一向喜欢看科幻片，但是比较知名的科幻片基本都看一遍了，类似于《火星救援》、《回到未来》之类的。</p>
<p>出于之前对月球各种现象的好奇，就从网上找了《月球》（迅雷下载地址：ed2k://|file|【电影家园<a href="http://www.idyjy.com下载】月球BD国英双语双字.mkv|2217685691|B8C4591F5409AD0D6BA1A6BE485FAAF4|h=FAAI4HCQIMWBHLOWJXRCQLJFXKKUIO6L|/）来看。其实看了前五六分钟才发现，以前看过，但是剧情已经全然忘记了，正好也不知道要看什么，就接着看下去了。" target="_blank" rel="noopener">www.idyjy.com下载】月球BD国英双语双字.mkv|2217685691|B8C4591F5409AD0D6BA1A6BE485FAAF4|h=FAAI4HCQIMWBHLOWJXRCQLJFXKKUIO6L|/）来看。其实看了前五六分钟才发现，以前看过，但是剧情已经全然忘记了，正好也不知道要看什么，就接着看下去了。</a></p>
<p>mkv 格式的视频直接用 VLC 和QuickTime 还不能直接播放，没有对应的解码器，安装了 IINA 就好了。</p>
<p>简单而有一波三折的剧情，固定的拍摄场景，还是很能吸引人。</p>
<p>月球旷工 Sam 与公司签订合同之后到了月球采矿，即将合同期满，返回地球与妻女团聚的时候，糟糕的精神状态让他遭遇了一起事故。事故之后从医护室醒来丧失了部分记忆，并设法离开基地前往事故地点，在事故月球车里发现了另一个自己，原来自己是从本体克隆而来。两个克隆 Sam 逐渐发现了基地中的所有秘密，两人设法赶在公司的“救援小组”到达之前利用氦传送器将干满三年的自己送回地球，但是身体状况急剧恶化的自己明白自己的生命即将终结，放弃了返回地球的机会，将机会让给了另一个健康的自己。合同期快满的 Sam 临死前通过卫星信号拨通了家里的电话，得知妻子已经去世，女儿已经 15 岁，内心无比痛苦。最终为了完成计划死在了出事故的月球车中，而新克隆的 Sam 则顺利的回到地球并将公司的恶行公布于世。</p>
<p>我喜欢这种简单不烧脑却又引人入胜的故事情节，而其中的关于人性、伦理、克隆技术以及人工智能的讨论更是给人以思考。</p>
<p>不过我印象更为深刻的是，Sam 在一个完全寂静、与世隔绝的环境中的生活状态。我自认为是一个孤独体质的人，从来不认为自己跟某个人或者某些人很亲近，并且对不认识的人更是保持着礼貌的距离。孤独，确实能改变一个人。三年的孤寂将 Sam 的正面性格全面摧毁，我甚至在想我现在的性格状态就是与世隔绝三年之后的 Sam 的生活状态吗？确实有很多相似的地方。但是他是幸福的，因为他知道虽然离家万里，但是在遥远的地球上有着深爱他的妻女，即便与世隔绝，生活始终还是有期待的，期待着回家、期待着与相爱的人团聚。而我呢？希望自己能早日走出这种状态吧。</p>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 mjpg-streamer 的树莓派视频监控</title>
    <url>/2019/08/05/%E5%9F%BA%E4%BA%8E-mjpg-streamer-%E7%9A%84%E6%A0%91%E8%8E%93%E6%B4%BE%E8%A7%86%E9%A2%91%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<h2 id="基于mjpg-streamer的视频监控"><a href="#基于mjpg-streamer的视频监控" class="headerlink" title="基于mjpg-streamer的视频监控"></a>基于<strong>mjpg-streamer</strong>的视频监控</h2><h3 id="视频监控搭建"><a href="#视频监控搭建" class="headerlink" title="视频监控搭建"></a>视频监控搭建</h3><p>本来想用 python 来做的，但是 VLC 串流不知道是不是设置的问题，视频采集是正常的，但是接收端接收到的视频一团糊，在无意间知道了 <strong>mjpg-streamer</strong> 这个项目，GitHub 地址：<a href="https://github.com/jacksonliam/mjpg-streamer。" target="_blank" rel="noopener">https://github.com/jacksonliam/mjpg-streamer。</a></p>
<p>安装方法参照GitHub：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install cmake libjpeg8-dev</span><br><span class="line"></span><br><span class="line">sudo apt-get install gcc g++</span><br><span class="line"></span><br><span class="line">cd mjpg-streamer-experimental</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<p>安装完之后就可以直接启动了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./mjpg_streamer -o "output_http.so -w ./www" -i "input_raspicam.so"</span><br></pre></td></tr></table></figure>

<p>默认使用8080端口，浏览器打开地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://192.168.0.103:8080/?action=stream</span><br></pre></td></tr></table></figure>

<p>就能实时查看树莓派摄像头采集到的视频。</p>
<h3 id="外网访问"><a href="#外网访问" class="headerlink" title="外网访问"></a>外网访问</h3><p>在局域网内，直接访问树莓派的 ip 地址就能查看视频，但是如果想从外网访问的话，还需要做点手脚。</p>
<p>使用 frp 反向隧道进行内网穿透。</p>
<p>先分别在vps 和树莓派上安装frp 服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.20.0/frp_0.20.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>

<p>解压上面下载的文件。</p>
<p>服务器端配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">进去目录</span><br><span class="line"></span><br><span class="line">vi  frps.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000         # frp与客户端绑定进行通信的端口</span><br><span class="line">auto_token = frp7</span><br><span class="line">vhost_http_port = 9000   # http 访问端口</span><br></pre></td></tr></table></figure>

<p>树莓派配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.进去目录</span><br><span class="line">2.vi frpc.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">server_addr = 云服务器的IP   # frps所在的服务器的 IP</span><br><span class="line">server_port = 7000                 # frp与服务器绑定进行通信的端口</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 192.168.0.103        # Pi所在局域网IP</span><br><span class="line">local_port = 22                       # 本地端口</span><br><span class="line">remote_port = 6000               # ssh远程访问端口</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_port = 8080                   # web 服务对应的端口——mjpg-streamer所需端口</span><br><span class="line">custom_domains = 云服务器IP   # frps所在的服务器的 IP</span><br></pre></td></tr></table></figure>

<p>依次启动服务器端的 frp，树莓派视频采集，树莓派端 frp。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br><span class="line"></span><br><span class="line">./mjpg_streamer -o "output_http.so -w ./www" -i "input_raspicam.so"</span><br><span class="line"></span><br><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure>

<p>然后打开浏览器访问：<a href="http://xxx.xxx.xxx.xxx:9000/stream.html" target="_blank" rel="noopener">http://xxx.xxx.xxx.xxx:9000/stream.html</a> ，不知道是不是因为 VPS 在国外的原因，延迟有3 s 这样子。。</p>
<p>注意：<strong>树莓派只能运行 arm 架构的 frp（<a href="http://diannaobos.iok.la:81/frp/frp-v0.20.0/frp_0.20.0_linux_arm.tar.gz" target="_blank" rel="noopener">树莓派frp</a>）</strong>。</p>
<hr>
<p>参考：</p>
<p><a href="https://blog.csdn.net/weixin_40535588/article/details/89296894" target="_blank" rel="noopener">基于树莓派+mjpg+frp+阿里云服务器的远程监控</a></p>
<p><a href="https://www.jianshu.com/p/069c61315e8a" target="_blank" rel="noopener">树莓派上MJPG-streamer安装手顺</a></p>
]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>工作一年的Java程序员应该会什么？</title>
    <url>/2019/06/13/%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%B9%B4%E7%9A%84Java%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E4%BC%9A%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<p>工作一年的Java程序员应该会什么？</p>
<p>从5月27日开始计算，今天是测试第14天，每天打开页面点点点，截图贴数据，你努力贴图证明自己没有伪造数据的样子真的很可怜，你因为该用红色框而你却所用了蓝色而被要求从头到尾改一遍，因为两张图不太连贯而被要求重新测一遍的样子真可怜。当然了，这里的“你”就是我，一个在对日外包公司工作的我，也是和我一起贴图的同事们。</p>
<p>昨天下午改了一下午，今天早上改了一上午。我已经忍无可忍，但是我努力告诉自己要冷静，事实是我也做到了冷静，心态平和的修改evidence和重新做evidence。</p>
<p>下午五点钟，旁边review的其他公司外派过来的同事让我把evidence的数据改一改。这是一个测试数据库里insert_user和update_user有没有如期更新的case，她让我将操作前数据的insert_user改成和操作后的数据一致，我就说了我的想法，前后一致的话就看不出来到底有没有被更新了，我稍微解释了一下，我没有和她辩论或者想说服她的意思，我只是阐述了我的想法，我就说了一句“请告诉我我该做什么？”，然后她好像生气了。我也没再多说，直接重新测试。</p>
<p>可能因为这两天review我的evidence有很多需要改的地方她也不太高兴，而我三个星期以来因为测试积压在心里的情绪也朝着大脑汹涌而来，我目不转睛地盯着那为了测试而调整分辨率后变得模糊不清的21寸廉价惠普瞎眼屏幕，手里拿着不知道因为多少人握过而变得光滑发亮的垃圾鼠标，我的大脑里只有两个字：离职。</p>
<p>一转眼，入职已经一年了。前两天，公司还在热火朝天搞评价，公司对你的评价，leader对你的评价，我真希望，以后能增加一个员工对公司的评价。我是达到了公司的预期，可是公司达到了我的预期吗？答案是令人遗憾的，其实在入职之前我就知道结果不会令人太满意，但是却没想到会这么不满意。</p>
<p>每隔一段时间我就会问自己：从入职到今天，我写了几行代码？答案让我感到难堪。也是这段经历，让我知道，不是所有做软件的人都是技术大牛，工作经验十年，照样有人不知道public、private的含义和用途；工作七年、仍然有人不知道Github是什么，不知道vpn是什么；入职两年，不知道怎么新建一个Java类。只能说大千世界，无奇不有。</p>
<p>我没记错的话，软件工程里说过测试的目的是尽可能多的找出程序缺陷，而不是验证程序的正确性。我能理解也愿意遵守为了更好的协作和保证产品质量而订下的条条框框，但是如果一个公司将过多的精力放在表面工作、过分执着于线条尺寸和颜色、截图大小和位置上，伪造数据以满足case预期，而不去关心程序本身性能和运行状况的话，不去思考如何提高员工技术能力的话，那它是不会有什么长远发展的。</p>
<p>逛了两天v2ex，大家每天都能在工作中提高自己的技术能力，增加新的见闻，而我，不过是日复一日的截图再截图，对当前的处境感到万分焦虑，每天再听听同事们不停的 瓦您古、饿拉、努鲁、佛玛托，心态更是崩溃。每天即使没事，也要为了团队和谐在工位上坐到九点半，真的该死。</p>
<p>因为工作中几乎没有需要写代码的地方，身边同事的技术能力也是不敢恭维，没有技术氛围，办公室话题永远是吃。</p>
<p>以前还想着在这个城市有以两个熟悉的人，可以待一段时间，目前看来，也没有什么值得留恋的了。还是尽快开始找工作，希望离开这个地方吧。</p>
<p>墙内还想丝毫没有香港游行的消息。想起Twitter上的一个问题：二十年来，是中国变得像香港了还是香港变得像中国了？真为圈养的中国人感到悲哀。如果有来生，千万别再投胎到中国了，做中国人真累。倒行逆施，开历史的倒车，终将被钉在历史的耻辱柱上。</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>给树莓派安装Ubuntu MATE系统</title>
    <url>/2019/06/11/%E7%BB%99%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Ubuntu-MATE%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>给树莓派安装Ubantu MATE操作系统</p>
<p>由于平时用的是Ubuntu系统，对这个系统比较熟悉，也想给树莓派也装这个系统，Linux下做SD卡启动盘网上资料比较少，担心发生对笔记本磁盘的误操作，最后在官网上找到了教程。</p>
<h3 id="下载系统"><a href="#下载系统" class="headerlink" title="下载系统"></a>下载系统</h3><p><a href="https://ubuntu-mate.org/raspberry-pi" target="_blank" rel="noopener"><a href="https://ubuntu-mate.org/raspberry-pi/" target="_blank" rel="noopener">Ubuntu MATE for the Raspberry Pi Model B 2, 3 and 3+</a></a></p>
<h3 id="安装工具并写入系统"><a href="#安装工具并写入系统" class="headerlink" title="安装工具并写入系统"></a>安装工具并写入系统</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gddrescue xz-utils</span><br><span class="line">unxz --verbose ubuntu-mate-18.04.2-beta1-desktop-armhf+raspi-ext4.img.xz</span><br><span class="line">sudo ddrescue -D --force ubuntu-mate-18.04.2-beta1-desktop-armhf+raspi-ext4.img /dev/sdx</span><br></pre></td></tr></table></figure>

<p><code>/dev/sda</code>代表笔记本的磁盘，SD卡的盘符一般<code>/dev/sdb1</code>。</p>
<p><img src="https://image.youyou-2608.com/blog/finished.png" alt="安装Ubuntu MATE"></p>
<h3 id="显示屏无反应"><a href="#显示屏无反应" class="headerlink" title="显示屏无反应"></a>显示屏无反应</h3><p>网上说可能是 config.txt 设置问题，和显示器的分辨率之类的有关，但是写入了镜像之后再将SD卡插入到PC，已经无法挂载，报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount /dev/sdb1 /mnt/sdb1</span><br><span class="line">mount: /mnt/sdb1: wrong fs type, bad option, bad superblock on /dev/sdb1, missing codepage or helper program, or other error.</span><br></pre></td></tr></table></figure>

<h3 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h3><p>进不去SD卡，挂载错误，说是文件类型错误。</p>
<p>安装工具：</p>
<p><code>sudo apt-get install nfs-common</code></p>
<p>仍然是无法读取。</p>
<p>先安装 <code>gnome-disk-utility</code> ，在终端执行 <code>./gnome-disk-utility</code> ，选择 <code>Restore Image...</code> ，写入镜像。</p>
<p><img src="https://image.youyou-2608.com/blog/finished.png" alt="Ubuntu MATE"></p>
<p>写完之后，退出SD卡。</p>
<p>将写入镜像的SD卡插入树莓派，连接显示器，接通电源，成功进入系统引导界面，清新的绿色界面。</p>
]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>再记Hexo博客恢复</title>
    <url>/2019/06/09/%E5%86%8D%E8%AE%B0Hexo%E5%8D%9A%E5%AE%A2%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<p>Hexo博客恢复</p>
<p>从官网下载 Nodejs <strong>二进制</strong> 文件（.tar.xz），解压到 /opt 目录下，添加连接：</p>
<p><code>sudo tar -xvf xxxx.tar.xz</code></p>
<p><code>sudo ln -s /opt/node-linux-x64xxxx/bin/node /usr/local/bin/node</code></p>
<p><code>sudo ln -s /opt/node..../bin/npm /usr/local/bin/npm</code></p>
<p>然后进入博客文件夹，执行</p>
<p><code>sudo npm install</code></p>
<p>即可完成恢复。</p>
<hr>
<p>折腾了半天一直各种报错，没想到这么简单。。</p>
]]></content>
      <categories>
        <category>Hexo博客维护</category>
      </categories>
      <tags>
        <tag>Hexo博客维护</tag>
      </tags>
  </entry>
  <entry>
    <title>酸酸乳搭建小记</title>
    <url>/2019/06/09/%E9%85%B8%E9%85%B8%E4%B9%B3%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>酸酸乳搭建过程小记</p>
<p>ss现在算是完全被识别了，去年11月在同事的推荐下用了 <a href="https://go.cloudss.org" target="_blank" rel="noopener">云影vpn</a> ，一个月3美元，15G流量，对于平时上上Twitter，stackoverflow来说，完全足够了，每月都能剩下一半多流量。但是想着自己一边花钱用着慢速网，自己的国外vps却闲着没事干，还是利用以下吧，节约资源。</p>
<h2 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h2><p>首先，下载脚本到 /usr/local/ssr ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo git clone https://github.com/ssrbackup/shadowsocksr /usr/local/ssr</span><br></pre></td></tr></table></figure>

<p>然后执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/local/ssr &amp;&amp; ./initcfg.sh</span><br></pre></td></tr></table></figure>

<p>会看到生成了一个配置文件 <code>user-config.json</code> ，你可以将它复制到 <code>/etc/ssr-config.json</code></p>
<p>修改配置文件 <code>sudo vi /etc/ssr-config.json</code></p>
<p>大致前面几项需要配置一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;server&quot;: &quot;******&quot;, // 代理服务地址</span><br><span class="line">&quot;server_ipv6&quot;: &quot;::&quot;,</span><br><span class="line">&quot;server_port&quot;: 11873, // 端口号</span><br><span class="line">&quot;local_address&quot;: &quot;127.0.0.1&quot;, //本地socks5监听地址 </span><br><span class="line">&quot;local_port&quot;: 1080,//本地socks5代理端口</span><br><span class="line"></span><br><span class="line">&quot;password&quot;: &quot;xxxxxx&quot;, //密码</span><br><span class="line">&quot;method&quot;: &quot;rc4-md5&quot;,//加密方式</span><br><span class="line">&quot;protocol&quot;: &quot;xxxxx&quot;,//协议</span><br><span class="line">&quot;protocol_param&quot;: &quot;xxxxxx&quot;,//协议参数</span><br><span class="line">&quot;obfs&quot;: &quot;xxxxxx&quot;,//混淆方式</span><br><span class="line">&quot;obfs_param&quot;: &quot;xxxxxxxx&quot;,//混淆参数</span><br></pre></td></tr></table></figure>

<p>执行命令启动客户端：</p>
<p> <code>sudo python shadowsocks/local.py -c /etc/ssr-config.json</code></p>
<p>启动成功后，按 <kbd>ctrl</kbd> + <kbd>z</kbd> 切换出来，再用 <code>jobs</code> 查看任务编号，使用 <code>bg %编号</code> 后台运行；</p>
<p>可以通过 <code>jobs</code> 看到后台任务，可以通过 <code>fg %编号</code> 切换进去。</p>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>执行下面的命令获取脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; sudo bash ssr.sh</span><br></pre></td></tr></table></figure>

<p>依照提示完成服务端各个参数的配置即可监听服务。</p>
<p>Enjoy it !</p>
<hr>
<p>之前搭建的ss才用了不到三天，连服务器ip都被和谐了，ssr用了一两个星期还健在，应该能支撑一段时间吧。</p>
]]></content>
      <categories>
        <category>推墙</category>
      </categories>
      <tags>
        <tag>推墙</tag>
      </tags>
  </entry>
  <entry>
    <title>05-26周记</title>
    <url>/2019/05/27/05-26%E5%91%A8%E8%AE%B0/</url>
    <content><![CDATA[<p>忙碌的一周</p>
<p>加班还在继续。尽管每天多上3个小时的班，但是一周仿佛还是一样的短，周一到周末也就是一眨眼间。</p>
<p>冬天里穿单衣，夏天里披外套。大概是因为公司的空调温度太低，周三周四有点感冒发烧的症状，上班的时候头疼而且眼睛也特别不舒服，好在早早的睡了两天之后又恢复了正常。意外的进了这个项目打断了原本才开始几天的锻炼计划，照现在情况看，大概是要到9月份去了，想想都还要远着呢，不知道哪天是个头。</p>
<p>似乎这两年什么事情都不顺利，总是事与愿违。在学校每天努力学习，成绩却徘徊在中等；最讨厌外包，最终却做了外包；最不想做测试，偏偏公司只有测试；想工资高点，却偏偏一个月3500。</p>
<p>明明每天不停地学习，从语言到框架，书买了一大堆。却最终还是和 <strong>public, protected, private</strong> 都没搞明白的five们拿着分毫不差的工资。我是一个想做第一也愿意付出努力的人，但是始终没有找到这其中的原因。总之，先做到年底，然后离开这个公司吧。</p>
<p>想着从明天开始又是连续三周的测试，真的很头疼，我宁愿写五天代码，也不想做一天测试。</p>
<p>上周周四一下收到三封离职邮件，都是工作了5年多的人。我也想过，如果自己在这里工作5年，5年后我会是什么样？不敢想象，估计在技术上和一个用心学过技术的应届生应该不会有太大的差别。据我的观察，公司真正懂点技术的人也就三五个，其他有点工作经验人的八成都是five。</p>
<p>又是忙碌的周末。周六学妹来我这里写了一下午一晚上的代码。有个人陪在身边确实是很好的感觉。而且她也是懂些东西的人，从她那里学到不少新的东西。</p>
<p>晚上一起出去吃了饭，回来写代码差不多到10点才送她回的学校，希望她7月份入职后能像她说的那样住得近一些。</p>
<p>帮她做了OpenOffice的转换，pdf文件转换，今天又忙了一天，还差弹窗显示这个功能了。看了腾讯微云是弹窗，还得仔细研究研究。</p>
<p>晚上还给一个大四的老乡解决了 项目名更改重新发布，更改数据库名 的问题，唉，总感觉她的思路很怪，页面打不开为什么不去找页面为什么打不开而是打开微信跟别人说页面打不开，遇到问题不会去思考解决问题的办法，明明数据库连接就这么几行代码，自己不去仔细读相关代码，而是打开微信提问，提问吧还不说起因经过和现场，就一句“页面打不开”…罢了罢了。</p>
<p>昨天晚上送学妹回学校以后在不经意间发现B站竟然买下了《轻音少女》的版权，而且第一季第二季和剧场版都买了，真的很开心，我突然想让陈睿他🐎复活了。但是还是要充会员才能看，充钱是不可能充钱的了，这辈子也不可能给Bilibili矿业充钱的。</p>
<p>累了，思维有点混乱了，玩玩手机睡觉吧。</p>
<hr>
<p>一个周末就过去了。</p>
<p>房间里又只剩下了键盘的响声。</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>我在JavaScript中踩过的坑</title>
    <url>/2019/05/19/%E6%88%91%E5%9C%A8JavaScript%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>我在Javascript中踩过的坑！</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>时至今日也没有系统深入的学习过JavaScript，虽然常用，但是也只停留在最基础的使用上。没有系统深入的了解，必然要踩一些前端众所周知，却让小白绞尽脑汁地大坑！</p>
<p>今天又在坑里摸了一天，记录一下，权当是写日记了。</p>
<p>最近连续加班，确实有些身心俱疲；加上昨天下午的“午后小睡”导致晚上失眠，到快四点钟才睡着，今天早上快十点钟还躺在床上。</p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>正在逛Twitter，做毕设地学妹给我提了两个需求：</p>
<ul>
<li>登陆页面的表单检验；</li>
<li>注册页面的重复用户名检测。</li>
</ul>
<h2 id="问题：从Ajax中返回值"><a href="#问题：从Ajax中返回值" class="headerlink" title="问题：从Ajax中返回值"></a>问题：从Ajax中返回值</h2><p>用JQuery.validate插件给登陆表单加了校验，挺简单，同样的方法给注册界面加个校验，唯一不同的是需要使用ajax从后台请求到用户名是否已经存在，也挺简单。</p>
<p>于是乎，有了下面这段代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// do something</span></span><br><span class="line">$.validator.addMethod(<span class="string">"checkUniqueUsername"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value, element, params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || checkUniqueUsername(value);</span><br><span class="line">&#125;, <span class="string">"用户名已被占用！"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkUniqueUsername</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (username !== <span class="literal">null</span> &amp;&amp; username !== <span class="literal">undefined</span> &amp;&amp; username !== <span class="string">''</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> data = &#123;<span class="string">'loginname'</span>: username&#125;;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">'post'</span>,</span><br><span class="line">            url: <span class="string">'/checkloginname'</span>,</span><br><span class="line">            data: <span class="built_in">JSON</span>.stringify(data),</span><br><span class="line">            dataType: <span class="string">'json'</span>,</span><br><span class="line">            contentType: <span class="string">'application/json'</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="built_in">parseInt</span>(res.tip) === <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三五分钟，就写完了代码，跑一跑测一下准备验收了。诡异的事情出现了，<code>checkUniqueUsername()</code>总是返回false。</p>
<h2 id="Ajax中return的结果"><a href="#Ajax中return的结果" class="headerlink" title="Ajax中return的结果"></a>Ajax中return的结果</h2><p>没事，静下心来慢慢调，就这几行代码，怎么说也要给你调得明明白白的。调试后发现<code>parseInt(res.tip)===0</code>是true，可是return 之后函数的返回值是false，这没道理啊！</p>
<p>网上查了一下，原来是在<strong>ajax中直接return并不是return到外层函数中</strong>，不深究，改个写法，于是有了v2版本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// do something</span></span><br><span class="line">$.validator.addMethod(<span class="string">"checkUniqueUsername"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value, element, params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || checkUniqueUsername(value);</span><br><span class="line">&#125;, <span class="string">"用户名已被占用！"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkUniqueUsername</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (username !== <span class="literal">null</span> &amp;&amp; username !== <span class="literal">undefined</span> &amp;&amp; username !== <span class="string">''</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> data = &#123;<span class="string">'loginname'</span>: username&#125;;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">'post'</span>,</span><br><span class="line">            url: <span class="string">'/checkloginname'</span>,</span><br><span class="line">            data: <span class="built_in">JSON</span>.stringify(data),</span><br><span class="line">            dataType: <span class="string">'json'</span>,</span><br><span class="line">            contentType: <span class="string">'application/json'</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                result = (<span class="built_in">parseInt</span>(res.tip) === <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>检查了一下，再也想不出还能有什么问题了，那就跑一下吧。诡异的结果又出现了，函数返回值依旧是false，心态崩了，这就好比 <code>var count = 1; console.log(count);</code>却输出了2一样，难以置信！</p>
<h2 id="Ajax同步和异步"><a href="#Ajax同步和异步" class="headerlink" title="Ajax同步和异步"></a>Ajax同步和异步</h2><p>查了半天，终于看到一个答案：<strong>ajax的同步和异步。</strong>可谓是一语惊醒梦中人，我责备自己为什么调试了这么久，却没有想到这个方向，而且同步异步的坑已经不是第一次踩了。v3版本终于解决了这个问题，失之毫厘，差之千里。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// do something</span></span><br><span class="line">$.validator.addMethod(<span class="string">"checkUniqueUsername"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value, element, params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || checkUniqueUsername(value);</span><br><span class="line">&#125;, <span class="string">"用户名已被占用！"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkUniqueUsername</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (username !== <span class="literal">null</span> &amp;&amp; username !== <span class="literal">undefined</span> &amp;&amp; username !== <span class="string">''</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> data = &#123;<span class="string">'loginname'</span>: username&#125;;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">'post'</span>,</span><br><span class="line">            url: <span class="string">'/checkloginname'</span>,</span><br><span class="line">            data: <span class="built_in">JSON</span>.stringify(data),</span><br><span class="line">            dataType: <span class="string">'json'</span>,</span><br><span class="line">            contentType: <span class="string">'application/json'</span>,</span><br><span class="line">            <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                result = (<span class="built_in">parseInt</span>(res.tip) === <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是每次运行控制台都会出现JQuery的提示：<strong>使用同步会降低用户体验</strong>，总归是有个解决办法，有时间再深究一下吧。</p>
<h2 id="JavaScript浮点运算"><a href="#JavaScript浮点运算" class="headerlink" title="JavaScript浮点运算"></a>JavaScript浮点运算</h2><p>今天的经历让我回想起了去年遇到的一个JavaScript的问题，当时在做一个现金流管理系统，遇到一个需求是根据固定利息和浮动利息自动计算出最终利息，随便输了几组数据测试，没有出现异样，但是最后一组数据的时候出现了诡异的结果！<code>4.1 + 4.3 = 8.399999999999999</code>，这真是见了鬼了。。很久之前学过的知识这分钟哪里回想得起来。上网查了才发现原来是JavaScript的设计缺陷导致的问题，也都提出了几种解决方案。</p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>平时用Java习惯了，思维方式有些不灵活，从对Python的理解中也能看出来。</p>
<p>总之，遇到问题，要发散思维，尽量快速的去确定调查的方向，最终尽快的解决问题。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java注解简单例子</title>
    <url>/2019/05/15/Java%E6%B3%A8%E8%A7%A3%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90/</url>
    <content><![CDATA[<p>了解Java注解（@Annotation）</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>为什么突然想起来注解呢？今天上午同事遇到一个和注解相关的问题，JSP页面传值到后台后（其实前后端并不分离），但是在POJO类上的校验注解值不满足的条件下也通过了，让我给帮忙看看。因为其他组的同事相同的通用代码并没有这个问题，而且对注解的处理是封装在框架中的，所以一开始便排除了问题在后台思路，转向页面传值去调查。虽然最后找到原因是因为没有清空Eclipse的.class文件重新编译，但是感觉已经对之前学过的注解部分的知识生疏了。刚好今天没加班，就赶紧复习一下。</p>
</blockquote>
<p>本想在网上找两篇文章回忆一下，但是好像例子写得都不完整。刚好前段时间刚买了一本《Java编程思想》，就赶紧翻开看了一下，一直记得书里给出的例子也是数据库字段注解相关的。</p>
<h2 id="相关概念及原理"><a href="#相关概念及原理" class="headerlink" title="相关概念及原理"></a>相关概念及原理</h2><p>参见 ==&gt; 《Java编程思想》第二十章&lt;注解&gt;。</p>
<p>四个元注解：</p>
<ul>
<li>@Target</li>
<li>@Retention</li>
<li>@Document</li>
<li>Inherited</li>
</ul>
<p>注解主要是用户按自己的需求来实现。</p>
<h2 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h2><p>先创建两个注解，@Digits和@NotEmpty，用来注解属性是否满足给定条件。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 标注一个字段只能为数字，且最大长度为maxLength，最大小数位为fraction</span></span><br><span class="line"><span class="comment"> * 默认没有小数位</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-05-14 21:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Digits &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxLength</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fraction</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 标注一个字段不能为空</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-05-14 21:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NotEmpty &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义一个处理类处理自定义注解：（主要利用反射机制）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 处理自定义注解</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-05-14 21:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationProcesser</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Table table)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, NoSuchFieldException </span>&#123;</span><br><span class="line">        Class clazz = table.getClass();</span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(<span class="string">"class not found!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        String fieldName;</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Annotation[] annotations = field.getDeclaredAnnotations();</span><br><span class="line">            fieldName = field.getName();</span><br><span class="line">            System.out.println(<span class="string">"--&gt; info: into "</span> + fieldName);</span><br><span class="line">            <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">                System.out.println(<span class="string">"--&gt; info: "</span> + annotation.annotationType());</span><br><span class="line">                <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> Digits) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"--&gt; info: get @Digits annotation on "</span> + fieldName);</span><br><span class="line">                    <span class="keyword">int</span> maxLength = ((Digits) annotation).maxLength();</span><br><span class="line">                    <span class="keyword">int</span> annotatedFraction = ((Digits) annotation).fraction();</span><br><span class="line">                    String[] fraction = String.valueOf(table.getCount()).split(<span class="string">"\\."</span>);</span><br><span class="line">                    <span class="keyword">if</span> (String.valueOf(table.getCount()).length() &gt; maxLength) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"--&gt; error: maxLength exceed!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (fraction.length &gt; <span class="number">1</span> &amp;&amp; fraction[<span class="number">1</span>].length() &gt; annotatedFraction) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"--&gt; error：fraction length exceed!"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"--&gt; info: "</span> + fieldName + <span class="string">" validate success!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> NotEmpty) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"--&gt; info: get @NotEmpty annotation on "</span> + fieldName);</span><br><span class="line">                    <span class="keyword">if</span> (table.getDescription() == <span class="keyword">null</span> || <span class="string">""</span>.equals(table.getDescription())) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"--&gt; error: empty is not allowed!"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"--&gt; info: "</span> + fieldName + <span class="string">" validate success!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主测试类：（<strong>省略getter和setter</strong>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Annotation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 自定义注解测试类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-05-14 21:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Table</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Digits</span>(maxLength = <span class="number">6</span>, fraction = <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Table</span><span class="params">(<span class="keyword">double</span> count, String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, ClassNotFoundException, NoSuchFieldException </span>&#123;</span><br><span class="line">        Table testTable1 = <span class="keyword">new</span> Table(<span class="number">1234567</span>, <span class="string">"description1"</span>);</span><br><span class="line">        Table testTable2 = <span class="keyword">new</span> Table(<span class="number">12.001</span>, <span class="string">"description2"</span>);</span><br><span class="line">        Table testTable3 = <span class="keyword">new</span> Table(<span class="number">123.01</span>, <span class="string">"description3"</span>);</span><br><span class="line">        Table testTable4 = <span class="keyword">new</span> Table(<span class="number">123.01</span>, <span class="keyword">null</span>);</span><br><span class="line">        Table testTable5 = <span class="keyword">new</span> Table(<span class="number">123.01</span>, <span class="string">"description5"</span>);</span><br><span class="line"></span><br><span class="line">        AnnotationProcesser processer = <span class="keyword">new</span> AnnotationProcesser();</span><br><span class="line">        processer.process(testTable1);</span><br><span class="line">        processer.process(testTable2);</span><br><span class="line">        processer.process(testTable3);</span><br><span class="line">        processer.process(testTable4);</span><br><span class="line">        processer.process(testTable5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>从两次毕设题目和要求说说我的感受</title>
    <url>/2019/05/12/%E4%BB%8E%E4%B8%A4%E6%AC%A1%E6%AF%95%E8%AE%BE%E9%A2%98%E7%9B%AE%E5%92%8C%E8%A6%81%E6%B1%82%E8%AF%B4%E8%AF%B4%E6%88%91%E7%9A%84%E6%84%9F%E5%8F%97/</url>
    <content><![CDATA[<p>从两次毕设的题目要求和代码经历说说我的感受</p>
<h2 id="近况"><a href="#近况" class="headerlink" title="近况"></a>近况</h2><p>这阵子很忙。</p>
<p>好久没有静下心来随便写点什么了。</p>
<p>这个想法在第一次毕设，也就是去年我做自己的毕设时还不是很强烈。今年3月底，应一个想赚点外快的同事的邀请，帮一个北京科技大学的大四学生做了一个毕业设计，到今天，差不多是两个月过去了，终于完成了所有的代码。</p>
<p>去年虽然也是三月底开始五月初完成，但是那时候对很多东西都不熟悉，基本是一步一个坑，今年好多了，轻车熟路，除了遇到几个之前没遇到过的坑之外，一切都还顺利，感触最深的应该还是碰上连续加班，每天十点钟才到家，随便写几行就十二点多，一段时间下来，感觉有点承受不住。</p>
<h2 id="代码体会"><a href="#代码体会" class="headerlink" title="代码体会"></a>代码体会</h2><p>另外一点就是虽说两个人在写代码，但实际上只有我一个人。一万多行的代码，同事只有3次提交，1300行代码，还全是pojo类和xml映射文件，更不用说遇到很多问题时都是我一个人在找解决办法。</p>
<p><img src="https://image.youyou-2608.com//hexo2019-05-12%2014-43-44%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="代码提交统计"></p>
<p>不论做什么事，能遇上有责任心的合作者真的是一件很值得庆幸的事情，且不说技术怎么样，光是态度好这一点就能给人很大的鼓舞。想起去年一起在实训基地做毕设室友，既要忙着做毕设，又要忙着做实习的项目，不懂的东西也很多，一个人每天焦头烂额，就算是在这种情况下，他的七八个队友竟然在实习项目答辩的前一天也没有人问问我能帮忙做点什么，进度怎么样，竟然还有一个班上的女生说了一句：这个项目答辩完了我要拿去当作我的毕设。我们两人当时只觉得震惊，只觉得真是大千世界，无奇不有。我一个旁人看了都觉得很过意不去，也无法理解他们是怎么做到心安理得的。说到这里，想起前两天晚上加班和同事一起打车回住处（出租屋），在车上他向司机暗示，西安的出租车可以随便打发票，他的朋友晚上从机场打车到住处，两个人本来只需要叫一个车，但是为了在报销的时候多报150块钱，所以两人分别打了一个车，司机表示他们也可以随便打任意时间任意地点的发票。我听了很是有感触，我只说出了我内心的想法：这样做不会觉得于心不安吗？这样的事情听说越多或是知道越多，可能我会更加频繁的反思自己的为人处世方式，但是再怎么反思，我想自己也绝不能做出类似的事情，正直，是一个人最基本的品德，这一点，应该永远坚持。</p>
<h2 id="脑残毕设题目和需求"><a href="#脑残毕设题目和需求" class="headerlink" title="脑残毕设题目和需求"></a>脑残毕设题目和需求</h2><p>说说毕设题目吧，“学生管理系统”，我想第一次在毕业设计中出现这个题目可以追溯到十年前，每年全国有多少个同样的毕设题目呢？这十来年下来，加上平时的大作业各种场合出现的题目，同题目的毕业论文大概都成千上万了。虽说这个题目很经典，但是我想出题老师还是有发散一下思维的余地，每年都搬出上年那连需求都没提几个字的毕设题目，扪心自问一下，对得起每个月工资卡里那些钱吗？还需要自己根据题目去编需求，真的不想说什么了。</p>
<h2 id="不要抱怨"><a href="#不要抱怨" class="headerlink" title="不要抱怨"></a>不要抱怨</h2><hr>
<p>继续写吗？<strong>可以写，但没必要。</strong></p>
<p><strong>学了四年软件工程，</strong></p>
<p><strong>不会写SQL怎么了？</strong></p>
<p><strong>不会连数据库怎么了？</strong></p>
<p><strong>不懂得编程规约怎么了？</strong></p>
<p><strong>发代码和文字用图片发怎么了？</strong></p>
<p><strong>张口就问不懂提问的艺术怎么了？</strong></p>
<p><strong>贴报错异常信息用手机拍控制台发送怎么了？</strong></p>
<p><strong>问题解决不说谢谢一声不响有新问题直接“在吗”怎么了？</strong></p>
<p>垃圾就垃圾呗，我能改变什么吗？不能。</p>
<p>既然不能改变，就请不要抱怨。</p>
<p>垃圾就垃圾吧，还是想想自己下个月房租怎么办比较实际。</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax返回error可能原因分析</title>
    <url>/2019/05/12/ajax%E8%BF%94%E5%9B%9Eerror%E5%8F%AF%E8%83%BD%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>ajax总是进入error的可能原因</p>
<p>后台返回：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">Successfully completed request</span><br></pre></td></tr></table></figure>

<p>前端ajax总是执行error部分的代码。</p>
<p>原因：</p>
<p>后台只返回了 “success” 字符串，不是规范的json格式，所以没有执行预期逻辑。</p>
<p>最好在后台返回 <strong>严格规范</strong> 的json防止此类错误。</p>
]]></content>
      <categories>
        <category>Exp</category>
      </categories>
      <tags>
        <tag>Exp</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot中使用Swagger2构建强大的RESTful API文档</title>
    <url>/2019/04/29/Spring-Boot%E4%B8%AD%E4%BD%BF%E7%94%A8Swagger2%E6%9E%84%E5%BB%BA%E5%BC%BA%E5%A4%A7%E7%9A%84RESTful-API%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<p>Spring Boot中使用Swagger2构建强大的RESTful API文档</p>
<p>由于Spring Boot能够快速开发、便捷部署等特性，相信有很大一部分Spring Boot的用户会用来构建RESTful API。而我们构建RESTful API的目的通常都是由于多终端的原因，这些终端会共用很多底层业务逻辑，因此我们会抽象出这样一层来同时服务于多个移动端或者Web前端。</p>
<p>这样一来，我们的RESTful API就有可能要面对多个开发人员或多个开发团队：IOS开发、Android开发或是Web开发等。为了减少与其他团队平时开发期间的频繁沟通成本，传统做法我们会创建一份RESTful API文档来记录所有接口细节，然而这样的做法有以下几个问题：</p>
<ul>
<li>由于接口众多，并且细节复杂（需要考虑不同的HTTP请求类型、HTTP头部信息、HTTP请求内容等），高质量地创建这份文档本身就是件非常吃力的事，下游的抱怨声不绝于耳。</li>
<li>随着时间推移，不断修改接口实现的时候都必须同步修改接口文档，而文档与代码又处于两个不同的媒介，除非有严格的管理机制，不然很容易导致不一致现象。</li>
</ul>
<p>为了解决上面这样的问题，本文将介绍RESTful API的重磅好伙伴Swagger2，它可以轻松的整合到Spring Boot中，并与Spring MVC程序配合组织出强大RESTful API文档。它既可以减少我们创建文档的工作量，同时说明内容又整合入实现代码中，让维护文档和修改代码整合为一体，可以让我们在修改代码逻辑的同时方便的修改文档说明。另外Swagger2也提供了强大的页面测试功能来调试每个RESTful API。具体效果如下图所示：</p>
<p><img src="http://blog.didispace.com/content/images/2016/04/swagger2_1.png" alt></p>
<p><img src="http://blog.didispace.com/content/images/2016/04/swagger2_1.png" alt></p>
<p>下面来具体介绍，如果在Spring Boot中使用Swagger2。首先，我们需要一个Spring Boot实现的RESTful API工程，若您没有做过这类内容，建议先阅读<br><a href="http://blog.didispace.com/springbootrestfulapi/" target="_blank" rel="noopener">Spring Boot构建一个较为复杂的RESTful APIs和单元测试</a>。</p>
<p>下面的内容我们会以<a href="http://git.oschina.net/didispace/SpringBoot-Learning" target="_blank" rel="noopener">教程样例</a>中的Chapter3-1-1进行下面的实验（Chpater3-1-5是我们的结果工程，亦可参考）。</p>
<h4 id="添加Swagger2依赖"><a href="#添加Swagger2依赖" class="headerlink" title="添加Swagger2依赖"></a>添加Swagger2依赖</h4><p>在<code>pom.xml</code>中加入Swagger2的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="创建Swagger2配置类"><a href="#创建Swagger2配置类" class="headerlink" title="创建Swagger2配置类"></a>创建Swagger2配置类</h4><p>在<code>Application.java</code>同级创建Swagger2的配置类<code>Swagger2</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.didispace.web"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"Spring Boot中使用Swagger2构建RESTful APIs"</span>)</span><br><span class="line">                .description(<span class="string">"更多Spring Boot相关文章请关注：http://blog.didispace.com/"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"http://blog.didispace.com/"</span>)</span><br><span class="line">                .contact(<span class="string">"程序猿DD"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上代码所示，通过<code>@Configuration</code>注解，让Spring来加载该类配置。再通过<code>@EnableSwagger2</code>注解来启用Swagger2。</p>
<p>再通过<code>createRestApi</code>函数创建<code>Docket</code>的Bean之后，<code>apiInfo()</code>用来创建该Api的基本信息（这些基本信息会展现在文档页面中）。<code>select()</code>函数返回一个<code>ApiSelectorBuilder</code>实例用来控制哪些接口暴露给Swagger来展现，本例采用指定扫描的包路径来定义，Swagger会扫描该包下所有Controller定义的API，并产生文档内容（除了被<code>@ApiIgnore</code>指定的请求）。</p>
<h4 id="添加文档内容"><a href="#添加文档内容" class="headerlink" title="添加文档内容"></a>添加文档内容</h4><p>在完成了上述配置后，其实已经可以生产文档内容，但是这样的文档主要针对请求本身，而描述主要来源于函数等命名产生，对用户并不友好，我们通常需要自己增加一些说明来丰富文档内容。如下所示，我们通过<code>@ApiOperation</code>注解来给API增加说明、通过<code>@ApiImplicitParams</code>、<code>@ApiImplicitParam</code>注解来给参数增加说明。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/users"</span>)     <span class="comment">// 通过这里配置使下面的映射都在/users下，可去除</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Map&lt;Long, User&gt; users = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;Long, User&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户列表"</span>, notes=<span class="string">""</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">""</span>&#125;, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; r = <span class="keyword">new</span> ArrayList&lt;User&gt;(users.values());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"创建用户"</span>, notes=<span class="string">"根据User对象创建用户"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">""</span>, method=RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        users.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户详细信息"</span>, notes=<span class="string">"根据url的id来获取用户详细信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"更新用户详细信息"</span>, notes=<span class="string">"根据url的id来指定更新对象，并根据传过来的user信息来更新用户详细信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">(@PathVariable Long id, @RequestBody User user)</span> </span>&#123;</span><br><span class="line">        User u = users.get(id);</span><br><span class="line">        u.setName(user.getName());</span><br><span class="line">        u.setAge(user.getAge());</span><br><span class="line">        users.put(id, u);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"删除用户"</span>, notes=<span class="string">"根据url的id来指定删除对象"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        users.remove(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完成上述代码添加上，启动Spring Boot程序，访问：<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a><br>。就能看到前文所展示的RESTful API的页面。我们可以再点开具体的API请求，以POST类型的/users请求为例，可找到上述代码中我们配置的Notes信息以及参数user的描述信息，如下图所示。</p>
<p>[<img src="http://blog.didispace.com/content/images/2016/04/swagger2_2.png" alt="alt"><img src="http://blog.didispace.com/content/images/2016/04/swagger2_2.png" alt></p>
<h4 id="API文档访问与调试"><a href="#API文档访问与调试" class="headerlink" title="API文档访问与调试"></a>API文档访问与调试</h4><p>在上图请求的页面中，我们看到user的Value是个输入框？是的，Swagger除了查看接口功能外，还提供了调试测试功能，我们可以点击上图中右侧的Model Schema（黄色区域：它指明了User的数据结构），此时Value中就有了user对象的模板，我们只需要稍适修改，点击下方<code>“Try it out！”</code>按钮，即可完成了一次请求调用！</p>
<p>此时，你也可以通过几个GET请求来验证之前的POST请求是否正确。</p>
<p>相比为这些接口编写文档的工作，我们增加的配置内容是非常少而且精简的，对于原有代码的侵入也在忍受范围之内。因此，在构建RESTful API的同时，加入swagger来对API文档进行管理，是个不错的选择。</p>
<h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p>本文的相关例子可以查看下面仓库中的<code>chapter3-1-5</code>目录：</p>
<ul>
<li>Github：<a href="https://github.com/dyc87112/SpringBoot-Learning/tree/1.x" target="_blank" rel="noopener">https://github.com/dyc87112/SpringBoot-Learning</a></li>
<li>Gitee：<a href="https://gitee.com/didispace/SpringBoot-Learning/tree/1.x" target="_blank" rel="noopener">https://gitee.com/didispace/SpringBoot-Learning</a></li>
</ul>
<p><strong>如果您觉得本文不错，欢迎Star支持，您的关注是我坚持的动力！</strong></p>
<h4 id="参考信息"><a href="#参考信息" class="headerlink" title="参考信息"></a>参考信息</h4><ul>
<li><a href="http://swagger.io/" target="_blank" rel="noopener">Swagger官方网站</a></li>
</ul>
<p>无作者本人授权请勿转载。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次Tomcat 8005端口Cannot assign requested address的经历</title>
    <url>/2019/04/24/%E8%AE%B0%E4%B8%80%E6%AC%A1Tomcat-8005%E7%AB%AF%E5%8F%A3Cannot-assign-requested-address%E7%9A%84%E7%BB%8F%E5%8E%86/</url>
    <content><![CDATA[<p>记一次Tomcat 8005端口Cannot assign requested address : Jvm Bind的经历</p>
<p>一个正在做毕设的老乡遇到的问题：Tomcat启动的时候，报了[8005] Jvm Bind相关的异常，大概内容是端口已被占用的意思。</p>
<p>一. 先从运行/bin/shutdown.bat，再次关闭Tomcat，重新启动问题依然存在；</p>
<p>二. netstat -ano查看端口使用情况，未发现8080,8009,8005相关的端口被占用；</p>
<p>三. 打开任务管理器，确认javaw.exe未在运行，问题依然存在；</p>
<p>四. 重启机器，问题依然存在；</p>
<p>五. 参照：[<a href="https://www.cnblogs.com/heshan664754022/p/3807672.html" target="_blank" rel="noopener">Tomcat启动报错:严重: StandardServer.await: create[8005] java.net.BindException: Cannot assign requested address</a>](<a href="https://www.cnblogs.com/heshan664754022/p/3807672.html" target="_blank" rel="noopener">https://www.cnblogs.com/heshan664754022/p/3807672.html</a>) ， ping了localhost，发现收到的响应来自ipp[47.89.54.215]，打开C:/windows/system32/drivers/etc/hosts，发现以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">47.89.54.215       localhost</span><br><span class="line">47.89.54.215	hao.360.cn</span><br><span class="line">47.89.54.215	www.hao123.com</span><br><span class="line">47.89.54.215	www.3600.com</span><br><span class="line">47.89.54.215	www.114la.com</span><br><span class="line">47.89.54.215	www.duba.com</span><br><span class="line">47.89.54.215	www.hao360.cn</span><br><span class="line">47.89.54.215	123.sogou.com</span><br><span class="line">47.89.54.215	web.sogou.com</span><br><span class="line">47.89.54.215	www.hao123.cn</span><br><span class="line">47.89.54.215	hao.qq.com</span><br><span class="line">47.89.54.215	www.1616.net</span><br><span class="line">47.89.54.215	hao.rising.cn</span><br><span class="line">47.89.54.215	daohang.qq.com</span><br></pre></td></tr></table></figure>

<p>看到daohang.qq，hao123，duba，hao360，123.sougou之类的字眼，瞬间一阵悲痛袭来，曾经那个“为什么国内流氓软件那么多？”的问题又浮现在脑海，想起了百度所谓的“中国用户愿意用隐私换效率”。</p>
<p><img src="https://image.youyou-2608.com//hexo%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190424144325.jpg" alt="隐私换效率，生活更便利-变态辣椒"></p>
]]></content>
      <categories>
        <category>Exp</category>
      </categories>
      <tags>
        <tag>Exp</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA Terminal闪退</title>
    <url>/2019/04/09/IDEA-Terminal%E9%97%AA%E9%80%80/</url>
    <content><![CDATA[<p>IDEA Terminal闪退</p>
<ol>
<li>查看help &gt; Show Log in File，查看日志；</li>
</ol>
<ol>
<li>查看File &gt; Settings &gt; Terminal &gt; shell path，=&gt; /bin/bash，重启终端。</li>
</ol>
<p> <a href="https://youtrack.jetbrains.com/issue/IDEA-202821" target="_blank" rel="noopener">Black Terminal or Terminal doesnot work</a> </p>
]]></content>
      <categories>
        <category>Exp</category>
      </categories>
      <tags>
        <tag>Exp</tag>
      </tags>
  </entry>
  <entry>
    <title>Git配置代理</title>
    <url>/2019/04/06/Git%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>git的代理配置</p>
<p>给sublime安装插件的时候又碰到git clone速度过慢的问题，记录一哈！</p>
<ol>
<li><p>打开ss全局代理；</p>
</li>
<li><p>到 <a href="https://www.ipaddress.com/" target="_blank" rel="noopener">IPAddress.com</a> 根据 github.global.ssl.fastly.net 获取github服务器地址；</p>
</li>
<li><p>在 /etc/hosts 或者C:/windows/system32/driver/etc/hosts 文件中添加对应的记录：</p>
<p>ip github.global.ssl.fastly.net</p>
</li>
<li><p>设置git代理：</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> http和https协议代理：</span><br><span class="line">git config --global http.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> sock5的情况</span><br><span class="line">git config --global http.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 取消代理</span><br><span class="line">git config --global unset http.proxy</span><br><span class="line">git config --global unset https.proxy</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> ssh协议代理：在用户目录下建立如下文件 ~/.ssh/config，对 GitHub 的域名做单独的处理</span><br><span class="line"><span class="meta">#</span> 这里必须是 github.com，因为这个跟我们 clone 代码时的链接有关</span><br><span class="line">Host github.com</span><br><span class="line"><span class="meta">   #</span> 如果用默认端口，这里是 github.com，如果想用443端口，这里就是 ssh.github.com 详见 https://help.github.com/articles/using-ssh-over-the-https-port/</span><br><span class="line">   HostName github.com</span><br><span class="line">   User git</span><br><span class="line"><span class="meta">   #</span> 如果是 HTTP 代理，把下面这行取消注释，并把 proxyport 改成自己的 http 代理的端口</span><br><span class="line">     ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=6667</span><br><span class="line"><span class="meta">   #</span> 如果是 socks5 代理，则把下面这行取消注释，并把 6666 改成自己 socks5 代理的端口</span><br><span class="line">     ProxyCommand nc -v -x 127.0.0.1:6666 %h %p</span><br></pre></td></tr></table></figure>



<p>==&gt;&gt; <a href="https://imciel.com/2016/06/28/git-proxy/" target="_blank" rel="noopener">设置 git 代理</a> </p>
<p>在Ubantu下需要在网络设置里打开网络代理设置代理主机：socks5://127.0.0.1:1080</p>
]]></content>
      <categories>
        <category>Exp</category>
      </categories>
      <tags>
        <tag>Exp</tag>
      </tags>
  </entry>
  <entry>
    <title>清明</title>
    <url>/2019/04/06/%E6%B8%85%E6%98%8E/</url>
    <content><![CDATA[<p>​     清明</p>
<p>​       今天清明节。</p>
<p>​       路边盛开的迎春，宣示着北国漫长的冬季就要在这里画上句号。</p>
<p>​       本想早早的起床，一个人出去走一走。但是昨天因为上班没收到显示器，今天想等着快递送来。才七点钟便醒来，然后起床看书。不大一会儿快递就送到了，一同送来的还有昨天晚上买的书。迫不及待地拆了快递，给笔记本连上了，还是大屏幕看着比较舒服，虽然屏幕质量不是很好。</p>
<p>​       看着时间两点钟准时出门，在软件园吃了个午饭，随后去了滨海路。</p>
<p>​       在车上感觉有点热，怀疑自己穿得太多，可是下了车，又感觉有点冷，不过周围的人貌似穿得都比我少。不知道春天是不是就是这样冷暖不定。春天的风已经没有了寒意，反而带着淡淡的花香。</p>
<p><img src="https://image.youyou-2608.com//hexoDSC00208.JPG" alt="盛开的桃花"></p>
<p>​       到达步道起点大概是下午三点钟光景了。我走在路的内侧，路的外侧尽是迎面往回的人流，还好周围有三五个同方向的人才让我显得奇怪。行人大多三五成群，也有很多情侣同行，独行的大多是慢跑或者骑车。我一路上走走拍拍，山、海、花、草，还特意停下来拍了一只不知道是哪个小孩落下的鞋子。在步道两旁的针叶林中有一些野桃树或是不知到品种的矮小的樱花，现在正是盛开，一些不知名的灌木上也冒出了嫩绿的新芽；少有的几株粗矮的杏树树梢也顶着鼓鼓的花蕾；路旁的垂柳也长出了嫩黄的叶子，有风吹过，纸条也轻柔的摆动着。</p>
<p><img src="https://image.youyou-2608.com//hexoDSC00212.JPG" alt="世纪恋人"></p>
<p><img src="https://image.youyou-2608.com//hexoDSC00158.JPG" alt="星海湾跨海大桥莲花上隧道一侧"></p>
<p><img src="https://image.youyou-2608.com//hexoDSC00204.JPG" alt="北大桥的路灯"></p>
<p>​       听歌大概是最省电的了，不过后半段路程我还是加快了速度，担心在天黑之前走不完的话，那就是另一个故事了。说是加快速度，其实也就是停下来拍照的次数少了。一路上经过了莲花山、付家庄、燕窝岭、北大桥、老虎滩，把大二时候徒步大会30公里的回忆中的1/2又串联了起来。现在回想起来，那时候真是厉害，完了午饭时间刚过就走完了30KM。</p>
<p><img src="https://image.youyou-2608.com//hexoDSC00157.JPG" alt="身着情侣装的年轻人"></p>
<p><img src="https://image.youyou-2608.com//hexoDSC00181.JPG" alt="滨海路中段3300M附近"></p>
<p>​       太阳刚落山，便到达了老虎滩海洋公园，手机也还剩下20%的电，相机也还剩一格电。坐了4路公交到了民政街，看着窗外的风景很是熟悉，一个十字路口，上方是横过的天桥，笔直的人行道旁是开阔地。仔细回想才记起来这是市图书馆附近，上次就是坐的901路到的这里，然后走过一段坡道去的图书馆，不同的是今天我是一个人，或者说那次是和她一起。</p>
<p>​       到了住的地方，一路上听的两首轻音乐：《遠き呼び声の彼方へ》和《LOVE Theme from TIGA》已经循环了71次和41次。最近喜欢听悲伤的轻音乐。</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>3月22日日记</title>
    <url>/2019/03/23/3%E6%9C%8822%E6%97%A5%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<p>3月22日日记</p>
<p>四连休，想抽个时间出去走走。本来打算昨天去的，但是打开电脑，看了两集MySQL视频之后，就不怎么想动了。无论昨天晚上多么下多大的决心，睡一觉一切都会烟消云散，去年大概也有过类似的体会。</p>
<p><img src="https://image.youyou-2608.com//blog20190322231238.png" alt="ins_image"></p>
<p>我决心好好改改自己的拖延症。本来打算早上出门，然后拖到中午，然后拖到吃完中午饭，终于觉得不能再这么拖下去了，才在两点钟收拾一下出了门。</p>
<p>第一站，先去地铁站充个公交卡吧，貌似公交卡四周前就没钱了，存钱罐里的硬币已经捞出了一个大坑，真可怕。地铁站竟然默认使用网络支付，本来我还想把过年时老爸给我的几百块钱赶紧花了，没有能用到纸币的地方，总担心捞东西给弄丢了。</p>
<p>去了锦辉商场，没做停留，买了一张《波希米亚狂想曲》的电影票。印象里，上一次去影院已经是17年的事情了吧，时间过得真快，不对，去年十一月底还请假去和平广场看了漫威的电影来着。</p>
<p>总之吧，随便买的电影票，不是我喜欢的类型，乐队也好，音乐也好，情节也好，主题也好，没有一个符合我的审美。一个半小时仿佛过了半天，耳朵都快聋了，七八十年代的摇滚就是这样的吗，我不太了解音乐。我喜欢安静，喜欢顺其自然，大概只有纪录片才合得着我的口味。不知道圈子里是怎么评价的，权当是打发时间了吧。</p>
<p><img src="https://image.youyou-2608.com//blogIMG_5469.JPG" alt="film"></p>
<p>年初买的三本书都看完了，想着去万达能逛逛书店，但是没找着书店。还是在晚上回来的公交车上，我旁边的一个女生，手里提着一个袋子，里面装着七本书和一束花，在动荡的车厢里显得有些别致，那鼓着大大的花苞的百合，盛开的时候一定很漂亮。我很想记录下这一刻的所见，但是做不到。</p>
<p><img src="https://image.youyou-2608.com//blogIMG_5459%2820190322-120105%29.jpg" alt="古都"></p>
<p>《古都》结束得有些突然，我往后翻页，想知道苗子离开之后，千重子是嫁给龙助还是真一呢，千重子还会到衫村去看望苗子吗，苗子离开之后是不是就不再和千重子来往了呢？我总爱将自己放在苗子的位置，大概是因为我在苗子的身上看到了某些相同的地方。虽然是亲生姐妹，但是千重子生活的很好，她的父母很爱她。假如当年被领养的是苗子的话，大概就是苗子和千重子两人对换，还是相同的故事情节，不过换成了千重子不愿意去妨碍苗子的幸福了吧。我很能理解苗子的想法，真心的希望千重子幸福，并且不去妨碍她的幸福，所以她拒绝了千重子一家的邀请，只和千重子度过了一晚。</p>
<p>秀男错将苗子认成了千重子，然后千重子让秀男给她织了腰带，在给苗子送腰带有过一次独处的机会之后，秀男便觉得自己爱上了苗子。我很佩服苗子的直觉，能从一开始就知道秀男不过是将苗子当成了千重子的幻影，所以在和千重子的谈话中，苗子总爱说一个“幻”字。我想，在和千重子——自己的亲生姐妹度过幸福的一晚之后，苗子大概会像她之前所提到的那样，找一个地方隐姓埋名，不再和千重子往来。临别的一番话，很触动人。“这可能就是我一生的幸福了”。和真一一样，在苗子眼中，千重子是幸福的，她的心里或许有些自卑，她居住的破旧的茅草屋是给不了千重子任何幸福的。但是和千重子共度的一晚，会成为她一生的幸福。</p>
<p>大概千重子会嫁给真一，因为千重子喜欢真一，真一也喜欢千重子，苗子大概会从此隐姓埋名，而龙助大概会离开千重子家的店铺，和其他的人结婚。</p>
<p>千重子的人生可能就是苗子的另一种人生。</p>
<p>正如苗子所说的那样：幸福总是短暂的，只有寂寞才是永恒的。</p>
<blockquote>
<p>​      苗子把嘴凑到千重子耳边，悄悄地说:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;   “千重子小姐的床铺已经暖和了，我到旁边的铺位去。”</span><br><span class="line">&gt; </span><br><span class="line">&gt;   母亲把隔扇拉开一条小缝， 窥视两个姑娘的卧室，那是在这以后的事了。</span><br><span class="line">&gt; </span><br><span class="line">&gt;   翌日早晨，苗子早就起床，把千重子摇醒:“小姐，这可能就是我一生的幸福了。趁着没人瞧见，我该回去了。”</span><br><span class="line">&gt; </span><br><span class="line">&gt;   正像昨晚苗子所说的那样，真正的小雪在半夜里下下停停，现在还在霏霏地下着。这是一个寒冷的早晨。</span><br><span class="line">&gt; </span><br><span class="line">&gt;   千重子坐了起来。“苗子，你没带雨具吧?请你等一等。”千重子说着，把自己最好的天鹅绒大衣、折叠伞和高齿木屐都给了苗子。</span><br><span class="line">&gt; </span><br><span class="line">&gt;   “这是我送给你的。希望你再来啊。”</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>​      苗子摇摇头。千重子抓住红格子门，目送苗子远去。苗子始终没有回头。在千重子的前发上飘落了少许细雪，很快就消融了。整个市街也还在沉睡着。</p>
</blockquote>
<p>貌似在我和舍友提了搬出去的事情之后，他女朋友就很少过来了，虽说对于我来说，这正是我所希望的，但是这样一来，仿佛我成了他们之间的障碍。给别人添麻烦这种事，向来是付出多大代价都要极力避免的。尽管我觉得周围的人都不在乎给别人添麻烦。</p>
<p>之前同学说要跟我合租，所以我最近看的房子都是两室一厅的。昨天早上才偶然从另一个同学口中得知，原来她已经找好室友了。我又婉言拒绝了他合租的请求，大概要一个人住这一年了。不过倒也能接受，不需要迁就其他人，与人相处上能省些心思。</p>
<p>近来似乎有些患得患失，不要喜欢上别人才好，我讨厌这种感觉。</p>
<p><img src="https://image.youyou-2608.com//blogIMG_5466.JPG" alt="no desc"></p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>在新机器中恢复Hexo博客</title>
    <url>/2019/03/03/%E5%9C%A8%E6%96%B0%E6%9C%BA%E5%99%A8%E4%B8%AD%E6%81%A2%E5%A4%8DHexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="在新机器上恢复Hexo博客"><a href="#在新机器上恢复Hexo博客" class="headerlink" title="在新机器上恢复Hexo博客"></a>在新机器上恢复Hexo博客</h2><h3 id="准备源文件"><a href="#准备源文件" class="headerlink" title="准备源文件"></a>准备源文件</h3><p>可以备份到github或者coding，或者使用云盘同步（例如坚果云）。</p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>#安装npm</span><br><span class="line">sudo apt install npm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>#安装hexo</span><br><span class="line">sudo apt install -g hexo-cli</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>#克隆源文件</span><br><span class="line">git clone user@github.com/repo/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>#在仓库中添加SSH key</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>#安装部署插件</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>#RSS订阅插件</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>#站点地图插件</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>#安装本地服务器</span><br><span class="line">npm install hexo-server --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>#生成index.html插件</span><br><span class="line"><span class="meta">$</span> npm install hexo-generator-archive --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>#搜索功能插件</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"><span class="meta">#</span>#预览</span><br><span class="line">hexo s</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<h3 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h3><p>遇到一个问题：生成后访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 出现白版和”Cannot GET /“，”/“是因为在public 目录下少了index.html文件，再次生成还是无效后，确认是少了组件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-index</span><br></pre></td></tr></table></figure>

<p>参见：<a href="https://www.jianshu.com/p/af83fc73e525" target="_blank" rel="noopener">【完美解决】Hexo博客出现“Cannot GET/xxx”错误</a></p>
<p>吐槽一下coding和腾讯云之间的账号互通问题，一阵瞎引导，竟然创建了一个新账号，以前的项目找不回来，两个网站之间来回绕了几遍，无意间又用邮箱登录上去了，之前都是能自动跳转登录的，现在还和CSDN一样开始恰烂钱，强制绑定微信和手机号，无语。</p>
]]></content>
      <categories>
        <category>Hexo博客维护</category>
      </categories>
      <tags>
        <tag>Hexo博客维护</tag>
      </tags>
  </entry>
  <entry>
    <title>Java编程思想——第十四章——类型信息</title>
    <url>/2019/02/01/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E2%80%94%E2%80%94%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h1 id="第十四章-类型信息"><a href="#第十四章-类型信息" class="headerlink" title="第十四章 类型信息"></a>第十四章 类型信息</h1><p>标签（空格分隔）： Java编程思想</p>
<hr>
<blockquote>
<p>运行时类型信息可以使得你可以在程序运行时发现和使用类型信息。</p>
</blockquote>
<p>本章主要讨论Java如何让我们在运行时识别对象和类的信息，主要有两种方式：</p>
<ol>
<li>“传统的RTTI”，假定我们在编译时已经知道了所有的类型；</li>
<li>“反射机制”，允许在运行时发现和使用类的信息。</li>
</ol>
<h2 id="14-1-为什么需要RTTI-Run-Time-Type-Identification"><a href="#14-1-为什么需要RTTI-Run-Time-Type-Identification" class="headerlink" title="14.1 为什么需要RTTI(Run-Time Type Identification)"></a>14.1 为什么需要RTTI(Run-Time Type Identification)</h2><p>RTTI提供类型维护的信息，为多态机制提供实现基础。多态的实现主要是通过向上转型，通过泛化父类来引用子类对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-06 14:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shapes</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Shape&gt; shapeList = Arrays.asList(<span class="keyword">new</span> Circle(), <span class="keyword">new</span> Square(), <span class="keyword">new</span> Triangle());</span><br><span class="line">        shapeList.forEach(Shape::draw);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span> + <span class="string">".draw."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Circle"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Triangle"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Square"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Circle.draw.</span><br><span class="line">Square.draw.</span><br><span class="line">Triangle.draw.</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="14-2-Class对象"><a href="#14-2-Class对象" class="headerlink" title="14.2 Class对象"></a>14.2 Class对象</h2><p>RTTI的功能主要是由Class类实现的，每个类都是Class类的一个对象。所有的类都是在第一次使用时被”类加载器”动态的加载到JVM中的，当程序创建第一个类的成员引用时，便会加载这个类，这说明构造器是类的静态方法。使用new创建的类的新对象也会被当作类的静态成员，因此Java是动态加载的。首先检查类的Class对象是否加载，如果尚未加载，默认的类的加载器会查找同名的.class文件,一旦某个类的Class对象被载入内存，便会用来创建这个类的所有对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-07 17:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SweetShop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"inside main."</span>);</span><br><span class="line">        <span class="keyword">new</span> Candy();</span><br><span class="line">        System.out.println(<span class="string">"after create candy"</span>);</span><br><span class="line">        <span class="keyword">new</span> Candy();</span><br><span class="line">        System.out.println(<span class="string">"after create candy2"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Class.forName(<span class="string">"com.typeinfo.Gum"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Class Gum not found."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"after create after gum."</span>);</span><br><span class="line">        <span class="keyword">new</span> Cookie();</span><br><span class="line">        System.out.println(<span class="string">"after create cookie"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Candy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Loading candy."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gum</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Loading gum."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cookie</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Loading cookie."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">inside main.</span><br><span class="line">Loading candy.</span><br><span class="line">after create candy</span><br><span class="line">after create candy2</span><br><span class="line">Loading gum.</span><br><span class="line">after create after gum.</span><br><span class="line">Loading cookie.</span><br><span class="line">after create cookie</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>从输出中可以看出，Java中的类都是在需要时才被加载的。forName()是Class类的一个静态成员，调用该方法可以返回相应类的实例。<br>无论何时，若要使用类型信息，必须持有Class对象的引用，Class.forName()是实现此功能的便捷方式，因为不需要再为了获取Class引用而持有该类型的引用。如果已经拥有一个类型的对象，可以使用getClass()来获取Class引用，返回表示该对象的实际类型的Class引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-07 18:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(Class cc)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Class name: "</span> + cc.getName() + <span class="string">" is interface? ["</span> + cc.isInterface() + <span class="string">"]"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Simple name: "</span> + cc.getSimpleName());</span><br><span class="line">        System.out.println(<span class="string">"Canonical name: "</span> + cc.getCanonicalName());</span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class c = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = Class.forName(<span class="string">"com.typeinfo.FancyToy"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"class not found."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">assert</span> c != <span class="keyword">null</span>;</span><br><span class="line">        printInfo(c);</span><br><span class="line">        <span class="keyword">for</span> (Class face : c.getInterfaces()) &#123;</span><br><span class="line">            printInfo(face);</span><br><span class="line">        &#125;</span><br><span class="line">        Class up = c.getSuperclass();</span><br><span class="line">        Object object = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            object = up.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"获取实例失败."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"无法访问."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">assert</span> object != <span class="keyword">null</span>;</span><br><span class="line">        printInfo(object.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">HasBatteries</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">WaterProof</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shoots</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toy</span> </span>&#123;</span><br><span class="line">    Toy() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Toy(<span class="keyword">int</span> i) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FancyToy</span> <span class="keyword">extends</span> <span class="title">Toy</span> <span class="keyword">implements</span> <span class="title">HasBatteries</span>, <span class="title">WaterProof</span>, <span class="title">Shoots</span> </span>&#123;</span><br><span class="line">    FancyToy() &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class name: com.typeinfo.FancyToy is interface? [false]</span><br><span class="line">Simple name: FancyToy</span><br><span class="line">Canonical name: com.typeinfo.FancyToy</span><br><span class="line">---------------</span><br><span class="line">Class name: com.typeinfo.HasBatteries is interface? [true]</span><br><span class="line">Simple name: HasBatteries</span><br><span class="line">Canonical name: com.typeinfo.HasBatteries</span><br><span class="line">---------------</span><br><span class="line">Class name: com.typeinfo.WaterProof is interface? [true]</span><br><span class="line">Simple name: WaterProof</span><br><span class="line">Canonical name: com.typeinfo.WaterProof</span><br><span class="line">---------------</span><br><span class="line">Class name: com.typeinfo.Shoots is interface? [true]</span><br><span class="line">Simple name: Shoots</span><br><span class="line">Canonical name: com.typeinfo.Shoots</span><br><span class="line">---------------</span><br><span class="line">Class name: com.typeinfo.Toy is interface? [false]</span><br><span class="line">Simple name: Toy</span><br><span class="line">Canonical name: com.typeinfo.Toy</span><br><span class="line">---------------</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>在给forName()方法传递类名是必须使用全限定名。<br>Class类常用方法列表：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>getName()</td>
<td>获取全限定类名</td>
</tr>
<tr>
<td>getSimpleName()</td>
<td>获取不含包类名</td>
</tr>
<tr>
<td>getCanonicalName()</td>
<td>含包名的全限定名</td>
</tr>
<tr>
<td>getInterfaces()</td>
<td>Class对象所包含的接口</td>
</tr>
<tr>
<td>isInterface()</td>
<td>判断Class对象是否是接口</td>
</tr>
<tr>
<td>newInstance()</td>
<td>虚拟构造器(该类必须含有默认构造器)</td>
</tr>
<tr>
<td>getSuperClass()</td>
<td>间接获取Class对象基类</td>
</tr>
</tbody></table>
<h3 id="14-2-1-类字面常量"><a href="#14-2-1-类字面常量" class="headerlink" title="14.2.1 类字面常量"></a>14.2.1 类字面常量</h3><p>Java还提供了另一种方法来生成Class对象的引用，即使用类字面常量，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FancyToy<span class="class">.<span class="keyword">class</span></span>;</span><br></pre></td></tr></table></figure>

<p>这样做更加简单、安全，因为它在编译器就会受到检查，因此不需要异常检查，同时根除了对forNam()方法的调用，因此更加高效。<br>类字面常量方法不仅适用于普通的类，也适用于接口，基本数据类型，数组。对于基本包装类型的Class对象。还有一个标准字段TYPE，TYPE字段是一个引用，指向对应的基本类型Class对象。<br><strong>建议使用.class方法，与普通类保持一致</strong></p>
<table>
<thead>
<tr>
<th>字面常量</th>
<th>标准TYPE字段</th>
</tr>
</thead>
<tbody><tr>
<td>boolean.class</td>
<td>Boolean.class</td>
</tr>
<tr>
<td>char.class</td>
<td>Char.class</td>
</tr>
<tr>
<td>byte.class</td>
<td>Byte.class</td>
</tr>
<tr>
<td>short.class</td>
<td>Short.class</td>
</tr>
<tr>
<td>int.class</td>
<td>Integer.class</td>
</tr>
<tr>
<td>long.class</td>
<td>Long.class</td>
</tr>
<tr>
<td>float.class</td>
<td>Flocat.class</td>
</tr>
<tr>
<td>double.class</td>
<td>Double.class</td>
</tr>
<tr>
<td>void.class</td>
<td>Void.class</td>
</tr>
</tbody></table>
<p>当使用.class来创建Class对象引用时，不会自动初始化该Class对象，包含三个过程的准备：</p>
<ol>
<li><strong>加载</strong>：由类加载器执行，查找字节码，为字节码创建Class对象；</li>
<li><strong>链接</strong>：验证类中的字节码，为静态域分配空间，如果必须的话，将解析这个类创建的对其他类的所有引用；</li>
<li><strong>初始化</strong>：如果该类具有超类，则对其进行初始化，执行静态初始化和静态初始化块。初始化被延迟到对静态方法或者非静态数据域进行首次引用时执行。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-07 19:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassInitailization</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Class initable = Initable<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        System.out.println(<span class="string">"after create initable ref."</span>);</span><br><span class="line">        System.out.println(Initable.staticFinal);</span><br><span class="line">        System.out.println(Initable.staticFinal2);</span><br><span class="line">        System.out.println(Initable2.staticNonFinal);</span><br><span class="line">        Class initable3 = Class.forName(<span class="string">"com.typeinfo.Initable3"</span>);</span><br><span class="line">        System.out.println(<span class="string">"after create initable3."</span>);</span><br><span class="line">        System.out.println(Initable3.staticNonFinal);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Initable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> staticFinal = <span class="number">47</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> staticFinal2 = ClassInitailization.random.nextInt(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Initializing initable."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Initable2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> staticNonFinal = <span class="number">147</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"initializing initable2."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Initable3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> staticNonFinal = <span class="number">74</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"initializing initable3."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">after create initable ref.</span><br><span class="line"><span class="number">47</span></span><br><span class="line">Initializing initable.</span><br><span class="line"><span class="number">258</span></span><br><span class="line">initializing initable2.</span><br><span class="line"><span class="number">147</span></span><br><span class="line">initializing initable3.</span><br><span class="line">after create initable3.</span><br><span class="line"><span class="number">74</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>初始化有效的体现了”惰性”，从Initable的引用创建中知道<strong>使用.class创建Class引用不会引发初始化</strong>，但是为了产生引用，<strong>Class.forName()立即进行了初始化</strong>。<br><strong>如果一个static final值是编译期常量，那么这个值不需要对类进行初始化就可以进行读取。但是将一个域设置为static final不足以确保这种行为</strong>，如Initable.staticFinal2的访问强制类进行了初始化。<br>如果一个常量是static但不是final的，那么在对它进行访问时，总是要求在对它进行读取前，先进行链接(分配存储空间)和初始化(初始化该域磁盘)。</p>
<h3 id="14-2-2-泛化的Class引用"><a href="#14-2-2-泛化的Class引用" class="headerlink" title="14.2.2 泛化的Class引用"></a>14.2.2 泛化的Class引用</h3><p>Class引用所表示的就是它所指向的类的确切类型，可以制造类的实例，包含类的静态成员和方法代码。<br>在Java SE5中Class引用的类型变得更加具体，这是通过允许你Class引用所指向的Class对象引用类型进行限定实现的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-07 19:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClassReference</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class intClass = <span class="keyword">int</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Class&lt;Integer&gt; genericIntClass = <span class="keyword">int</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        genericIntClass = Integer<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        intClass = <span class="keyword">double</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        <span class="comment">//genericIntClass = double.class;  //编译错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>普通的类引用不会产生警告，尽管泛型类引用只能指向其声明的类型，但是普通的类引用可以被重新赋值为其他任何类型的引用，因此通过使用泛型，可以强制编译器进行类型检查。</strong></p>
<p>如果希望稍微放宽这种限制，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Number&gt; c = <span class="keyword">int</span><span class="class">.<span class="keyword">class</span></span>;</span><br></pre></td></tr></table></figure>

<p>上述代码产生了编译错误，因为Integer Class对象不是Number Class的子类。<br>为了能够在使用泛化的Class引用时放宽限制，可以使用泛型通配符。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-07 19:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WildcardClassReference</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class&lt;? extends Number&gt; c = <span class="keyword">int</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        c = <span class="keyword">double</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码没有产生任何警告信息。Class<?>优于普通的Class，并且两者等价。
**Class<?>的好处是它表示你并非碰巧或者处于疏忽而使用了一个非具体的类型。<strong>为了创建一个Class引用，它被限定为某种类型，和extends结合，可以创建一个范围。<br>**使用泛型可以促使编译器在编译器提供类型检查。</strong></p>
<p>将泛型用于Class对象，newInstance()方法返回的将是具体的类型而不是Object。但是这种具体类型有些许限制，由具体类型的Class引用getSuperClass()返回的类型是Object类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-07 20:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericToyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        Class&lt;FancyToy&gt; fancyToyClass = FancyToy<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        FancyToy fancyToy = fancyToyClass.newInstance();</span><br><span class="line">        Class&lt;? <span class="keyword">super</span> FancyToy&gt; c = fancyToyClass.getSuperclass();</span><br><span class="line"><span class="comment">//        Class&lt;Toy&gt; toyClass = fancyToyClass.getSuperclass();   编译错误</span></span><br><span class="line">        Object object = fancyToyClass.getSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="14-2-3-新的转型语法"><a href="#14-2-3-新的转型语法" class="headerlink" title="14.2.3 新的转型语法"></a>14.2.3 新的转型语法</h3><p>Java SE5还添加了用于Class引用转型的语法，即cast()方法。cast()方法接收参数对象，并将其转型为Class引用的类型。<br>在Java SE5中另一个最没用的新特性就是Class.asSubclass，该方法允许你将一个类对象转为更加具体的对象类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-07 20:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassCasts</span> </span>&#123;</span><br><span class="line">    Building building = <span class="keyword">new</span> House();</span><br><span class="line">    Class&lt;House&gt; houseClass = House<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    House house = houseClass.cast(building);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span> <span class="keyword">extends</span> <span class="title">Building</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="14-3-类型转换前先做检查"><a href="#14-3-类型转换前先做检查" class="headerlink" title="14.3 类型转换前先做检查"></a>14.3 类型转换前先做检查</h2><p>迄今为止，RTTI的形式包括：</p>
<ol>
<li>传统的类型转换；</li>
<li>代表对象的类型的Class对象；</li>
<li>关键字instanceof：判断一个对象是不是某个特定类型的实例。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(x instaceof Dog) &#123;</span><br><span class="line">    (Dog)x.bark();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>instanceof有比较严格的限制，只可将其与命名类型比较，而不能与Class对象比较。</p>
<h2 id="14-5-instanceof和Class的等价性"><a href="#14-5-instanceof和Class的等价性" class="headerlink" title="14.5 instanceof和Class的等价性"></a>14.5 instanceof和Class的等价性</h2><p>instanceof()和isInstance()方法生成的结果完全一样，equals和==也完全一样。但是<strong>instanceof保持了类型的概念，而==比较的是实际的Class对象，没有考虑继承。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-07 20:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FamilyVsExactType</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Testing object of type :"</span> + object.getClass());</span><br><span class="line">        System.out.println(<span class="string">"object instanceof Base: "</span> + (object <span class="keyword">instanceof</span> Base));</span><br><span class="line">        System.out.println(<span class="string">"object instanceof Derived :"</span> + (object <span class="keyword">instanceof</span> Derived));</span><br><span class="line">        System.out.println(<span class="string">"Base.isInstance(object): "</span> + Base<span class="class">.<span class="keyword">class</span>.<span class="title">isInstance</span>(<span class="title">object</span>))</span>;</span><br><span class="line">        System.out.println(<span class="string">"Derived.isInstance(object): "</span> + Derived<span class="class">.<span class="keyword">class</span>.<span class="title">isInstance</span>(<span class="title">object</span>))</span>;</span><br><span class="line">        System.out.println(<span class="string">"object.getClass() == Base.class(): "</span> + (object.getClass() == Base<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        System.out.println(<span class="string">"object.getClass() == Derived.class(): "</span> + (object.getClass() == Derived<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        System.out.println(<span class="string">"object.getClass().equals(Base.class()): "</span> + (object.getClass().equals(Base<span class="class">.<span class="keyword">class</span>)))</span>;</span><br><span class="line">        System.out.println(<span class="string">"object.getClass().equals(Derived.class()): "</span> + (object.getClass().equals(Derived<span class="class">.<span class="keyword">class</span>)))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test(<span class="keyword">new</span> Base());</span><br><span class="line">        test(<span class="keyword">new</span> Derived());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Testing object of type :<span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">typeinfo</span>.<span class="title">Base</span></span></span><br><span class="line">object instanceof Base: true</span><br><span class="line">object <span class="keyword">instanceof</span> Derived :<span class="keyword">false</span></span><br><span class="line">Base.isInstance(object): <span class="keyword">true</span></span><br><span class="line">Derived.isInstance(object): <span class="keyword">false</span></span><br><span class="line">object.getClass() == Base.class(): true</span><br><span class="line">object.getClass() == Derived.class(): false</span><br><span class="line">object.getClass().equals(Base.class()): true</span><br><span class="line">object.getClass().equals(Derived.class()): false</span><br><span class="line">Testing object of type :<span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">typeinfo</span>.<span class="title">Derived</span></span></span><br><span class="line">object instanceof Base: true</span><br><span class="line">object <span class="keyword">instanceof</span> Derived :<span class="keyword">true</span></span><br><span class="line">Base.isInstance(object): <span class="keyword">true</span></span><br><span class="line">Derived.isInstance(object): <span class="keyword">true</span></span><br><span class="line">object.getClass() == Base.class(): false</span><br><span class="line">object.getClass() == Derived.class(): true</span><br><span class="line">object.getClass().equals(Base.class()): false</span><br><span class="line">object.getClass().equals(Derived.class()): true</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="14-6-反射：运行时的类信息"><a href="#14-6-反射：运行时的类信息" class="headerlink" title="14.6 反射：运行时的类信息"></a>14.6 反射：运行时的类信息</h2><p>RTTI的限制：如果需要知道某个对象的确切类型，可以使用RTTI，但是有一个限制：这个类型在编译时必须是可知的。如果获取了持有一个不在程序空间内的对象的引用或者这个类在你的程序运行许久之后才出现，此时则无法使用RTTI。</p>
<p>为什么需要反射？</p>
<ol>
<li>解决RTTI的限制；</li>
<li>希望提供在跨网络的平台上创建和运行对象的能力，即<em>远程方法调用(RMI)</em>。</li>
</ol>
<p>Class类与Java.lang.Reflect类库对反射进行了支持，该类库包含Field、Method和Constructor等类。可以用invoke()调用与Method关联的方法，调用getField()、getMethods()和getConstructor()等方法返回表示字段、方法和构造方法的数组。</p>
<p><strong>RTTI与反射之间真正的区别在于对于RTTI来说，编译器在编译时打开和检查.class文件，而对于反射机制来说，.class文件在编译时是不可获取的，所以是在运行时打开和检查.class文件。</strong></p>
<h3 id="14-6-1-类方法提取器"><a href="#14-6-1-类方法提取器" class="headerlink" title="14.6.1 类方法提取器"></a>14.6.1 类方法提取器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-08 9:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowMethods</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String usage = <span class="string">"usage"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(usage);</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; c = Class.forName(args[<span class="number">0</span>]);</span><br><span class="line">            Method[] methods = c.getMethods();</span><br><span class="line">            Constructor[] constructors = c.getConstructors();</span><br><span class="line">            <span class="keyword">if</span> (args.length == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                    System.out.println(method.toString());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">                    System.out.println(constructor.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (method.toString().contains(args[<span class="number">1</span>])) &#123;</span><br><span class="line">                        System.out.println(method.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (constructor.toString().contains(args[<span class="number">1</span>])) &#123;</span><br><span class="line">                        System.out.println(constructor.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"No such class."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.equals(java.lang.Object)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.toString()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.hashCode()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.compareTo(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.compareTo(java.lang.Object)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.indexOf(java.lang.String,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.indexOf(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.indexOf(<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.indexOf(<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.valueOf(<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.valueOf(<span class="keyword">long</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.valueOf(<span class="keyword">float</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.valueOf(<span class="keyword">boolean</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.valueOf(<span class="keyword">char</span>[])</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.valueOf(<span class="keyword">char</span>[],<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.valueOf(java.lang.Object)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.valueOf(<span class="keyword">char</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.valueOf(<span class="keyword">double</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">char</span> java.lang.String.charAt(<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.codePointAt(<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.codePointBefore(<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.codePointCount(<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.compareToIgnoreCase(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.concat(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.contains(java.lang.CharSequence)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.contentEquals(java.lang.CharSequence)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.contentEquals(java.lang.StringBuffer)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.copyValueOf(<span class="keyword">char</span>[])</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.copyValueOf(<span class="keyword">char</span>[],<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.endsWith(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.equalsIgnoreCase(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.format(java.lang.String,java.lang.Object[])</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> java.lang.String.getBytes(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">byte</span>[],<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] java.lang.String.getBytes(java.nio.charset.Charset)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] java.lang.String.getBytes(java.lang.String) <span class="keyword">throws</span> java.io.UnsupportedEncodingException</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] java.lang.String.getBytes()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> java.lang.String.getChars(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">char</span>[],<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> java.lang.String java.lang.String.intern()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.isEmpty()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[])</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.Iterable)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.lastIndexOf(<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.lastIndexOf(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.lastIndexOf(java.lang.String,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.lastIndexOf(<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.length()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.matches(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.offsetByCodePoints(<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.regionMatches(<span class="keyword">int</span>,java.lang.String,<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.regionMatches(<span class="keyword">boolean</span>,<span class="keyword">int</span>,java.lang.String,<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.replace(<span class="keyword">char</span>,<span class="keyword">char</span>)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.replaceAll(java.lang.String,java.lang.String)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.replaceFirst(java.lang.String,java.lang.String)</span><br><span class="line"><span class="keyword">public</span> java.lang.String[] java.lang.String.split(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> java.lang.String[] java.lang.String.split(java.lang.String,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.startsWith(java.lang.String,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.startsWith(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> java.lang.CharSequence java.lang.String.subSequence(<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.substring(<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.substring(<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">char</span>[] java.lang.String.toCharArray()</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.toLowerCase(java.util.Locale)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.toLowerCase()</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.toUpperCase()</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.toUpperCase(java.util.Locale)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.trim()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> java.lang.Object.wait() <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> java.lang.Object.wait(<span class="keyword">long</span>,<span class="keyword">int</span>) <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.wait(<span class="keyword">long</span>) <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> java.lang.Class java.lang.Object.getClass()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.notify()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.notifyAll()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">default</span> java.util.stream.IntStream java.lang.CharSequence.chars()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">default</span> java.util.stream.IntStream java.lang.CharSequence.codePoints()</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[],<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[],java.nio.charset.Charset)</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[],java.lang.String) <span class="keyword">throws</span> java.io.UnsupportedEncodingException</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[],<span class="keyword">int</span>,<span class="keyword">int</span>,java.nio.charset.Charset)</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[],<span class="keyword">int</span>,<span class="keyword">int</span>,java.lang.String) <span class="keyword">throws</span> java.io.UnsupportedEncodingException</span><br><span class="line"><span class="keyword">public</span> java.lang.String(java.lang.StringBuilder)</span><br><span class="line"><span class="keyword">public</span> java.lang.String(java.lang.StringBuffer)</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[])</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">int</span>[],<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> java.lang.String()</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">char</span>[])</span><br><span class="line"><span class="keyword">public</span> java.lang.String(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">char</span>[],<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[],<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[],<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>参数为java.lang.String，在idea中设置运行参数：Edit Configurations&gt;Configuration&gt;Program arguments，需要填写某个类的全限定名。</p>
<h2 id="14-7-动态代理"><a href="#14-7-动态代理" class="headerlink" title="14.7 动态代理"></a>14.7 动态代理</h2><p>代理是基本的设计模式之一，是用来代替实际对象的对象，通常涉及与实际对象的通信，充当中间人的角色。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-08 10:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleProxyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">(Interface inter)</span> </span>&#123;</span><br><span class="line">        inter.doSomething();</span><br><span class="line">        inter.somethingElse(<span class="string">"banana"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        consumer(<span class="keyword">new</span> RealObject());</span><br><span class="line">        consumer(<span class="keyword">new</span> ProxyObject(<span class="keyword">new</span> RealObject()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String arg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealObject</span> <span class="keyword">implements</span> <span class="title">Interface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do something."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do something else :"</span> + arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyObject</span> <span class="keyword">implements</span> <span class="title">Interface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Interface proxied;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyObject</span><span class="params">(Interface proxied)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.proxied = proxied;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"proxy object do something."</span>);</span><br><span class="line">        proxied.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"proxy object do something else: "</span> + arg);</span><br><span class="line">        proxied.somethingElse(arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> something.</span><br><span class="line"><span class="keyword">do</span> something <span class="keyword">else</span> :banana</span><br><span class="line">proxy object <span class="keyword">do</span> something.</span><br><span class="line"><span class="keyword">do</span> something.</span><br><span class="line">proxy object <span class="keyword">do</span> something <span class="keyword">else</span>: banana</span><br><span class="line"><span class="keyword">do</span> something <span class="keyword">else</span> :banana</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>当想要执行一些额外操作，同时想将这些操作从”实际”对象中分离出去时，或者想要更加容易的做出修改时代理是很有用的。</p>
<p>通过调用静态方法Proxy.newProxyInstance()可以创建动态代理对象，<br>newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)<br>Returns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-08 10:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDynamicProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">(Interface inter)</span> </span>&#123;</span><br><span class="line">        inter.doSomething();</span><br><span class="line">        inter.somethingElse(<span class="string">"Banana"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RealObject realObject = <span class="keyword">new</span> RealObject();</span><br><span class="line">        consumer(realObject);</span><br><span class="line">        Interface proxy = (Interface) Proxy.newProxyInstance(Interface<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(),</span></span><br><span class="line">                new Class[]&#123;Interface.class&#125;, new DynamicProxyHandler(realObject));</span><br><span class="line">        consumer(proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object proxied;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxyHandler</span><span class="params">(Object proxied)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.proxied = proxied;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"proxy: "</span> + proxy.getClass() + <span class="string">" .method: "</span> + method + <span class="string">" .args: "</span> + args);</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Object object : args) &#123;</span><br><span class="line">                System.out.println(object + <span class="string">"   "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(proxied, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> something.</span><br><span class="line"><span class="keyword">do</span> something <span class="keyword">else</span> :Banana</span><br><span class="line">proxy: class com.typeinfo.$Proxy0 .method: public abstract void com.typeinfo.Interface.doSomething() .args: null</span><br><span class="line"><span class="keyword">do</span> something.</span><br><span class="line">proxy: class com.typeinfo.$Proxy0 .method: public abstract void com.typeinfo.Interface.somethingElse(java.lang.String) .args: [Ljava.lang.Object;@12a3a380</span><br><span class="line">Banana   </span><br><span class="line"><span class="keyword">do</span> something <span class="keyword">else</span> :Banana</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="14-8-空对象"><a href="#14-8-空对象" class="headerlink" title="14.8 空对象"></a>14.8 空对象</h2><p>当时用内置的null去表示空对象时，在每次使用这个对象的时候都需要先判断该对象是否为null，并且判断除了用来产生NullPointerException之外，没有任何帮助，还会产生大量冗余代码。我们希望有一个空对象，可以接收传传给它所代表的对象，但是将返回表示该对象不存在的任何真实对象的值。<br>最简单的是创建一个标记接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-08 11:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NullPerson</span> <span class="keyword">extends</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Null</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NullPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"None"</span>, <span class="string">"None"</span>, <span class="string">"None"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"NullPerson"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Person Null = <span class="keyword">new</span> NullPerson();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Null</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String first;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String last;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String first, String last, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"first='"</span> + first + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", last='"</span> + last + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="14-9-接口与类型信息"><a href="#14-9-接口与类型信息" class="headerlink" title="14.9 接口与类型信息"></a>14.9 接口与类型信息</h2><p>interface的一种重要目标就是允许隔离构件，进而降低耦合度，如果编写接口，那么可以实现这一目标，但是通过类型信息，这种耦合性还是会传播出去。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-08 11:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceViolation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> B();</span><br><span class="line">        a.f();</span><br><span class="line">        System.out.println(a.getClass().getCanonicalName());</span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> B) &#123;</span><br><span class="line">            B b = (B) a;</span><br><span class="line">            b.g();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>a被当作B实现，通过转型为B，可以调用A中不存在的方法。<br>一种解决方法是直接声明，使用实际的类而不是接口。最简单的方式是对实现使用包访问权限，这样在包外便无法访问。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-08 11:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiddenC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">makeA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> C();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">u</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">v</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即使从makeA()返回的是C类型，在包外依然无法使用A之外的任何方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-08 11:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiddenImplementation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException,</span></span><br><span class="line"><span class="function">            InvocationTargetException </span>&#123;</span><br><span class="line">        A a = HiddenC.makeA();</span><br><span class="line">        a.f();</span><br><span class="line">        System.out.println(a.getClass().getCanonicalName());</span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> C) &#123;</span><br><span class="line">            C c = (C) a;</span><br><span class="line">            c.g();</span><br><span class="line">        &#125;</span><br><span class="line">        callHiddenMethod(a, <span class="string">"g"</span>);</span><br><span class="line">        callHiddenMethod(a, <span class="string">"v"</span>);</span><br><span class="line">        callHiddenMethod(a, <span class="string">"u"</span>);</span><br><span class="line">        callHiddenMethod(a, <span class="string">"w"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">callHiddenMethod</span><span class="params">(Object object, String methodName)</span> <span class="keyword">throws</span> NoSuchMethodException,</span></span><br><span class="line"><span class="function">            InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        Method g = object.getClass().getDeclaredMethod(methodName);</span><br><span class="line">        g.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        g.invoke(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">f</span><span class="params">()</span>.</span></span><br><span class="line"><span class="function">com.typeinfo.C</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">g</span><span class="params">()</span>.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">g</span><span class="params">()</span>.</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">v</span><span class="params">()</span>.</span></span><br><span class="line"><span class="function"><span class="keyword">package</span> <span class="title">u</span><span class="params">()</span>.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">w</span><span class="params">()</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Process finished with exit code 0</span></span><br></pre></td></tr></table></figure>

<p>通过反射，仍旧可以调用所有方法，甚至是private方法，如果知道方法名，可以在Method对象上调用setAccessible(true)。<br>甚至使用发布编译后的代码也无法阻止这种情况，因为在发布的jdk中有反编译器便可突破这一限制。<br>内部类与匿名类也无法阻止反射到达并调用非公共访问权限的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-08 11:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerImplementation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException </span>&#123;</span><br><span class="line">        A a = InnerA.makeA();</span><br><span class="line">        a.f();</span><br><span class="line">        System.out.println(a.getClass().getName());</span><br><span class="line">        HiddenImplementation.callHiddenMethod(a, <span class="string">"g"</span>);</span><br><span class="line">        HiddenImplementation.callHiddenMethod(a, <span class="string">"u"</span>);</span><br><span class="line">        HiddenImplementation.callHiddenMethod(a, <span class="string">"v"</span>);</span><br><span class="line">        HiddenImplementation.callHiddenMethod(a, <span class="string">"w"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InnerA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"C.f()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"C.g()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">u</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"C.u()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">v</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"C.v()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"C.w()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">makeA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> C();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">C.f()</span><br><span class="line">com.typeinfo.InnerA$C</span><br><span class="line">C.g()</span><br><span class="line">C.u()</span><br><span class="line">C.v()</span><br><span class="line">C.w()</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-08 11:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonymousImplementation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException,</span></span><br><span class="line"><span class="function">            InvocationTargetException </span>&#123;</span><br><span class="line">        A a = AnonymousA.makeA();</span><br><span class="line">        a.f();</span><br><span class="line">        System.out.println(a.getClass().getName());</span><br><span class="line">        HiddenImplementation.callHiddenMethod(a, <span class="string">"g"</span>);</span><br><span class="line">        HiddenImplementation.callHiddenMethod(a, <span class="string">"u"</span>);</span><br><span class="line">        HiddenImplementation.callHiddenMethod(a, <span class="string">"v"</span>);</span><br><span class="line">        HiddenImplementation.callHiddenMethod(a, <span class="string">"w"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonymousA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">makeA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> A() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"public c.f()"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"public c.g()"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">u</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"package u()"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">v</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"protected v()"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"private w()"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> c.f()</span><br><span class="line">com.typeinfo.AnonymousA$<span class="number">1</span></span><br><span class="line"><span class="keyword">public</span> c.g()</span><br><span class="line"><span class="function"><span class="keyword">package</span> <span class="title">u</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">v</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">w</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Process finished with exit code 0</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>写在新年来临之际</title>
    <url>/2019/02/01/%E5%86%99%E5%9C%A8%E6%96%B0%E5%B9%B4%E6%9D%A5%E4%B8%B4%E4%B9%8B%E9%99%85/</url>
    <content><![CDATA[<p>写在新年到来之际</p>
<p>今天是农历腊月二十七，距离新年只有三天，如果不是好多同事都忙着赶车回家、 还要走那些从来没记清的请假流程，那今天和一个平常的周五并无二样。没有特别的感觉，只是隐约中在提醒自己记得收拾行李。</p>
<p>早上才四点不到，请了一天假提前回家的舍友就已经乒乒乓乓的客厅收拾行李了。赶凌晨五点的车这种事情我想这辈子也不会发生在我身上。舍友走了，我却一直没睡着，直到六点多天亮了才迷迷糊糊又睡了一会儿，然后去公司。</p>
<p>相比之下，我还是更喜欢一个人上班的感觉，耳机往耳朵一塞，一路沉浸在自己的世界中，为新的一天调整心态，直到公交到站，唯一的缺憾可能就是这段路程只有短短的十分钟。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4778.JPG" alt="大连公交26路"></p>
<p>今年以来，感觉时间过得越来越快，仿佛每次看日历，都会发现今天是周五。说到这里，我撇过头看了看桌上得日历，还停留在2017年12月31日，竟然已经过去这么久了。这本日历陪着我从北京到大连，竟然已经过去了这么久。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_5049.JPG" alt="17年的日历"></p>
<p>在每个新的时间节点到来之际，总是忍不住要回头看一看。</p>
<p>这一年，1月到6月在学校做毕业设计，和几个在前几年都没有多少来往的同学度过了愉快的半年时间，才发现，原来身边一直有这么多有趣玩得来的人，这差不多算是大学四年最好的回忆之一了。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_2537.JPG" alt="春天的湖"></p>
<p><img src="https://image.youyou-2608.com/blog/IMG_2544.JPG" alt="春天的湖"></p>
<p>4月初去了西江苗寨，南方鸟语花香的春天远比北方的凛冽寒风更吸引人。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_2241.JPG" alt="西江千户苗寨"></p>
<p><img src="https://image.youyou-2608.com/blog/IMG_2259.JPG" alt="西江千户苗寨"></p>
<p>7月，毕业。社会身份的变化算是今年最大的改变，看到身边很多人对学生时代的留恋，我感到几分庆幸。相比于学生，上班族的身份更让我安心。</p>
<p>8月，入职。尽管公司可能还达不到中等水平，但是总归是有一个暂时落脚的地方。到现在半年多过去了，事实证明了我最初的猜想：在工作中的所见所闻所得可能达不到自己的预期。这也是一直以来最令我困扰的一个问题。希望工作能在我改变之前往好的方面改变。</p>
<p>9月，生活与两个在隔壁公司实习的学弟学妹产生了交集。也算是在学校认识最久的人了，相处了三年多的时间，而且人都很好。偶尔还能聚一聚，说说今后的打算，交流一下自己的想法。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4351.JPG" alt="星海广场"></p>
<p>11月，项目进度延迟，整个项目组开始赶工期，时常加班。因为开发中需要用到新工具，所有的东西都要边做边学，工时也越来越短，加班也是常事。不过可能是因为有了实习加班的经历，我倒没有多大的感觉，甚至一开始入职的时候对于每天六点下班的作息总感觉怪怪的：这么早就下班了吗？心里总觉得每天工作到八点才是最合适的。工作时间的延长远远没有来自工作压力让人心疲力竭。一直到现在，度过了紧张的三个月。</p>
<p>工作以后，继续学习的劲头远不如在学校的时候，基本处于三天打鱼两天晒网的状态。半年的时间，学习了”Java编程思想“，”SpringBoot基础“，”EasyUI“，”Spring“。来年要保持更高的学习积极性。</p>
<p>读了张嘉佳的《从你的全世界路过》，《时光倒流》（学校图书馆借的一本美国小说，作者忘记了…），余华的《活着》，林徽因的《你是人间的四月天》，德·雷克的《徒步中国》，马尔克斯的《百年孤独》，青山七惠的《ひとり日和》，川端康成的《时生》，《雪国》，《湖》。</p>
<p><img src="https://image.youyou-2608.com//blogIMG_4929%2820190201-063327%29.jpg" alt="百年孤独"></p>
<p>来年还要加强锻炼。12月20日到今天，一共四十天的时间减掉了4kg，来年争取再减掉2kg。</p>
<p>在这座城市生活了四年多的时间，却没有真正去了解过这座城市。希望来年能实现”走遍大连“，”走遍东北“的计划。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_5028%2820190201-063327%29.jpg" alt="黄河路"></p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4970.JPG" alt="星海公园的日落"></p>
<p><img src="https://image.youyou-2608.com/blog/DSC00057.JPG" alt="沙河口区"></p>
<p>今天是今年最后一个工作日，稍微有点冷，早早的到了公司。大家今天都来得有点晚，左右两个同事也是无所事事发了一天呆，而我也因为工作没有进展，一个下午基本都在看自己以前的学习笔记。希望身边的同事来年工作积极性能高一点，不要再像今年一样，8小时中有3个小时玩手机，2个小时睡觉，发呆1小时。</p>
<p>下班回家的路上，刚好碰到公司楼下有卖花的，买了一束花带回来，算是给自己的新年礼物吧。晚上回家洗了衣服，收拾了房间，把花给插上，一个星期没通风的房间，等我洗完衣服回到房间，竟然有股淡淡的清香。没想到在乡下看都不看一眼的野花野草，在这冬天的北方城市中竟有几分难得。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_5050.JPG" alt="不知名的野花"></p>
<p><img src="https://image.youyou-2608.com/blog/IMG_5051.JPG" alt="七月份开始养的绿萝"></p>
<p>新年之际，祝大家新年快乐，新的一年，身体健康，工作顺利！</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>更改DNS为8.8.8.8访问cn.bing.com</title>
    <url>/2019/01/24/%E6%9B%B4%E6%94%B9DNS%E4%B8%BA8-8-8-8%E8%AE%BF%E9%97%AEcn-bing-com/</url>
    <content><![CDATA[<p>昨天早上开始 <a href="https://cn.bing.com" target="_blank" rel="noopener">https://cn.bing.com</a> 就无法访问：</p>
<p><img src="https://image.youyou-2608.com/blog/%29$55G64S97695C%5BKLD9_QEV.png" alt="Bing官网无法访问"></p>
<p>今天晚上想去 <a href="https://weibo.com/bingisfordoing" target="_blank" rel="noopener">Bing搜索微博</a> 了解一下情况，ping了一下，DNS都是127.0.0.1，将DNS改为8.8.8.8还能正常访问。据说当年Google开始也是出现DNS污染，后来才离开大陆的，想想Bing也没有了，每天只能在百度看百家号那些劣质内容就觉得可怕。</p>
<p>从去年开始就没用百度搜索了，除了CSDN（虽然现在也被广告淹没了）还有点有用的东西。前两天搜点东西，发现不太对，好像所有的结果页面风格都差不多，过两天才看到域名，给我吓到了，前几页全是 <strong>baijiahao.baidu.com</strong> 的文章。给自己家产品引流无可厚非，但是做到这种程度还能算是一个搜索引擎吗？而且好多文章都是文不对题，可能都没有审核。最令人恶心的是竟然都没有评论功能，可能百度也觉得这些低质量内容开放评论会被喷得体无完肤吧。。。</p>
<p>那时候还没想到是百度搞的导流，还特意去查了各种百度谷歌高级搜索的资料学习了一下，折腾一番但是收效甚微。</p>
<p>想看看大家对百度搜索的看法，看到一篇很火的文章：<a href="https://www.huxiu.com/article/282406.html" target="_blank" rel="noopener">百度搜索引擎已死</a> ， 文章举了几个例子，果然全是百家号的恶心内容。</p>
<p><img src="http://i2.chinanews.com/simg/cmshd/2019/01/24/f6c14493849a45ee99d6bb64c583098a.jpg" alt="百度已死"></p>
<p><img src="https://img.huxiucdn.com/article/content/201901/22/225013242046.jpg?imageView2/2/w/1000/format/jpg/interlace/1/q/85" alt="百度搜索结果"></p>
<p>没有竞争对手，才能为所欲为吧。</p>
<p>引用原文中得一句话：<strong>写到这里，很是悲哀：偌大的中文互联网竟已堕落到如此境地，连一个搜索引擎都没有了。</strong></p>
]]></content>
      <categories>
        <category>Exp</category>
      </categories>
      <tags>
        <tag>Exp</tag>
      </tags>
  </entry>
  <entry>
    <title>《雪国》——川端康成</title>
    <url>/2019/01/23/%E5%B7%9D%E7%AB%AF%E5%BA%B7%E6%88%90%E3%80%8A%E9%9B%AA%E5%9B%BD%E3%80%8B/</url>
    <content><![CDATA[<blockquote>
<p>穿过县界长长的隧道，便是雪国。夜空下一片白茫茫。火车在信号所前停了下来。</p>
<p>一位姑娘从对面座位上站起身子，把岛村座位前的玻璃窗打开。一股冷空气袭卷进来。姑娘将身子探出窗外，仿佛向远方呼唤似的喊道……</p>
</blockquote>
<blockquote>
<p>随着秋凉，每天都有昆虫在他房间里的榻榻米上死去。硬翅的昆虫，一翻过身就再也飞不起来。蜜蜂还可以爬爬跌跌一番，再倒下去爬不起来。由于季节转换而自然死亡，乍看好像是静静地死去，可是走近看，只见它们抽搐着腿脚和触角，痛苦地拼命挣扎着。这八叠大的榻榻米作为它们死亡的地方，未免显得太宽广了。</p>
</blockquote>
<blockquote>
<p>比头发丝还细的麻纱，若缺少雪天天然的潮湿，就很难办了。阴冷的季节对它似乎合适。古时有这样一种说法：三九寒天织出来的麻纱，三伏天穿上会令人觉得特别凉爽，这是由于阴阳自然的关系。</p>
<p>倾心于岛村的驹子，似乎在根性上也有某种内在的凉爽。因此，在驹子身上迸发出的奔放的热情，是岛村觉得格外可怜。</p>
<p>但是，这种挚爱之情，不像一件绉纱那样能留下实在的痕迹。纵然穿衣用的绉纱在工艺品中算是寿命最短的，但只要保管得当，五十年或更早的绉纱，穿在身上照样也不褪色。而人的这种依依之情，却没有绉纱寿命长。岛村茫然的这么想着，突然又浮现出为别的男人生了孩子、当了母亲的驹子的形象。他心中一惊，扫视了一下周围，觉得大概是自己太劳累了吧。</p>
</blockquote>
<blockquote>
<p>岛村无法相信呈弧状横跨太空的明亮光带竟会如此昏暗。大概是星空比朦胧的月夜更加黯淡的缘故吧。可是，银河比任何满月的时候都要澄澈明亮。地面却没什么投影，奇怪的是，驹子的脸活像一副旧面具，淡淡的浮现出来，散发出一股女人的芳香。</p>
<p>岛村抬头仰望，觉得银河仿佛要把这个大地拥抱过去。</p>
<p>犹如一条大光带的银河，使人觉得好像浸泡着岛村的身体，飘飘浮浮，然后伫立在天涯海角上。这虽是一种冷寂，但也给人某种神奇的魅惑之旅。</p>
</blockquote>
<blockquote>
<p>“这孩子疯了，她疯了！”</p>
<p>驹子发出疯狂的叫喊，岛村试图接近她，不料被一群汉子连推带搡撞到一边去。这些汉子是想从驹子手里接过叶子抱走。待岛村站稳了脚跟，抬头望去，银河好像哗啦一声，向他的心坎上倾泻了下来。</p>
</blockquote>
<p>读了一遍，除了驹子与岛村之间的关系、叶子的出场和去世之外，什么也没留下。没有体会到其中要表达的情感，只是从头到尾蕴含着一股无奈和哀伤。</p>
<p>驹子为了给未婚夫治病而沦为艺伎，倾心于岛村，在岛村看来却是一段徒劳的感情；叶子内心向往大城市的生活，希望离开乡下却未能如愿，牵挂自己在铁路工作的弟弟却无法相见，最终因火灾不幸去世。原本出身大城市衣食无忧想要改革日本舞蹈的岛村，在与驹子的相处以及叶子的去世中从自己的世界中解放了出来，改变了自己一直以来对事物的“徒劳”的看法。</p>
<blockquote>
<p>一直以来，困扰岛村的虚无背后的原因，是死亡带来的生命时长的局限，所导致的的人生一切事情的无意义。在叶子死亡的那一刻，岛村看到的，是失去了生命反而显得自由，生命通过变形得到了延续，生和死之间不再那么泾渭分明。如果生死界线真的变得模糊，那困扰岛村的虚无，或许将不复存在。</p>
</blockquote>
<p><a href="https://www.jianshu.com/p/f2f73e0a44d4" target="_blank" rel="noopener">《雪国》：理解虚无主义，才能读懂川端康成 </a></p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《百年孤独》</title>
    <url>/2019/01/14/%E3%80%8A%E7%99%BE%E5%B9%B4%E5%AD%A4%E7%8B%AC%E3%80%8B/</url>
    <content><![CDATA[<p>人生百年，百年孤独。</p>
<p>第一次听到这个书名，还是初中的时候，这么多年，一直觉得这是个令人敬而远之的名字。</p>
<p>花了三周的时间读完了这本书。书中那些长、拗口还夹杂循环的人名以及人物之间错综复杂的关系，严重影响阅读，最后从网上找了任务关系图，读起来轻松不少。</p>
<p>字里行间充满着孤独，每个人都奋力挣扎一生，却从未逃出孤独。</p>
<p>小城从荒芜走向繁荣，然后逐渐走向衰落。布恩迪亚家族七代人，从出生到死亡不过是剧本中的一场演出，在孤独中出场，最后在孤独中落幕，被飓风抹去，从世人记忆中根除，自永远至永远不会被重复。</p>
<p>“过去都是假的，回忆是一条没有归途的路，以往的一切春天都无法复原，即使最狂乱且坚韧的爱情，归根结底也不过是一种瞬息即逝的现实，唯有孤独永恒。”</p>
<p>“你那么憎恨军人，跟他们斗了那么久，琢磨了他们那么久，最终却变得和他们一样。人世间没有任何理想值得以这样的沉沦最为代价。”</p>
<p>“世界不过是身外之物，她的内心不再为任何苦痛而波动。她深深遗憾没能在多年前获得这样的领悟，那时还来得及净化记忆，在崭新的光芒下重建世界，平静地唤回傍晚时皮特罗•克雷斯皮身上的薰衣草味道，并将丽贝卡救出悲惨的境地，而这不是出于爱，也不是出于恨，而是出于对孤独的深切理解。”</p>
<p>“岁月流逝，她却永远停留在天真烂漫的童年，对各样人情世故越发排斥，对一切恶意与猜疑越发无动于衷，幸福的生活在自己单纯的现实世界里。”</p>
<p>“她意识到奥雷里亚诺·布恩迪亚上校并非像她想的那样，由于战争的摧残而丧失对家人的情感，实际上他从未爱过任何人，包括妻子蕾梅黛斯和一夜风流后随即从他生命里消失的无数女人，更不必提他的儿子们。她猜到他并非像所有人想的那样为着某种理想发动那些战争，也并非像所有人想的那样因为疲倦而放弃了近在眼前的胜利，实际上他成功和失败都因为同一个原因，即纯粹、罪恶的自大。她最终得出结论，自己不惜为他付出生命的这个儿子，不过是个无力去爱的人。”</p>
<p>“那个漫无尽头的夜里，赫里内勒多•马尔克斯上校追忆在阿玛兰妲缝纫间里度过的那一去不复返的午后时光，奥雷里亚诺•布恩迪亚上校则苦苦挣扎了数小时，试图抓裂自己孤独的硬壳。自从那个遥远的午后父亲带他去见识冰块，他唯一的快乐时光就是在金银器作坊里打造小金鱼的时刻。他被迫发动三十二场战争，打破与死亡之间的所有协定，并像猪一样在荣誉的猪圈里打滚，最后耽搁了将近四十年才发现纯真的可贵。”</p>
<p>“在生命的最后两个小时里，他无法理解为什么自童年时代起一直折磨他的恐惧感消失了。他无动于衷地听着冗长的指控，甚至没想去展现自己刚刚获得的勇气。其实他在意的不是死亡，而是生命，因此听到死刑判决时他心中没有恐惧只有留恋。”</p>
<p>可能鸡汤文说的对，孤独才是人生的本质。</p>
<p>信息社会，人人都能随时随地冲浪上网的时代，这种孤独的感觉来得更加容易。我看到身边的人无时无刻在看着手机屏幕，在回复着各种社交软件的消息，看着不计其数的自媒体的图文信息。我没有体验到其中的乐趣，我从很久以前，就努力做一个和快文化保持距离的人。几乎不网络聊天，几乎不玩游戏。也正因为如此，我经常感到和周围的人格格不入，在学校的时候，周围的同学上学放学路上无时无刻不在聊游戏，久而久之，我便习惯一个人上课下课。</p>
<p>曾经有过一段孤独感很强烈的时期。总是会在一些细枝末节的事物影响下产生强烈的孤独，我甚至常常在过马路的时候想，假如此时此刻我发生车祸，我该向谁求助。仔细想来，大概是工作以后，潜意识里多了一种梦想破灭不得不向现实屈服的失落，自己却未曾察觉；毕业之后，便是独自一人生活，几乎断了所有与周围事物的联系，不曾与人搭话，甚至曾经一个月未曾出门，哪怕是下楼去趟超市。庆幸的是，这种感觉持续了一段时间便消失了，可能是习惯了现在的生活状态。</p>
<p>努力地去摆脱孤独。看一部纪录片、单曲循环一首歌、坐一小时公交去机场和车站看看繁忙的世界，坐48小时的绿皮车去接触更底层的劳苦大众…渐渐的在孤独中忘记孤独，当你去回想昨天，发现不是一片空白的时候，你已经战胜了孤独。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>Web项目可视化开发工具——WebPerformer</title>
    <url>/2019/01/08/Web%E9%A1%B9%E7%9B%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94WebPerformer/</url>
    <content><![CDATA[<blockquote>
<p>一个基于Web的现金流管理系统是我进入公司接触的第一个项目。两个半月做测试，两个半月做开发，将近半年，现在开发接近尾声，想好好分析一下这个“新兴工具”。</p>
</blockquote>
<h3 id="什么是WebPerformer"><a href="#什么是WebPerformer" class="headerlink" title="什么是WebPerformer"></a>什么是WebPerformer</h3><p>在Google里搜索“Web Performer”（下文简称“wp”），能搜索到结果173,000,000个结果，可以看到，靠前的结果都是日文的，并且都是版本更新相关的结果。在百度中搜索同样的内容，没有发现有中文结果，在国内应用几乎为0。</p>
<p><img src="https://image.youyou-2608.com/blog/wp-search-result.png" alt="wp-google-search-result"></p>
<p>wp是“キヤノンITソリューションズ株式会社”的产品，产品简介：<a href="https://www.canon-its.co.jp/news/detail/20180508webperformer.html" target="_blank" rel="noopener">wp-官网简介</a> 。</p>
<p><img src="https://image.youyou-2608.com/blog/wp-simple-info.png" alt="wp-simple-info"></p>
<p>简单来说，wp是为了降低人力成本、应对信息技术发展和技术人才不足、提高软件质量而开发的高效率自动化开发工具。</p>
<p>目前已经在制药、贸易、建设、运输、金融保险等行业有一些成功应用的案例。</p>
<p><strong>wp就是一个功能比较全的Eclipse插件。</strong></p>
<h3 id="与传统Web项目开发的相同点与不同点"><a href="#与传统Web项目开发的相同点与不同点" class="headerlink" title="与传统Web项目开发的相同点与不同点"></a>与传统Web项目开发的相同点与不同点</h3><p>官网的简介几乎都是一笔带过，并且没有提到细节。应该是只有购买之后才会得到官方详细的使用文档。</p>
<h4 id="Web-Performer相关的概念"><a href="#Web-Performer相关的概念" class="headerlink" title="Web Performer相关的概念"></a>Web Performer相关的概念</h4><ul>
<li>work code：变量在一个模块（模块包括IO，BP，DM，EXT）的唯一名称，含义和命名规则与Java中的变量相似。</li>
<li>IO：输入输出的意思，在wp中一个IO对应一个页面，页面上所有的项目（数据项，label）都来自在IO中定义的项目，在IO中可以给各个项目添加一些属性，这些属性包括work code（变量名），name（变量别命），长度（区别于byte，例如“name”是4位，“你好”是2位），小数位（项目为数字时且需要小数位时指定，默认-1），数据类型（见“数据类型”部分）。</li>
<li>DM：Data Model的简称，主要功能是作为存放数据的容器。类似于Java中pojo类，兼有泛型集合的功能。</li>
<li>BP：Business Process的简称，BP是一个功能的逻辑部分，大致的使用过程为：向BP传入参数 &gt; BP中加工处理 &gt; 将结果集放入DM  &gt; 结果集传到IO &gt; 画面显示数据。</li>
<li>EXT：Extentsion，扩展。某些在BP中不能完成的功能，或者逻辑过于复杂超出了wp的功能范围，可以自己编写相应的Java类或者JavaScript文件，然后通过BP调用EXT，EXT调用自定义处理的方式处理数据。</li>
</ul>
<h4 id="与传统开发的联系"><a href="#与传统开发的联系" class="headerlink" title="与传统开发的联系"></a>与传统开发的联系</h4><ul>
<li>从wp模块分类中很容易看出，其实wp的本质还是MVC的思想，IO对应View，BP对应Controller，DM对应Model。</li>
<li><strong>在基于wp的开发中，除了扩展部分和自定义页面布局及样式之外，其他所有的操作都接触不到代码，开发的内容仅仅是在各个模块中添加一个个项目，然后给对应的项目指定相应的属性。</strong></li>
</ul>
<h3 id="开发环境（环境依赖）"><a href="#开发环境（环境依赖）" class="headerlink" title="开发环境（环境依赖）"></a>开发环境（环境依赖）</h3><p>在开发开始之前，需要搭建开发环境，总体来说wp的开发环境和正常开发时的环境几乎一致。</p>
<p>在wp中，由于wp本质上就是一个Eclipse插件，所以Eclipse是必须的，<del>项目管理基于Maven</del>，构建基于Ant，服务器为Tomcat，自动生成的则是Java代码，所以需要Java环境，其他的与使用Eclipse正常开发几乎一致。常用的功能仅仅是编译时完成一个功能之后点击编译（Eclipse的编译）、需要自定义页面布局时使用Ant命令生成对应IO的layout.html文件然后基于layout.html文件修改页面布局。</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>wp中有自己的数据类型，这些数据类型应该是为了降低编程门槛而从Java数据类型中提炼出来的。</p>
<p>数据的类型：</p>
<ul>
<li>CODE：介于Java的String和Numeric之间，定义只包含数字和字母的数据，例如：123，AC01。</li>
<li>TEXT：类似于Java中的String类型，几乎任何类型都可以转换成TEXT类型，例如：’Hello world’。</li>
<li>DATE：日期类型，有多种格式且可以互相转换，例如：20190108，2019-01-08。</li>
<li>TIME：时间类型，有多种精度可以选择，最大精度到秒，例如：2019-01-08 21:59:01。</li>
<li>NUM：数字类型，有多种格式且可以互相转换，例如1234，1,234。</li>
<li>FILE：文件类型。</li>
<li>BOOL：布尔类型，不常用。</li>
<li>CURRENCY：货币类型。</li>
</ul>
<p>work code的类型：</p>
<ul>
<li>IO：输入输出类型，类似于html中的input类型，页面刷新后输入的值恢复成IO模块中设置的默认值。</li>
<li>I：输入类型，与IO类型类似，页面刷新后输入的值保持不变。</li>
<li>O：输出类型，类似于IO类型的只读模式。</li>
<li>A：Action的简称，执行一个动作，可以调用BP逻辑以执行操作，例如”检索“，”修正“，”删除“。</li>
<li>G：Group的简称，一个组，类似于一个没有边框的table，可以用来展示检索出的数据，在其后并且下一个G类型项目之前的所有IO属性”Level“值为”2“的项目会被组织到这个table中作为表头（一般项目的Level值为1），值会被添加到这个label下，形成完成的数据表格。</li>
</ul>
<p>BP中项目的常用类型：</p>
<ul>
<li>ARG：参数类型，表示该值是IO中传过来的变量。</li>
<li>CALL：表示调用一个DM并执行DM中的一个操作，例如SELECT，UPDATE。</li>
<li>PROCEDURE：表示调用一个存储过程。</li>
<li>FOREACH：对一个集合执行for循环，类似于Java中的增强for循环。</li>
<li>BREAK：跳出当前循环。</li>
<li>CONTINUE：跳过本次循环进入下一次循环。</li>
<li>DO/WHILE：类似于Java中的WHILE。</li>
<li>IF/ELSEIF/ELSE：判断语句。</li>
<li>END：表示一个逻辑块的结束。</li>
<li>LOG：日志记录。</li>
<li>WORKAREA：表示调用一个数据集合。</li>
</ul>
<p>DM中操作的类型：</p>
<ul>
<li>SELECT：表示按照指定的条件执行select语句。</li>
<li>UPDATE：表示按照指定的条件执行update语句。</li>
<li>DELETE：表示按照指定的条件执行delete语句（符合条件的记录不存在时报错）。</li>
<li>ERASE：表示按照指定的条件执行delete语句（符合条件的记录不存在时不报错）。</li>
<li>INSERT：表示按照指定的条件执行insert语句。</li>
</ul>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="DM的定义"><a href="#DM的定义" class="headerlink" title="DM的定义"></a>DM的定义</h4><p>DM主要定义一些与数据库或者页面需要的字段，如下表：</p>
<table>
<thead>
<tr>
<th>项目CODE</th>
<th>项目别名</th>
<th>位数</th>
<th>小数位</th>
<th>字段操作</th>
<th>页面跳转</th>
<th>来自DM</th>
<th>DM字段</th>
</tr>
</thead>
<tbody><tr>
<td>TRAN_ID</td>
<td>交易编号</td>
<td>13</td>
<td>-1</td>
<td></td>
<td></td>
<td></td>
<td>CODE</td>
</tr>
<tr>
<td>TRAN_DATE</td>
<td>交易日期</td>
<td>8</td>
<td>-1</td>
<td></td>
<td></td>
<td></td>
<td>CODE</td>
</tr>
<tr>
<td>TRAN_VOLUME</td>
<td>交易额</td>
<td>15</td>
<td>0</td>
<td></td>
<td></td>
<td></td>
<td>NUM</td>
</tr>
</tbody></table>
<p>在DM的属性中可以指定SQL语句，也可以在操作中指定数据库操作类型及条件：</p>
<table>
<thead>
<tr>
<th>项目CODE</th>
<th>项目别名</th>
<th>项目类型</th>
<th>条件</th>
</tr>
</thead>
<tbody><tr>
<td>SELECT_DATA</td>
<td>数据查询</td>
<td>SELECT</td>
<td>TRAN_DATE&gt;FORMATDATE(@1,1) AND CUSTOMER_CODE =   TEXT(‘TEST_CODE’) AND TRAN_VOLUME &gt; NUM(@2)</td>
</tr>
</tbody></table>
<p>其中@1表示调用时的第一个参数，@2表示第二个参数，依此类推，但是必须保证传递过来的参数与定义时的参数顺序一致，否则会得到期待值以外的结果；另外还需要保证SQL返回的结果与DM中字段数量、字段名和顺序一致，否则无法通过编译。</p>
<p>如果要给一个DM的对象赋值，需要在DM中定义赋值方法，分别指定字段以及对应的参数。</p>
<h4 id="BP的定义"><a href="#BP的定义" class="headerlink" title="BP的定义"></a>BP的定义</h4><p>BP是一个功能模块的逻辑部分，一个简单的示例定义如下：</p>
<table>
<thead>
<tr>
<th>项目类型</th>
<th>对应DM</th>
<th>调用操作</th>
<th>数据类型</th>
<th>参数</th>
<th>WORK CODE</th>
</tr>
</thead>
<tbody><tr>
<td>ARG</td>
<td></td>
<td></td>
<td>CODE</td>
<td></td>
<td>TRAN_DATE</td>
</tr>
<tr>
<td>ARG</td>
<td></td>
<td></td>
<td>TEXT</td>
<td></td>
<td>CUSTOMER_ID</td>
</tr>
<tr>
<td>ARG</td>
<td></td>
<td></td>
<td>NUM</td>
<td></td>
<td>TRAN_VOLUME</td>
</tr>
<tr>
<td>CALL</td>
<td>TRAN_INFO</td>
<td>SELECT_DATA</td>
<td></td>
<td>_ARG_.TRAN_DATE,_ARG_.CUSTOMER_ID,_ARG_.TRAN_VOLUME</td>
<td>TRAN_INFO</td>
</tr>
<tr>
<td>CALL</td>
<td>PAGE_DATA</td>
<td>SET_DATA</td>
<td></td>
<td>TRAN_INFO</td>
<td>PAGE_TRAN_INFO</td>
</tr>
<tr>
<td>WORKAREA</td>
<td>PAGE_DATA</td>
<td></td>
<td></td>
<td>APPEND,PAGE_TRAN_INFO</td>
<td></td>
</tr>
</tbody></table>
<p>这时只要在IO中指定数据来源类型为WORKAREA并且为PAGE_DATA，这个数据集合中的数据便能在页面展示出来。</p>
<h4 id="IO的定义"><a href="#IO的定义" class="headerlink" title="IO的定义"></a>IO的定义</h4><p>IO主要存放与页面交互的数据或者接收用户的输入，可以设定初期值：</p>
<table>
<thead>
<tr>
<th>项目类型</th>
<th>项目CODE</th>
<th>项目别名</th>
<th>位数</th>
<th>小数位</th>
<th>加工式</th>
<th>目标页面</th>
<th>来自DM</th>
<th>DM字段</th>
</tr>
</thead>
<tbody><tr>
<td>IO</td>
<td>USER_NAME</td>
<td>用户名输入框</td>
<td>20</td>
<td>-1</td>
<td></td>
<td></td>
<td></td>
<td>@TEXT</td>
</tr>
<tr>
<td>O</td>
<td>TRAN_ID</td>
<td>交易ID</td>
<td>15</td>
<td>-1</td>
<td></td>
<td></td>
<td>PAGE_DATA</td>
<td>TRAN_ID</td>
</tr>
<tr>
<td>O</td>
<td>TRAN_DATE</td>
<td>交易日期</td>
<td>10</td>
<td>-1</td>
<td></td>
<td></td>
<td>PAGE_DATA</td>
<td>TRAN_DATE</td>
</tr>
<tr>
<td>O</td>
<td>TRAN_VOLUME</td>
<td>交易额</td>
<td>15</td>
<td>0</td>
<td></td>
<td></td>
<td>PAGE_DATA</td>
<td>TRAN_VOLUME</td>
</tr>
</tbody></table>
<h4 id="更多细节"><a href="#更多细节" class="headerlink" title="更多细节"></a>更多细节</h4><p>程序运行中，数据流向为：IO &gt; BP &gt; DM &gt; BP &gt; IO，不过这个顺序不严格界定，也可以从IO项目的初期值属性中直接访问数据库取得数据，多用于取全局变量等类型的值。</p>
<h3 id="常用内置方法"><a href="#常用内置方法" class="headerlink" title="常用内置方法"></a>常用内置方法</h3><ul>
<li>CODE() / TEXT() / NUM() / DATE() / TIME()：基本数据类型之间的互相转换。（某些数据类型之间不能互转，转换失败会导致编译失败）。</li>
<li>FORMATDATE(DATE,STYLE)：日期格式转换，1：yyyy-MM-dd；3：yyyyMMdd等。</li>
<li>ADDDATE(DATE,Y,M,D)：日期DATE上加Y年M月D日后的日期，若Y/M/D为负时则执行减操作。</li>
<li>SUBSTITUTE(TEXT,TEXT1,TEXT2)：将TEXT中的TEXT1全部置换为TEXT2。</li>
</ul>
<h3 id="一般开发流程（一个增-删-改-查的例子）"><a href="#一般开发流程（一个增-删-改-查的例子）" class="headerlink" title="一般开发流程（一个增/删/改/查的例子）"></a><del>一般开发流程（一个增/删/改/查的例子）</del></h3><p>原本打算遵循一般使用流程完成一个增/删/改/查的例子，但是考虑到版权问题，此处略过。大致的使用和上文描述并无太大差距。</p>
<h3 id="页面风格与页面布局"><a href="#页面风格与页面布局" class="headerlink" title="页面风格与页面布局"></a>页面风格与页面布局</h3><h4 id="默认页面布局与页面风格"><a href="#默认页面布局与页面风格" class="headerlink" title="默认页面布局与页面风格"></a>默认页面布局与页面风格</h4><p>在软件中，内置了几种风格，对于一般对于页面美观程度要求不高的公司内部项目来说已经足够，其实这也差不多就是这个工具软件的使用范围，规模更大或者要求较多的面向用户的项目来说，这个工具显得力不从心。</p>
<h4 id="自定义页面布局与元素样式"><a href="#自定义页面布局与元素样式" class="headerlink" title="自定义页面布局与元素样式"></a>自定义页面布局与元素样式</h4><p>每定义一个项目，wp会默认纵向排列，可以在项目属性中指定排列方向为X方向。当默认Layout满足不了需求时，就需要自己改变默认布局，在项目编译完成后，使用Ant生成默认的布局文件，然后对默认布局文件layout.html进行修改，直至满足需求。</p>
<p>其实默认Layout就是一个整的table，每一个项目都定义在td单元格中，因此本质上就是改动一个table。</p>
<h3 id="浅谈使用WebPerformer的利与弊"><a href="#浅谈使用WebPerformer的利与弊" class="headerlink" title="浅谈使用WebPerformer的利与弊"></a>浅谈使用WebPerformer的利与弊</h3><p>基于两个月的使用感受，总结出下面几点：</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol>
<li>提高开发效率：对于简单的页面（例如检索数据然后展示），可以免去编写页面的工作，可以快速实现功能，开发效率确实能提升不少。但是这仅仅限于极少数极为简单的页面。</li>
<li>降低开发门槛：wp能极大的降低开发门槛，这是我觉得最大的优点。开发者不用去了解泛型和反射的细节、不用去了解多线程、更不需要了解设计模式的知识，全程“傻瓜式”编程，只要你会使用鼠标和触摸板、知道怎么写一个SQL语句，然后剩下的问题都是wp工具使用的问题。</li>
<li>减小开发难度：因为所有项目的属性已经被工具限定范围，开发者能进行的操作早已被工具限制，所以开发中遇到的关于语言使用本身最严重的错误就是NPE，大大减少了编程错误。</li>
</ol>
<h4 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h4><ol>
<li>丧失灵活性是为使用简单付出的代价。到目前为止，使用了wp将近两个月的时间，最大的感觉就是 <strong>限制太多</strong> 。比如一个页面的数据只能来自一个DM，BP内做循环等，流程繁琐。</li>
<li>代码可读性几乎为0。由于同一模块中不能有相同变量名和逻辑段缩进不灵活的原因，导致BP部分的代码可读性几乎为零。后期维护将会是一个艰巨的任务。</li>
<li>代码复用率低。由于工具本身的特征，很难写出通用功能，整个项目中，每个人几乎都是各自为战，花了太多时间去重复造轮子。</li>
<li>可能存在许多性能问题。由于工具本身限制丧失了许多灵活性，很多明明两行代码就能做到的事情，在wp中却不得不另寻出路，拐弯抹角才能达到目的，由此导致许多性能上的损失。</li>
</ol>
<h4 id="个人使用感受"><a href="#个人使用感受" class="headerlink" title="个人使用感受"></a>个人使用感受</h4><p>因为前期没有培训，完全是自己研究文档、在开发中自己摸索，所以整个过程用得很是憋屈。</p>
<p>现阶段离可视化自动化还过于遥远，反正我以后再也不想接触这个工具了，我无法忍受各种限制以及为了向这些限制而在代码性能以及代码可读性等方面做出的让步。</p>
<p>在官网的介绍上赫然挂着“超高速开发”几个字，但是较为讽刺的是，目前这个为期半年的项目已经延期一个多月。</p>
<h3 id="发展前景"><a href="#发展前景" class="headerlink" title="发展前景"></a>发展前景</h3><p>工具总是朝着简单易用和自动化的方向发展。wp应该算是在这个方向上走得比较远的工具，尽管现在还有许多功能满足不了需求，但是随着不断更新，很多问题应该会逐渐解决。包括在使用范围上应该也会逐渐扩大。但是对于一些规模较大以及性能要求高的系统来说，wp还有很长很长的路要走。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么要学摄影</title>
    <url>/2019/01/05/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6%E6%91%84%E5%BD%B1/</url>
    <content><![CDATA[<p>为什么要学摄影？</p>
<p><strong>原文由 <a href="https://www.jianshu.com/u/b3720ee3e557" target="_blank" rel="noopener">刘星文</a> 发布于简书 <a href="https://www.jianshu.com/p/97ea1964027a" target="_blank" rel="noopener">为什么要学摄影</a> ，未经作者本人授权，禁止转载。</strong></p>
<p>2017.12.07 12:45* 字数 1755</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-eee1313471772e8c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>转眼，已是冬天。</p>
<p>好像刚刚在春天的繁花下打了个盹，醒来却已是年尾。</p>
<p>而回望过去，照片成了最好的载体，每一张都记录着当时的风，空气的温度，阳光照在身上的温暖……</p>
<p>好像，那一刻又被激活了。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-5267b65a3a75da9b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>西湖</p>
<p>所有图片均使用 iPhone 5 或 iPad Pro 拍摄</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-9b0c2be9fc766f9e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>过完春节那段日子，天气出奇地好，阳光和煦，一切都充满无限的生机。</p>
<p>每一刻，我都想待在室外。</p>
<p>拍这张照片的时候，天空无比清澈通透，傍晚的夕阳洒在江面上，美的像梦境。</p>
<p>我用慢快门拍摄了水面，让它像镜子一样光滑。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-ec210e5e546e9115.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>那天很冷，风大雨大。</p>
<p>一个人去了浴鹄湾，里面空空荡荡，很少看到人。</p>
<p>虽然冻的手不听使唤，却庆幸捕捉到这样的景色。</p>
<p>这张照片是在一个小桥上拍到的，一棵树花开得正盛，特别惹眼。</p>
<p>有时候风雨越大，景色越美。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-8fbc4eb2f6048894.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>那天，去了九溪。</p>
<p>美好的春日，一路上都是郊游的人。</p>
<p>阳光很暖，我走了很远，在亭子边休息时下了这张照片。</p>
<p>后来很多人问这是不是林芝？</p>
<p>其实那棵树并未开花，但由于光线的神奇缘故，却呈现出了奇妙的颜色。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-bdb9a70a75d40333.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>骑行时偶遇的一个村庄。</p>
<p>庄子的对面是富春江上的一个小岛。</p>
<p>岸边开满了油菜花，水平如镜，真的是如诗如画，都舍不得闭眼。</p>
<p>我在码头边睡了一个小时。</p>
<p>后来又去了几趟，再也没碰到过第一次看到的美景。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-bf2e91d4be9e6a01.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>梅花开得盛的时候，去了植物园。</p>
<p>早早便入园，赏梅的，遛鸟的，非常热闹。</p>
<p>各种颜色的梅花争芳斗艳，很是壮观。</p>
<p>在植物园逗留了半天，边想心事边拍照，出来的时候，感觉心事少了很多。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-0855f6a6fe6e8fe9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>这其实是西溪的一朵梅花，用微距拍摄了花蕊。</p>
<p>那天很冷，出门的时候本想多穿件毛衣，犹豫了下，又放下了，结果到了西溪，手都冻僵了。</p>
<p>这其实是我第一次去西溪里面，确实很美。</p>
<p>坐了游船，虽说下着雨，但还是打开窗户，不停地拍沿途的风景。</p>
<p>后来找到了一个很安静的小亭子，在那里拍到了一个极美的镜头，梅花倒映在水面，瞬间就理解了什么叫“疏影横斜水清浅”。</p>
<p>在亭子里待了很久，不停地从各种角度拍梅花，由于亭子上的小台阶太滑了，结果摔了一跤，疼的我直咧嘴。</p>
<p>出园的时候，看到了远山冒着氤氲的水气，美得不忍离开。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-ca7d57daf418a8f3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>那天傍晚的西湖，落日极美。</p>
<p>天空有很厚的云层，阳光穿过，炫目且有些刺眼。</p>
<p>头有些晕，晃晃悠悠中看到了这颗树，落日的余晖中，枝干显得特别有力。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-5cc0ecd6a07cfdac.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>这天的风很大，感觉人都被吹得飘起来了，看看柳条就知道。</p>
<p>这时候柳芽还很小，现在一晃都绿树成荫了。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-aa93fae48136eef1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>很冷的一天。</p>
<p>还未完全抽芽的草地还是一片嫩黄，被包裹在在群山与水面之间。</p>
<p>有时候，越是恶劣的天气，越有难得的风景。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-bb6be1f57cabcc81.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>元宵节。</p>
<p>街上还很冷清，江边公园里行人也不多。</p>
<p>用了 Slow Shutter 慢快门相机，效果很好。</p>
<p>依然很冷，月亮很圆，当然，手机不可能拍到这么大的月亮，这是我在手机上用 APP 加上去的。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-8873a33f5993d7a2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>戴家山，久闻其名，终见真容。</p>
<p>雨时大时小，山路真的是非常曲折，但风景奇美，随处可见可见大大小小的油菜花田。</p>
<p>在山上走了好久，有时候水气弥漫真个山谷，如仙境一般。</p>
<p>去看了山里的书店，很别致。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-ffa3f6b7bceba6b4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>那天傍晚的时候，去了江边。</p>
<p>很多植物已经郁郁葱葱，叶片在阳光下泛着金色。</p>
<p>逆光的时候，树叶更美。</p>
<p>于是逆光拍摄了一片树叶。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-6552c4e8cfab43aa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>风大雨大的一天。</p>
<p>远山层层叠叠，用慢快门相机稍微抖动着拍了一张模糊的照片，在 VSCO 里稍微调色之后，就得到了一张诗意盎然的作品。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-35a267c4c695e601.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>被雨打落在地的一朵花。</p>
<p>轻轻地放在一张随身携带的卡纸上。</p>
<p>调成黑白，出奇地有质感。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-0c67a4a720a3506d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>有天，很早去了一家书店。</p>
<p>很安静，有几个人在安静地看书。</p>
<p>阳光透过巨大的落地窗洒进来，很是惬意。</p>
<p>一个城市，如果有几个 24 小时书店，是件很幸福的事情。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-ef82b9742e86682c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>特别喜欢这巨大的玻璃，无比通透。</p>
<p>桌椅很舒服，光线正好，越来越喜欢呆在这里。</p>
<p>环境，真的是非常非常重要。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-9b94e52d68c51355.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>沿江骑行时，在一个村庄看到这辆这行车，早上的阳光照过来，光影极美。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-a37bf81e2e36e711.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>芦茨。</p>
<p>水特别清，小鱼特别多。</p>
<p>慢快门拍了流水，呈现出一片如诗的静谧。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-696ccb8a39be6074.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>欲把西湖比西子，淡妆浓抹总相宜。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-9d133e32c5c96f63.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>远山层层叠叠，而那只风筝，在高空中遥望着群山。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-9dbcc4a20829f914.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>江上起雾时，这座小城便犹如仙境一般。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/742794-27e70443526c901c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>桐君山上的一处老建筑。</p>
<p>下午的光影，极美。</p>
<p>这一张张的照片，就像一个个独立的时空，存储着那一刻的记忆。</p>
<p>如果记忆就是人生的全部，那摄影，就是通向记忆的桥梁。</p>
<p>这也许就是摄影的意义，从短暂的每一刻，瞥见人生的全貌。</p>
<p><strong>如何用手机拍出电影感的画面？</strong></p>
<hr>
<p><a href="https://www.jianshu.com/p/01dd0bb770a0" target="_blank" rel="noopener"><strong>如何彻底摆脱低效，成就高效人生？</strong></a></p>
<p><a href="https://www.jianshu.com/p/54da13f7c2a8" target="_blank" rel="noopener">如何用黄油相机轻松做美图？</a></p>
<p><a href="https://www.jianshu.com/p/afc8ddec73cf" target="_blank" rel="noopener">手机都没玩好 ，还想拍出好照片？</a></p>
<p><a href="https://www.jianshu.com/p/59c37dfb5e6b" target="_blank" rel="noopener">这些 APP，让你的照片美到飞起来</a></p>
<p><a href="https://www.jianshu.com/p/697450fafd71" target="_blank" rel="noopener">必看，20部摄影超美的电影</a></p>
<p><a href="https://www.jianshu.com/p/4408ae63674d" target="_blank" rel="noopener">最不起眼的习惯，就这样拉开你和别人的距离！</a></p>
<p>© 著作权归原作者所有</p>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之3Sum</title>
    <url>/2019/01/03/LeetCode%E4%B9%8B3Sum/</url>
    <content><![CDATA[<p><img src="https://image.youyou-2608.com/blog/IMG_4722.JPG" alt="轻音乐推荐"></p>
<p>不知道身边现在还有没有用QQ音乐的人。</p>
<h2 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h2><p>输入一个数组，例如{-1 0 1 2 -1 -4}，从数组中找三个数（a,b,c），使得其和0，输出所有的（a,b,c）组合。</p>
<p>要求abc不能重复，并且a&lt;=b&lt;=c。</p>
<p>例：</p>
<p>S = {-1, 0, 1, 2, -1, -4}；</p>
<p>输出：</p>
<p>(-1, 0 ,1)</p>
<p>(-1, -1, 2)</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>一看到题目，不问代码行数，不问时间复杂度，便排出三个循环。。但是循环非常耗时，显然不是题目的本意。想了好长时间没有什么进展。</p>
<p>先将给定数组排序，然后指定一个数，在数组中找出两个数并且这两个数的和是目标数值的相反数：<a href="http://www.cnblogs.com/xcr1234/p/5285727.html" target="_blank" rel="noopener">【LeetCode】3Sum 解题报告</a></p>
<p>在网上找到了篇比较有新意的文章：[<a href="https://www.cnblogs.com/xcr1234/p/5285727.html" target="_blank" rel="noopener">3Sum algorithm - 非常容易理解的实现 （java)</a>] 。</p>
<hr>
<p>最后发现维基百科中就有收录：<a href="https://zh.wikipedia.org/zh-hans/3SUM" target="_blank" rel="noopener">维基百科—3SUM</a> ，还有更一般的情形 N SUM。</p>
<figure class="highlight pascal"><table><tr><td class="code"><pre><span class="line">sort(S);</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">0</span> <span class="keyword">to</span> n-<span class="number">3</span> <span class="keyword">do</span></span><br><span class="line">   a = S[i];</span><br><span class="line">   start = i+<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">end</span> = n-<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">while</span> (start &lt; <span class="keyword">end</span>) <span class="keyword">do</span></span><br><span class="line">      b = S[start]</span><br><span class="line">      c = S[<span class="keyword">end</span>];</span><br><span class="line">      <span class="keyword">if</span> (a+b+c == <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">         output a, b, c;</span><br><span class="line">         <span class="comment">// Continue search for all triplet combinations summing to zero.</span></span><br><span class="line">          <span class="keyword">end</span> = <span class="keyword">end</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (a+b+c &gt; <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">         <span class="keyword">end</span> = <span class="keyword">end</span> - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">         start = start + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>伪代码还挺容易理解的。</p>
<h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><p>因为知乎上有人宣称证明了哥德巴赫猜想的原因，这两天还特意了解了下猜想证明的历史，“1+2”、“1+3”之类的证明，虽然一点也没看懂。感觉数学真的很有魅力，严谨清晰的逻辑，精妙完美的结论，自然界中的一切每时每刻都在遵循着其中的规律运行，更加感慨于人类的智慧，都找不到合适的赞美的词了。</p>
<p>“超越数”、“黄金分割”、“哥德巴赫猜想”、“黎曼猜想”…</p>
<p>停下思绪，回到现实：<strong>当你理解它的时候你觉得进入了天堂，当你不理解它的时候你仿佛进入了地狱</strong>，看哭了…</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot基础学习笔记</title>
    <url>/2019/01/01/SpringBoot%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="内容概要"><a href="#内容概要" class="headerlink" title="内容概要"></a>内容概要</h2><ol>
<li>SpringBoot入门</li>
<li>SpringBoot配置</li>
<li>SpringBoot与日志</li>
<li>SpringBoot与Web开发</li>
<li>SpringBoot与Docker</li>
<li>SpringBoot与数据访问</li>
<li>SpringBoot启动配置原理</li>
<li>SpringBoot自定义Starters</li>
<li>SpringBoot与缓存</li>
<li>SpringBoot与消息</li>
<li>SpringBoot与检索</li>
<li>SpringBoot与任务</li>
<li>SpringBoot与安全</li>
<li>SpringBoot与分布式</li>
<li>SpringBoot与开发热部署</li>
<li>SpringBoot与监控管理</li>
</ol>
<h2 id="第一章-SpringBoot入门"><a href="#第一章-SpringBoot入门" class="headerlink" title="第一章 SpringBoot入门"></a>第一章 SpringBoot入门</h2><h3 id="1-1-SpringBoot简介"><a href="#1-1-SpringBoot简介" class="headerlink" title="1.1 SpringBoot简介"></a>1.1 SpringBoot简介</h3><p>特点：约定大于配置；去繁从简；</p>
<p>背景： </p>
<p>J2EE笨重的开发；</p>
<p>繁多的配置；</p>
<p>低下的效率；</p>
<p>复杂的部署；</p>
<p>第三方技术集成难度大；</p>
<p>解决方案：</p>
<p>SpringBoot：一站式J2EE的解决方案；</p>
<p>SpringCloud：分布式整体解决方案；</p>
<p>优点：</p>
<p>快速创建可独立运行的Spring项目并与主流框架集成；</p>
<p>starters自动依赖管理及版本控制；</p>
<p>使用嵌入的Servlet容器，应用无需打包；</p>
<p>大量的自动配置，简化开发，也可修改默认值；</p>
<p>无需配置XML，无代码生成，开箱即用；</p>
<p>准生产环境的运行时应用监控；</p>
<p>是对Spring技术栈的一个整合。</p>
<hr>
<h3 id="1-2-微服务"><a href="#1-2-微服务" class="headerlink" title="1.2 微服务"></a>1.2 微服务</h3><p>单体应用： 开发，测试，部署简单；</p>
<p>微服务：功能拆分，灵活配置，通信协作。</p>
<p>SpringBoot官网 &gt; 微服务文档</p>
<hr>
<h3 id="1-3-开发环境配置"><a href="#1-3-开发环境配置" class="headerlink" title="1.3 开发环境配置"></a>1.3 开发环境配置</h3><ol>
<li>JDK版本；</li>
<li>maven版本；</li>
<li>开发工具选择；</li>
<li>框架版本选择；</li>
</ol>
<hr>
<h3 id="1-4-第一个应用：HelloWorld"><a href="#1-4-第一个应用：HelloWorld" class="headerlink" title="1.4 第一个应用：HelloWorld"></a>1.4 第一个应用：HelloWorld</h3><ol>
<li>创建一个Maven项目；</li>
<li>导入SpringBoot相关依赖；</li>
<li>编写主程序，启动SpringBoot应用；</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApp<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>编写业务逻辑，服务；</li>
<li>运行主程序测试；</li>
<li>打包jar包：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行jar包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar xxx.jar</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="1-5-HelloWorld原理探究"><a href="#1-5-HelloWorld原理探究" class="headerlink" title="1.5 HelloWorld原理探究"></a>1.5 HelloWorld原理探究</h3><p>POM文件：</p>
<ol>
<li>父项目：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">父项目：</span><br></pre></td></tr></table></figure>

<p>SpringBoot的<strong>版本仲裁中心</strong>，导入依赖不需要写版本号。</p>
<ol>
<li>导入的依赖：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>spring-boot-starter-web：</p>
<p>场景启动器：帮我们导入web模块正常运行所需的依赖的组件；</p>
<p>将所有的功能场景抽取出来，做成启动器，只需要在项目中导入相关的starter，所有的依赖都会被导入，版本由spring-boot自动管理。</p>
<hr>
<h3 id="1-6-主程序类原理探究"><a href="#1-6-主程序类原理探究" class="headerlink" title="1.6 主程序类原理探究"></a>1.6 主程序类原理探究</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 18-9-9 下午2:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApp<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@SpringBootApplication标注在某个类上，指定SpringBoot的主配置类，由这个类来启动SpringBoot应用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">), @<span class="title">Filter</span>(</span></span><br><span class="line"><span class="class">    <span class="title">type</span> </span>= FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">)&#125;</span></span><br></pre></td></tr></table></figure>

<p>@SpringBootConfiguration：标注在某个类上，表示该类是SpringBoot的配置类。</p>
<p>@Configuration：配置类上标注该类。配置类也是一个组件：@Component；</p>
<p>@EnableAutoConfiguration：开启自动配置，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">需要配置的东西由SpringBoot自动配置。</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@AutoConfigurationPackage</span><br><span class="line">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@AutoConfigurationPackage：自动配置包，给容器导入一个组件，导入的组件由AutoConfigurationPackage.Registrar；</span><br><span class="line"></span><br><span class="line">将主配置类所在的及以下所有的子包里的所有组件添加到Spring容器中。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;Registrar<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">AutoConfigurationPackage</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Import：给容器中导入一些组件：AutoConfigurationImportSelector：选择哪些组件导入。</span><br><span class="line"></span><br><span class="line">	给容器中导入自动配置类（xxxAutoConfiguration）：给容器中导入场景需要的所有的组件并配置好这些组件。</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com/springboot/20180909151509.png" alt="配置类"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="keyword">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="keyword">this</span>.getBeanClassLoader());</span><br><span class="line">    Assert.notEmpty(configurations, <span class="string">"No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct."</span>);</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SpringBoot启动的时候从类路径下META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值导入到Spring容器中，自动配置类生效。</strong></p>
<p>需要自己指定的配置，已经由配置类自动配置好。</p>
<p>org/springframework/boot/spring-boot-autoconfigure/2.0.4.RELEASE/spring-boot-autoconfigure-2.0.4.RELEASE.jar!/META-INF/spring.factories</p>
<p><img src="https://image.youyou-2608.com/springboot/google-chrome_20180909152808.png" alt="自动配置类"></p>
<hr>
<h3 id="1-7-SpringBoot项目初始化器"><a href="#1-7-SpringBoot项目初始化器" class="headerlink" title="1.7 SpringBoot项目初始化器"></a>1.7 SpringBoot项目初始化器</h3><p>SpringBoot项目向导：</p>
<p><strong>IDEA &gt; New Project &gt; Spring Initializer &gt; 项目详情 &gt; 导入相关场景依赖。</strong></p>
<p>@RestController注解：</p>
<p>@ResponseBody和@RequestMapping注解组合。</p>
<ol>
<li>自动生成主程序；</li>
<li>/resources中目录结构：<ol>
<li>static：保存静态资源；</li>
<li>templates：存所有的模板页面(使用嵌入的tomcat，不支持JSP页面，但是可以使用模板引擎)；</li>
<li>application.properties：SpringBoot的默认配置文件。</li>
</ol>
</li>
</ol>
<hr>
<h2 id="第二章-SpringBoot配置文件"><a href="#第二章-SpringBoot配置文件" class="headerlink" title="第二章 SpringBoot配置文件"></a>第二章 SpringBoot配置文件</h2><h3 id="2-1-SpringBoot配置文件"><a href="#2-1-SpringBoot配置文件" class="headerlink" title="2.1 SpringBoot配置文件"></a>2.1 SpringBoot配置文件</h3><p>SpringBoot使用全局配置文件，配置文件名是固定的。</p>
<ul>
<li>application.properties；</li>
<li>application.yml。</li>
</ul>
<p>配置文件的作用：<strong>修改SpringBoot默认配置。</strong></p>
<p>YAML：不仅仅是一个标记语言，以数据为中心，比json和xml更适合做配置文件。</p>
<p>YAML：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-2-YAML基本语法"><a href="#2-2-YAML基本语法" class="headerlink" title="2.2 YAML基本语法"></a>2.2 YAML基本语法</h3><p>key: value    表示键值对，冒号之后的空格必须有的，以空格来控制层级关系。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line">	<span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">	<span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure>

<p><strong>属性和值大小写敏感。</strong></p>
<p>字面量：字符串默认不加单引号和双引号，<strong>双引号会转义特殊字符</strong>，<strong>单引号会转义特殊字符</strong>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">k:</span> <span class="string">v</span></span><br></pre></td></tr></table></figure>

<p>对象(属性和值)：本质是键值对。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span></span><br><span class="line">	<span class="attr">name:</span> <span class="string">张三</span></span><br><span class="line">	<span class="attr">age:</span> <span class="number">14</span></span><br></pre></td></tr></table></figure>

<p>行内写法：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span> <span class="string">&#123;name:</span> <span class="string">张三,age:</span> <span class="number">15</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p>数组(List, Set)：</p>
<p>用-表示数组中的一个元素。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure>

<p>行内写法：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-1配置文件注入："><a href="#2-2-1配置文件注入：" class="headerlink" title="2.2.1配置文件注入："></a>2.2.1配置文件注入：</h4><p>application.yml文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">张三</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">alive:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2018</span><span class="string">/09/11</span></span><br><span class="line">  <span class="attr">classes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">map:</span></span><br><span class="line">    <span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dog</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>JavaBean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.po;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 18-9-11 下午8:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> alive;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; classes;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", alive="</span> + alive +</span><br><span class="line">                <span class="string">", birth="</span> + birth +</span><br><span class="line">                <span class="string">", classes="</span> + classes +</span><br><span class="line">                <span class="string">", map="</span> + map +</span><br><span class="line">                <span class="string">", dog="</span> + dog +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以导入配置文件处理器之后，编写配置文件有IDE智能提示。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>@ConfigurationProperties(prefix = “person”)获取配置文件的值。</p>
<p><strong>application.properties乱码问题：file encoding勾选将properties配置文件转换成ascii码。</strong></p>
<p>配置文件的旧写法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lastName"</span> <span class="attr">value</span>=<span class="string">"zhagsa"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-2-Value注入值"><a href="#2-2-2-Value注入值" class="headerlink" title="2.2.2 @Value注入值"></a>2.2.2 @Value注入值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;11*2&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"true"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> alive;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; classes;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-3-Value和-ConfigurationProperties获取值比较："><a href="#2-2-3-Value和-ConfigurationProperties获取值比较：" class="headerlink" title="2.2.3 @Value和@ConfigurationProperties获取值比较："></a>2.2.3 @Value和@ConfigurationProperties获取值比较：</h4><table>
<thead>
<tr>
<th></th>
<th>@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td>批量注入配置文件中的属性</td>
<td>单个指定变量的值</td>
</tr>
<tr>
<td>松散绑定</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<h4 id="2-2-4-Value和-ConfigurationProperties的比较"><a href="#2-2-4-Value和-ConfigurationProperties的比较" class="headerlink" title="2.2.4 @Value和@ConfigurationProperties的比较"></a>2.2.4 @Value和@ConfigurationProperties的比较</h4><p><strong>如果只是在某个业务逻辑中需要获取一下配置文件中的值，那就用@Value；如果专门编写了Java bean和配置文件进行映射，就直接使用@ConfigurationProperties。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 18-9-12 下午9:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demo.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-3-PropertySource和-ImportSource"><a href="#2-3-PropertySource和-ImportSource" class="headerlink" title="2.3 @PropertySource和@ImportSource"></a>2.3 @PropertySource和@ImportSource</h3><p><strong>@ConfigurationProperties默认从全局配置文件中获取值。</strong></p>
<h4 id="2-3-1-PropertySource获取配置文件的值："><a href="#2-3-1-PropertySource获取配置文件的值：" class="headerlink" title="2.3.1 @PropertySource获取配置文件的值："></a>2.3.1 @PropertySource获取配置文件的值：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="line">@PropertySource(value = &#123;&quot;classpath:person.properties&quot;&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="2-3-2-ImportSource：导入Spring配置文件，是配置文件中的配置生效。"><a href="#2-3-2-ImportSource：导入Spring配置文件，是配置文件中的配置生效。" class="headerlink" title="2.3.2 @ImportSource：导入Spring配置文件，是配置文件中的配置生效。"></a>2.3.2 @ImportSource：导入Spring配置文件，是配置文件中的配置生效。</h4><p>SpringBoot默认没有加载Spring配置文件，手动编写的配置文件也无法识别，想让配置文件生效，将@ImportSource标注在主配置类上。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demoService"</span> <span class="attr">class</span>=<span class="string">"com.demo.service.DemoService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demoServiceTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> hasDemoService = applicationContext.containsBean(<span class="string">"demoService"</span>);</span><br><span class="line">    System.out.println(hasDemoService);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-3-SpringBoot推荐的添加组件方式"><a href="#2-3-3-SpringBoot推荐的添加组件方式" class="headerlink" title="2.3.3 SpringBoot推荐的添加组件方式"></a>2.3.3 SpringBoot推荐的添加组件方式</h4><p>SpringBoot推荐给容器中添加组件的方式：使用全注解，@Configuration标注配置类。</p>
<p>@Bean：<strong><u>将方法的返回值添加到容器中，组件的默认id就是方法名。</u></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo.service.DemoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 18-9-12 下午9:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span> 将方法的返回值添加到容器中，组件的默认id就是方法名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DemoService <span class="title">demoService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给容器中添加组件"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DemoService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-4-配置文件占位符"><a href="#2-4-配置文件占位符" class="headerlink" title="2.4 配置文件占位符"></a>2.4 配置文件占位符</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">张三$&#123;random.value&#125;</span></span><br><span class="line">  <span class="attr">age:</span> <span class="string">$&#123;random.int&#125;</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2018</span><span class="string">/09/11</span></span><br><span class="line">  <span class="attr">map:</span></span><br><span class="line">    <span class="attr">k1:</span> <span class="string">$&#123;random.value&#125;</span></span><br><span class="line">    <span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;person.hello:defau&#125;</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">alive:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">classes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">v2</span></span><br></pre></td></tr></table></figure>

<ol>
<li>随机数：</li>
</ol>
<p>${random.value}，${random.int}，${random.long}，${random.int(10)}，${random.int[1,10]}</p>
<ol>
<li>占位符获取配置之前的值，${app.name:默认值}</li>
</ol>
<hr>
<h3 id="2-5-Profile多环境支持"><a href="#2-5-Profile多环境支持" class="headerlink" title="2.5 Profile多环境支持"></a>2.5 Profile多环境支持</h3><blockquote>
<p>profile为不同环境提供不同配置的功能。</p>
</blockquote>
<ol>
<li><p>多profile文件的方式：</p>
<p>在主配置文件编写的时候，文件名可以是application-{profile}.properties/application-{profile}.yml；</p>
<p>SpringBoot默认使用全局环境配置</p>
</li>
<li><p>激活指定profile：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<p><strong>命令行方式：</strong></p>
<p>–spring.profiles.active=dev/prod</p>
<p><strong>虚拟机参数：</strong></p>
<p>-Dspring.profiles.active=dev/prod</p>
</li>
<li><p>yaml支持文档块的方式：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">     <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>见下图：<img src="https://image.youyou-2608.com/springboot/20180913201726.jpg" alt="厉害了"></p>
<hr>
<h3 id="2-6-配置文件加载位置"><a href="#2-6-配置文件加载位置" class="headerlink" title="2.6 配置文件加载位置"></a>2.6 配置文件加载位置</h3><p>SpringBoot启动会扫描以下位置的application.properties或者application.yml文件作为SpringBoot的默认配置文件：</p>
<ul>
<li>file：./config/</li>
<li>file：./</li>
<li>classpath：/config/</li>
<li>classpath：/</li>
</ul>
<p><strong>以上位置优先级从高到低。所有位置的配置文件都会被加载，高优先级的配置会覆盖低优先级的配置，高优先级和低优先级配置文件形成互补配置。</strong></p>
<p>server.context-path=/config02 -&gt; <a href="http://localhost:8080/config02/hello.do" target="_blank" rel="noopener">http://localhost:8080/config02/hello.do</a></p>
<p><strong>还可以通过spring.config.location来改变默认的配置文件位置(项目打包后可以使用命令行参数的形式启动项目时候来指定配置文件的位置，指定的配置文件和默认加载的配置文件会形成互补配置)。</strong></p>
<p>见下图：</p>
<p><img src="https://image.youyou-2608.com/springboot/20180913202351.jpg" alt="图片丢失"></p>
<hr>
<h3 id="2-7-外部配置文件加载顺序"><a href="#2-7-外部配置文件加载顺序" class="headerlink" title="2.7 外部配置文件加载顺序"></a>2.7 外部配置文件加载顺序</h3><p>SpringBoot也可以从以下位置加载配置文件，优先级从高到低，<strong>高优先级的配置会覆盖低优先级的配置，高低优先级的配置会形成互补配置</strong>。</p>
<ol>
<li><a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#using-boot-devtools-globalsettings" target="_blank" rel="noopener">Devtools global settings properties</a> on your home directory (<code>~/.spring-boot-devtools.properties</code> when devtools is active).</li>
<li><a href="https://docs.spring.io/spring/docs/5.0.9.RELEASE/javadoc-api/org/springframework/test/context/TestPropertySource.html" target="_blank" rel="noopener"><code>@TestPropertySource</code></a> annotations on your tests.</li>
<li><a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/api/org/springframework/boot/test/context/SpringBootTest.html" target="_blank" rel="noopener"><code>@SpringBootTest#properties</code></a> annotation attribute on your tests.</li>
<li>Command line arguments.</li>
<li>Properties from <code>SPRING_APPLICATION_JSON</code> (inline JSON embedded in an environment variable or system property).</li>
<li><code>ServletConfig</code> init parameters.</li>
<li><code>ServletContext</code> init parameters.</li>
<li>JNDI attributes from <code>java:comp/env</code>.</li>
<li>Java System properties (<code>System.getProperties()</code>).</li>
<li>OS environment variables.</li>
<li>A <code>RandomValuePropertySource</code> that has properties only in <code>random.*</code>.</li>
<li><a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features-external-config-profile-specific-properties" target="_blank" rel="noopener">Profile-specific application properties</a> outside of your packaged jar (<code>application-{profile}.properties</code> and YAML variants).</li>
<li><a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features-external-config-profile-specific-properties" target="_blank" rel="noopener">Profile-specific application properties</a> packaged inside your jar (<code>application-{profile}.properties</code> and YAML variants).</li>
<li>Application properties outside of your packaged jar (<code>application.properties</code> and YAML variants).</li>
<li>Application properties packaged inside your jar (<code>application.properties</code> and YAML variants).</li>
<li><a href="https://docs.spring.io/spring/docs/5.0.9.RELEASE/javadoc-api/org/springframework/context/annotation/PropertySource.html" target="_blank" rel="noopener"><code>@PropertySource</code></a> annotations on your <code>@Configuration</code> classes.</li>
<li>Default properties (specified by setting <code>SpringApplication.setDefaultProperties</code>).</li>
</ol>
<p>由jar包外向jar包内进行查找。</p>
<p>命令行参数（多个参数用空格分开）；</p>
<ul>
<li>java -jar xxx.jar –server.port=8081 server.context.path=/ab</li>
</ul>
<p>优先加载带profile的配置文件。</p>
<ul>
<li>jar包外的application-{profile}或application-{yml}或不带spring.profile的配置文件；</li>
<li>jar包内的application-{profile}或application-{yml}或不带spring.profile的配置文件；</li>
</ul>
<p>再加载带不profile的配置文件。</p>
<ul>
<li>jar包外的application-{profile}或application-{yml}或不带spring.profile的配置文件；</li>
<li>jar包内的application-{profile}或application-{yml}或不带spring.profile的配置文件；</li>
</ul>
<ul>
<li>@Configuration注解类上的@PropertySource；</li>
<li>通过SpringApplication.setDefaultProperties指定的默认属性。</li>
</ul>
<p>详细参见SpringBoot官网：<a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features" target="_blank" rel="noopener">SpringBoot外部配置文件加载顺序</a></p>
<hr>
<h3 id="2-8-自动配置原理"><a href="#2-8-自动配置原理" class="headerlink" title="2.8 自动配置原理"></a>2.8 自动配置原理</h3><p>配置文件能写什么，怎么写？</p>
<p>自动配置原理：</p>
<ol>
<li>SpringBoot在启动的时候加载主配置类，开启了自动配置功能：@EnableAutoConfiguration；</li>
<li>@EnableAutoConfiguration的作用：<ol>
<li>利用@EnableAutoConfigurationImportSelector给容器导入一些组件；</li>
<li>可以查看selectImports中的内容；</li>
<li>List<string> configurations = getCandidateConfigurations(annotationMetadata, attributes) 方法；<ul>
<li>SpringFactoriesLoader.loadFactoryNames()；</li>
<li>扫描所有jar包类路径下：META-INF/spring.factories；</li>
<li>将扫描到的文件内容加载包装成properties对象。</li>
</ul>
</string></li>
</ol>
</li>
<li>每一个自动配置类进行功能的自动配置；</li>
<li>所有在配置文件中能配置的属性都在xxxProperties类中配置着，配置文件能配置什么都参照配置文件中的值；</li>
</ol>
<p>SpringBoot的特点：</p>
<ol>
<li>SpringBoot启动时会加载大量的自动配置类；</li>
<li>看SpringBoot有没有自动配置类；</li>
<li>如果有，不用自己再写自动配置类。</li>
<li>给容器中自动配置类添加组件的时候，会从properties类中读取某些属性，我们就可以在配置文件中指定这些属性的值。</li>
</ol>
<hr>
<h3 id="2-9-Conditional自动配置"><a href="#2-9-Conditional自动配置" class="headerlink" title="2.9 @Conditional自动配置"></a>2.9 @Conditional自动配置</h3><blockquote>
<p>自动配置类需要在一定条件下才能生效。</p>
</blockquote>
<p>注解的作用：必须是@Conditional指定的条件成立，才能给容器中添加组件，配置里面的所有内容才生效。</p>
<table>
<thead>
<tr>
<th>@Conditional扩展</th>
<th>作用(判断是否满足当前条件)</th>
</tr>
</thead>
<tbody><tr>
<td>@ConditionalOnJava</td>
<td>系统的Java版本是否符合要求</td>
</tr>
<tr>
<td>@ConditionalOnBean</td>
<td>容器中存在指定的bean</td>
</tr>
<tr>
<td>@ConditionalOnMissingBean</td>
<td>容器中不存在指定的bean</td>
</tr>
<tr>
<td>@ConditionalOnExpression</td>
<td>满足SpEL表达式</td>
</tr>
<tr>
<td>@ConditionalOnClass</td>
<td>容器中有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnMissingClass</td>
<td>容器中没有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnProperty</td>
<td>系统中指定属性是有指定的值</td>
</tr>
<tr>
<td>@ConditionalOnResource</td>
<td>类路径下是否存在指定资源文件</td>
</tr>
<tr>
<td>@ConditionalOnWebApplication</td>
<td>当前是web环境</td>
</tr>
<tr>
<td>@ConditionalOnNotWebApplication</td>
<td>当前不是web环境</td>
</tr>
<tr>
<td>@ConditionalOnJndi</td>
<td>JNDI存在指定项</td>
</tr>
<tr>
<td>@ConditionalOnSingleCandidate</td>
<td>容器中只有一个指定的bean，或者这个bean是首选的bean</td>
</tr>
</tbody></table>
<p>自动配置文件：org/springframework/boot/spring-boot-autoconfigure/2.0.5.RELEASE/spring-boot-autoconfigure-2.0.5.RELEASE.jar!/META-INF/spring.factories</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.core.ReactorCoreAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityRequestMatcherProviderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span><br></pre></td></tr></table></figure>

<p>开启SpringBoot的debug，可以通过debug=true让控制台打印自动配置报告，便可以方便的知道哪些自动配置类生效了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">============================</span><br><span class="line">CONDITIONS EVALUATION REPORT</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   CodecsAutoConfiguration matched:</span><br><span class="line">      - @ConditionalOnClass found required class &apos;org.springframework.http.codec.CodecConfigurer&apos;; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)</span><br><span class="line"></span><br><span class="line">   CodecsAutoConfiguration.JacksonCodecConfiguration matched:</span><br><span class="line">      - @ConditionalOnClass found required class &apos;com.fasterxml.jackson.databind.ObjectMapper&apos;; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Negative matches:</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   ActiveMQAutoConfiguration:</span><br><span class="line">      Did not match:</span><br><span class="line">         - @ConditionalOnClass did not find required classes &apos;javax.jms.ConnectionFactory&apos;, &apos;org.apache.activemq.ActiveMQConnectionFactory&apos; (OnClassCondition)</span><br><span class="line"></span><br><span class="line">   AopAutoConfiguration:</span><br><span class="line">      Did not match:</span><br><span class="line">         - @ConditionalOnClass did not find required classes &apos;org.aspectj.lang.annotation.Aspect&apos;, &apos;org.aspectj.lang.reflect.Advice&apos;, &apos;org.aspectj.weaver.AnnotatedElement&apos; (OnClassCondition)</span><br></pre></td></tr></table></figure>

<h2 id="第三章-SpringBoot与日志"><a href="#第三章-SpringBoot与日志" class="headerlink" title="第三章 SpringBoot与日志"></a>第三章 SpringBoot与日志</h2><hr>
<h3 id="3-1-日志框架"><a href="#3-1-日志框架" class="headerlink" title="3.1 日志框架"></a>3.1 日志框架</h3><ul>
<li>System.out.println(“welcome!”);  不利于代码维护；</li>
<li>使用日志框架；</li>
<li>加入异步，自动归档等功能；</li>
<li>与程序耦合控制；</li>
<li>统一的接口层：日志门面。</li>
</ul>
<p>常见的日志框架：</p>
<ul>
<li>JUL（java.util.logging）；</li>
<li>JCL；</li>
<li>jboss-logging；</li>
<li>logback；</li>
<li>log4j；</li>
<li>log4j2；</li>
<li>slf4j；</li>
</ul>
<p>日志门面：SLF4J；</p>
<p>日志实现：Logback。</p>
<p>SpringBoot：底层是Spring框架，SpringBoot框架默认是JCL</p>
<p><strong>SpringBoot选用SLF4J，Logback。</strong></p>
<hr>
<h3 id="3-2-SLF4J的使用"><a href="#3-2-SLF4J的使用" class="headerlink" title="3.2 SLF4J的使用"></a>3.2 SLF4J的使用</h3><hr>
<h4 id="3-2-1-如何在系统中使用SLF4J"><a href="#3-2-1-如何在系统中使用SLF4J" class="headerlink" title="3.2.1 如何在系统中使用SLF4J"></a>3.2.1 如何在系统中使用SLF4J</h4><p>开发的时候，日志记录的方法调用，应该直接调用日志抽象层里的方法，而不是日志的实现类。</p>
<p>给系统导入slf4j的jar和logback的实现jar：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图示：</p>
<p><img src="https://image.youyou-2608.com/springboot/concrete-bindings.png" alt="具体关系"></p>
<p>每一个日志框架都有自己的配置文件，使用slf4j以后，<strong>配置文件还是作为日志实现框架本身的配置文件。</strong></p>
<hr>
<h4 id="3-2-2-遗留问题"><a href="#3-2-2-遗留问题" class="headerlink" title="3.2.2 遗留问题"></a>3.2.2 遗留问题</h4><p>a（slf4j + logback）：Spring(commons-logging)，Hibernate(jboss-logging)</p>
<p>统一日志记录，即便是别的框架也使用同一日志框架。</p>
<p><img src="https://image.youyou-2608.com/springboot/legacy.png" alt></p>
<p>如何让系统中所有的日志都统一到slf4j：</p>
<ol>
<li><u>将系统中其他日志框架排除在外；</u></li>
<li><u>用中间适配层包替换原有日志框架；</u></li>
<li><u>导入slf4j其他的实现。</u></li>
</ol>
<hr>
<h3 id="3-3-SpringBoot日志关系"><a href="#3-3-SpringBoot日志关系" class="headerlink" title="3.3 SpringBoot日志关系"></a>3.3 SpringBoot日志关系</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SpringBoot的日志功能：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SpringBoot底层依赖关系（pom.xml文件，show diagram查看maven项目依赖关系）：</p>
<p><img src="https://image.youyou-2608.com/springboot/irei.png" alt></p>
<ol>
<li>SpringBoot底层也是用slf4j + logback的方式进行日志记录；</li>
<li>SpringBoot也把其他的日志都替换成了slf4j；</li>
<li>中间替换包；</li>
<li>如果要引入其他框架，一定要把这个框架的默认日志依赖移除。</li>
</ol>
<p><strong>SpringBoot自动适应所有的日志框架，而且底层使用了slf4j + logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖移除掉。</strong></p>
<hr>
<h3 id="3-4-SpringBoot默认日志配置"><a href="#3-4-SpringBoot默认日志配置" class="headerlink" title="3.4 SpringBoot默认日志配置"></a>3.4 SpringBoot默认日志配置</h3><p>日志的级别，由低到高，可以调整日志输出的级别：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"><span class="comment">//日志的级别，由低到高</span></span><br><span class="line">logger.trace(<span class="string">"这是日志..."</span>);</span><br><span class="line">logger.debug(<span class="string">"这是debug日志..."</span>);</span><br><span class="line">logger.info(<span class="string">"这是Info信息..."</span>);</span><br><span class="line">logger.warn(<span class="string">"这是警告..."</span>);</span><br><span class="line">logger.error(<span class="string">"这是错误信息..."</span>);</span><br></pre></td></tr></table></figure>

<p>SpringBoot默认日志输出级别为info。</p>
<p>可以在application.yml中自定义日志输出级别： logging.level.com.hape.nmsl=trace</p>
<p>在当前项目下生成日志文件：logging.file=springboot.log</p>
<p>不指定路径在项目路径下生成日志文件。</p>
<p>logfile优先级高于logpath。</p>
<p>logpath：指定日志文件的路径，默认文件名spring.log。</p>
<p>logging.pattern.console：控制台输出日志的格式。</p>
<p>logging.pattern.file：日志文件输出格式。</p>
<p>日志输出格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%d：表示日期时间；</span><br><span class="line"></span><br><span class="line">%thread：表示线程号；</span><br><span class="line"></span><br><span class="line">%-5level：级别从左显示5个字符宽度；</span><br><span class="line"></span><br><span class="line">%logger&#123;50&#125;：表示logger名字最长50个字符，否则按照句点分割；</span><br><span class="line"></span><br><span class="line">%msg：日志信息；</span><br><span class="line"></span><br><span class="line">%n：换行符。</span><br></pre></td></tr></table></figure>

<p>日志格式配置实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-5-指定日志文件和日志profile功能"><a href="#3-5-指定日志文件和日志profile功能" class="headerlink" title="3.5 指定日志文件和日志profile功能"></a>3.5 指定日志文件和日志profile功能</h3><p>给类路径下放上每个日志框架自己配置文件即可，</p>
<blockquote>
<p>Because the standard <code>logback.xml</code> configuration file is loaded too early, you cannot use extensions in it. You need to either use <code>logback-spring.xml</code> or define a <code>logging.config</code> property.</p>
</blockquote>
<table>
<thead>
<tr>
<th>Logging System</th>
<th>Customization</th>
</tr>
</thead>
<tbody><tr>
<td>Logback</td>
<td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code>, or <code>logback.groovy</code></td>
</tr>
<tr>
<td>Log4j2</td>
<td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td>
</tr>
<tr>
<td>JDK (Java Util Logging)</td>
<td><code>logging.properties</code></td>
</tr>
</tbody></table>
<p>logback.xml：直接被日志框架识别；</p>
<p><strong>logback-spring.xml：日志框架不直接加载配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级功能profile。</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">可以指定某一段配置只在某个环境下生效</span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev, staging"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- configuration to be enabled when the "dev" or "staging" profiles are active--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!production"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- configuration to be enabled when the "production" profile is not active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-6-切换日志框架"><a href="#3-6-切换日志框架" class="headerlink" title="3.6 切换日志框架"></a>3.6 切换日志框架</h3><p>可以按照slf4j适配图进行相关的切换。</p>
<ol>
<li>排除不使用的包；</li>
<li>导入相关的适配包；</li>
</ol>
<p>不推荐更换SpringBoot默认使用的日志记录框架。</p>
<hr>
<h2 id="第四章-SpringBoot与Web开发"><a href="#第四章-SpringBoot与Web开发" class="headerlink" title="第四章 SpringBoot与Web开发"></a>第四章 SpringBoot与Web开发</h2><p>使用SpringBoot：</p>
<ul>
<li>创建SpringBoot应用，选中需要的模块；</li>
<li>SpringBoot自动配置好场景，需要在配置文件中指定少量配置，即可运行程序；</li>
<li>编写相关的业务逻辑。</li>
</ul>
<p>依赖于SpringBoot的自动配置。</p>
<hr>
<h3 id="4-1-webjar与静态资源映射规则"><a href="#4-1-webjar与静态资源映射规则" class="headerlink" title="4.1 webjar与静态资源映射规则"></a>4.1 webjar与静态资源映射规则</h3><p>SpringBoot对静态资源的映射规则：（WebMvcAutoConfiguration.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">    CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache()</span><br><span class="line">        .getCachecontrol().toHttpCacheControl();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry</span><br><span class="line">                                             .addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                                             .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod))</span><br><span class="line">                                             .setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(</span><br><span class="line">            registry.addResourceHandler(staticPathPattern)</span><br><span class="line">            .addResourceLocations(getResourceLocations(</span><br><span class="line">                <span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">            .setCachePeriod(getSeconds(cachePeriod))</span><br><span class="line">            .setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>所有的/webjars/**，都到classpath:/META-INF/resources/webjars找资源；</p>
<p>webjars以jar包的方式引入静态资源。</p>
<p><img src="https://image.youyou-2608.com/springboot/webjars.png" alt></p>
</li>
</ul>
<p>在访问的时候只需要写webjars下的资源名称即可。（<a href="http://localhost:8080/webjars/jquery/3.3.1-1/jquery.js）" target="_blank" rel="noopener">http://localhost:8080/webjars/jquery/3.3.1-1/jquery.js）</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1-1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>访问当前项目下的任何资源（静态资源的文件夹）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">"classpath:/META-INF/resources/", </span><br><span class="line">"classpath:/resources/",</span><br><span class="line">"classpath:/static/",</span><br><span class="line">"classpath:/public/"</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置欢迎页</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line">        <span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext),</span><br><span class="line">        applicationContext, getWelcomePage(),</span><br><span class="line">        <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>静态文件夹下的所有index.html页面；</p>
<p>映射到 private String staticPathPattern = “/**”;</p>
</li>
</ul>
<ul>
<li><p>配置喜欢的图标</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"spring.mvc.favicon.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FaviconConfiguration</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FaviconConfiguration</span><span class="params">(ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>映射到**favicon.ico静态资源文件夹。</p>
</li>
</ul>
<hr>
<h3 id="4-2-引入Thymeleaf模板引擎"><a href="#4-2-引入Thymeleaf模板引擎" class="headerlink" title="4.2 引入Thymeleaf模板引擎"></a>4.2 引入Thymeleaf模板引擎</h3><blockquote>
<p>thymeleaf, jsp, freemaker, velocity</p>
</blockquote>
<p>SpringBoot推荐的thymeleaf：</p>
<ol>
<li>引入thymeleaf；</li>
<li>自定义thymeleaf版本。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.2.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--布局功能支持程序  thymeleaf3  layout2以上版本适配--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thymeleaf.layout.dialect.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">thymeleaf.layout.dialect.version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-3-Thymeleaf语法"><a href="#4-3-Thymeleaf语法" class="headerlink" title="4.3 Thymeleaf语法"></a>4.3 Thymeleaf语法</h3><p>默认请求路径：classpath:templates/xxx.html</p>
<p>文档地址：<a href="https://www.thymeleaf.org/documentation.html" target="_blank" rel="noopener">Thymeleaf参考文档</a></p>
<p>使用方法：</p>
<ul>
<li><p>导入Thymeleaf名称空间；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http:y//www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用Thymeleaf语法；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span>显示欢迎信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>thymeleaf语法规则：</p>
<ul>
<li><p>th:text：改变text文本值；</p>
</li>
<li><p>th:任意属性都可以替换；</p>
</li>
<li><p>文档第十章/Attributes/优先级；</p>
<p><img src="https://image.youyou-2608.com/springboot/DeepinScreenshot_select-area_20181001125611.png" alt></p>
</li>
</ul>
</li>
<li><p>thymeleaf表达式；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Simple expressions:</span><br><span class="line">    Variable Expressions: $&#123;...&#125;</span><br><span class="line">    Selection Variable Expressions: *&#123;...&#125;</span><br><span class="line">    Message Expressions: #&#123;...&#125;</span><br><span class="line">    Link URL Expressions: @&#123;...&#125;</span><br><span class="line">    Fragment Expressions: ~&#123;...&#125;</span><br><span class="line">Literals</span><br><span class="line">    Text literals: &apos;one text&apos; , &apos;Another one!&apos; ,...</span><br><span class="line">    Number literals: 0 , 34 , 3.0 , 12.3 ,...</span><br><span class="line">    Boolean literals: true , false</span><br><span class="line">    Null literal: null</span><br><span class="line">    Literal tokens: one , sometext , main ,...</span><br><span class="line">Text operations:</span><br><span class="line">    String concatenation: +</span><br><span class="line">    Literal substitutions: |The name is $&#123;name&#125;|</span><br><span class="line">    Arithmetic operations:</span><br><span class="line">    Binary operators: + , - , * , / , %</span><br><span class="line">    Minus sign (unary operator): -</span><br><span class="line">Boolean operations:</span><br><span class="line">    Binary operators: and , or</span><br><span class="line">    Boolean negation (unary operator): ! , not</span><br><span class="line">Comparisons and equality:</span><br><span class="line">    Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span><br><span class="line">    Equality operators: == , != ( eq , ne )</span><br><span class="line">Conditional operators:</span><br><span class="line">    If-then: (if) ? (then)</span><br><span class="line">    If-then-else: (if) ? (then) : (else)</span><br><span class="line">    Default: (value) ?: (defaultvalue)</span><br><span class="line">Special tokens:</span><br><span class="line">	Page 17 of 106No-Operation: _</span><br></pre></td></tr></table></figure>

<p>内置对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ctx : the context object.</span><br><span class="line">#vars: the context variables.</span><br><span class="line">#locale : the context locale.</span><br><span class="line">#request : (only in Web Contexts) the HttpServletRequest object.</span><br><span class="line">#response : (only in Web Contexts) the HttpServletResponse object.</span><br><span class="line">#session : (only in Web Contexts) the HttpSession object.</span><br><span class="line">#servletContext : (only in Web Contexts) the ServletContext object.</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h3 id="4-4-SpringMVC自动配置功能"><a href="#4-4-SpringMVC自动配置功能" class="headerlink" title="4.4 SpringMVC自动配置功能"></a>4.4 SpringMVC自动配置功能</h3><p>SpringBoot文档地址：<a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications" target="_blank" rel="noopener">官方文档地址</a></p>
<h4 id="4-4-1-SpringMVC自动配置项"><a href="#4-4-1-SpringMVC自动配置项" class="headerlink" title="4.4.1 SpringMVC自动配置项"></a>4.4.1 SpringMVC自动配置项</h4><p>SpringMVC自动配置：</p>
<ul>
<li>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</li>
<li>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-static-content" target="_blank" rel="noopener">later in this document</a>)).</li>
<li>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</li>
<li>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-message-converters" target="_blank" rel="noopener">later in this document</a>).</li>
<li>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features-spring-message-codes" target="_blank" rel="noopener">later in this document</a>).</li>
<li>Static <code>index.html</code> support.</li>
<li>Custom <code>Favicon</code> support (covered <a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-favicon" target="_blank" rel="noopener">later in this document</a>).</li>
<li>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-web-binding-initializer" target="_blank" rel="noopener">later in this document</a>).</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(ViewResolver<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(<span class="title">name</span> </span>= <span class="string">"viewResolver"</span>, value = ContentNegotiatingViewResolver<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ContentNegotiatingViewResolver</span> <span class="title">viewResolver</span>(<span class="title">BeanFactory</span> <span class="title">beanFactory</span>) </span>&#123;</span><br><span class="line">    ContentNegotiatingViewResolver resolver = <span class="keyword">new</span> ContentNegotiatingViewResolver();</span><br><span class="line">    resolver.setContentNegotiationManager(</span><br><span class="line">        beanFactory.getBean(ContentNegotiationManager<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    <span class="comment">// ContentNegotiatingViewResolver uses all the other view resolvers to locate</span></span><br><span class="line">    <span class="comment">// a view so it should have a high precedence</span></span><br><span class="line">    resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">    <span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Converter&lt;?, ?&gt; converter : getBeansOfType(Converter<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">        registry.addConverter(converter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (GenericConverter converter : getBeansOfType(GenericConverter<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">        registry.addConverter(converter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Formatter&lt;?&gt; formatter : getBeansOfType(Formatter<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">        registry.addFormatter(formatter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.messageConvertersProvider.ifAvailable((customConverters) -&gt; converters</span><br><span class="line">                                               .addAll(customConverters.getConverters()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果用户有配置(@Bean，@Component)，则使用组合配置；</li>
</ul>
<h4 id="4-4-2-扩展SpringMVC配置"><a href="#4-4-2-扩展SpringMVC配置" class="headerlink" title="4.4.2 扩展SpringMVC配置"></a>4.4.2 扩展SpringMVC配置</h4><p>添加一个配置类并且继承自WebMvcConfigurerAdapter。</p>
<p>将hello.do请求映射到hello.html视图：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 18-10-1 下午1:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        super.addViewControllers(registry);</span></span><br><span class="line">        registry.addViewController(<span class="string">"/hello.do"</span>).setViewName(<span class="string">"/hello.html"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>WebMvcAutoConfiguration是SpringMVC的自动配置类；</li>
<li>在做其他自动配置时会导入：@Import(EnableWebMvcConfiguration.class)。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>容器中所有的WebMvcConfiguration都会被调用。</p>
<p>所有的配置都会共同起作用。</p>
</li>
</ul>
<h4 id="4-4-3-全面接管SpringMVC"><a href="#4-4-3-全面接管SpringMVC" class="headerlink" title="4.4.3 全面接管SpringMVC"></a>4.4.3 全面接管SpringMVC</h4><p>在配置类中添加@EnableWebMvc：丢弃所有的自动配置，手动配置所有的配置。</p>
<p>原理：</p>
<p>WebMvc：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;DelegatingWebMvcConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableWebMvc</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DelegatingWebMvcConfiguration：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>WebMvcAutoConfiguration：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = Type.SERVLET)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">DispatcherServlet</span>.<span class="title">class</span>, <span class="title">WebMvcConfigurer</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">//容器中缺少此组件，该自动配置生效</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(<span class="title">WebMvcConfigurationSupport</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureOrder</span>(<span class="title">Ordered</span>.<span class="title">HIGHEST_PRECEDENCE</span> + 10)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(</span>&#123; DispatcherServletAutoConfiguration<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ValidationAutoConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-5-引入资源"><a href="#4-5-引入资源" class="headerlink" title="4.5 引入资源"></a>4.5 引入资源</h3><p>SpringBoot中使用<strong>webjars</strong>引入jquery和bootstrap之类的资源：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;webjars/bootstrap/4.1.3/css/bootstrap.css&#125;"</span> <span class="attr">th:type</span>=<span class="string">"text/css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>即使更换项目访问名也可以正常加载静态资源。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 18-10-1 下午1:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        super.addViewControllers(registry);</span></span><br><span class="line">        registry.addViewController(<span class="string">"/hello.do"</span>).setViewName(<span class="string">"/hello.html"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"/hello.html"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurerAdapter <span class="title">webMvcConfigurerAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"/hello.html"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-6-国际化"><a href="#4-6-国际化" class="headerlink" title="4.6 国际化"></a>4.6 国际化</h3><ol>
<li><strong>编写国际化配置文件；</strong></li>
<li>使用ResourceBundleMessageSource管理国际化资源文件；</li>
<li>在页面使用fmt:message取出国际化内容。</li>
</ol>
<p>配置如下图：</p>
<p><img src="https://image.youyou-2608.com/springboot/international.png" alt></p>
<p>SpringBoot自动配置（MessageSourceAutoConfiguration.java）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="comment">//类路径下配置文件spring.messages</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.messages"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSourceProperties <span class="title">messageSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MessageSourceProperties();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MessageSourceProperties properties = messageSourceProperties();</span><br><span class="line">    ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;</span><br><span class="line">        <span class="comment">//设置国际化资源文件的基础名（去除国际语言代码）</span></span><br><span class="line">        messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(</span><br><span class="line">            StringUtils.trimAllWhitespace(properties.getBasename())));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (properties.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        messageSource.setDefaultEncoding(properties.getEncoding().name());</span><br><span class="line">    &#125;</span><br><span class="line">    messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());</span><br><span class="line">    Duration cacheDuration = properties.getCacheDuration();</span><br><span class="line">    <span class="keyword">if</span> (cacheDuration != <span class="keyword">null</span>) &#123;</span><br><span class="line">        messageSource.setCacheMillis(cacheDuration.toMillis());</span><br><span class="line">    &#125;</span><br><span class="line">    messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());</span><br><span class="line">    messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());</span><br><span class="line">    <span class="keyword">return</span> messageSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置配置文件地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.message=login</span><br></pre></td></tr></table></figure>

<p>页面中获取国际化资源：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">lable</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:message</span>=<span class="string">"#&#123;login.tip&#125;"</span>&gt;</span>Tips<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lable</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:message</span>=<span class="string">"#&#123;login.username&#125;"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lable</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:message</span>=<span class="string">"#&#123;login.password&#125;"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lable</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:message</span>=<span class="string">"#&#123;login.remember&#125;"</span>&gt;</span>remember<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>浏览器根据浏览器语言设置的信息自动切换国际化。</p>
<p>SpringMVC区域信息组件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mvc"</span>, name = <span class="string">"locale"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties</span><br><span class="line">        .getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    &#125;</span><br><span class="line">    AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">    localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    <span class="keyword">return</span> localeResolver;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认根据请求头获取的区域信息展示国际化信息。</span></span><br></pre></td></tr></table></figure>

<p><strong>可以在请求参数上携带区域信息实现国际化：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://localhost:8080/hello.do?language=zh_CN</span><br><span class="line">https://localhost:8080/hello.do?language=en_US</span><br></pre></td></tr></table></figure>

<p>手动配置区域信息解析器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.LocaleResolver;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 18-10-3 下午4:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>&#123;</span><br><span class="line">        String language = httpServletRequest.getParameter(<span class="string">"language"</span>);</span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(language)) &#123;</span><br><span class="line">            String[] regionInfo = language.split(<span class="string">"_"</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(regionInfo[<span class="number">0</span>], regionInfo[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-7-拦截器"><a href="#4-7-拦截器" class="headerlink" title="4.7 拦截器"></a>4.7 拦截器</h3><ul>
<li>PostMapping()：RestfulAPI注解；</li>
<li>开发期间禁用Thymeleaf的缓存：spring.thymeleaf.cache=false；</li>
<li>错误消息的显示；</li>
<li>防止表单重复提交，添加视图视图映射后，使用重定向。</li>
<li>使用拦截器进行身份校验；</li>
<li>编写拦截器，在配置类中注册拦截器。</li>
<li>页面中使用Thymeleaf获取值。</li>
</ul>
<hr>
<h3 id="4-8-CRUD实验"><a href="#4-8-CRUD实验" class="headerlink" title="4.8 CRUD实验"></a>4.8 CRUD实验</h3><h4 id="4-8-1-实验要求"><a href="#4-8-1-实验要求" class="headerlink" title="4.8.1 实验要求"></a>4.8.1 实验要求</h4><p>实验要求：</p>
<ol>
<li><p>RestfulAPI风格：</p>
<ol>
<li>URI：/资源名称/资源标识；</li>
<li>HTTP请求方式区分对资源的CRUD操作；</li>
</ol>
<table>
<thead>
<tr>
<th>操作</th>
<th>普通CRUD</th>
<th>RestfulCRUD</th>
</tr>
</thead>
<tbody><tr>
<td>查询</td>
<td>getEmp</td>
<td>emp—GET</td>
</tr>
<tr>
<td>添加</td>
<td>addEmp?xxx</td>
<td>emp—POST</td>
</tr>
<tr>
<td>修改</td>
<td>updateEmp?id=xxx&amp;xxx=xxx</td>
<td>emp/{id}—PUT</td>
</tr>
<tr>
<td>删除</td>
<td>deleteEmp?id=1</td>
<td>emp/{id}—DELETE</td>
</tr>
</tbody></table>
</li>
</ol>
<ol>
<li><p>实验的请求架构：</p>
<table>
<thead>
<tr>
<th></th>
<th>请求URI</th>
<th>请求方式</th>
</tr>
</thead>
<tbody><tr>
<td>查询所有的员工</td>
<td>emps</td>
<td>GET</td>
</tr>
<tr>
<td>查询某个员工</td>
<td>emp/{id}</td>
<td>GET</td>
</tr>
<tr>
<td>来到添加界面</td>
<td>emp</td>
<td>GET</td>
</tr>
<tr>
<td>添加员工</td>
<td>emp</td>
<td>POST</td>
</tr>
<tr>
<td>来到修改界面</td>
<td>emp/{id}</td>
<td>PUT</td>
</tr>
<tr>
<td>修改员工</td>
<td>emp</td>
<td>PUT</td>
</tr>
<tr>
<td>删除员工</td>
<td>emp/{id}</td>
<td>DELETE</td>
</tr>
</tbody></table>
</li>
</ol>
<h4 id="4-8-2-公共页面抽取—列表页"><a href="#4-8-2-公共页面抽取—列表页" class="headerlink" title="4.8.2 公共页面抽取—列表页"></a>4.8.2 公共页面抽取—列表页</h4><ol>
<li><p>利用Thymeleaf抽取公共页面；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line">&amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>“~{templatename::selector}”：模板名选择器；</p>
<p>~{templatename::fragmentname}：模板名：片断名。</p>
</li>
<li><p>默认效果：</p>
<p>insert片段都在div标签中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>三种引入功能片段的th属性：</p>
<ol>
<li><strong>th:insert：将公共片段整个插入到声明引入的元素中；</strong></li>
<li><strong>th:replace：将声明引入的元素替换为公共片段；</strong></li>
<li><strong>th:include：将被引入的片段的内容包含进这个标签中。</strong></li>
</ol>
</li>
</ol>
<hr>
<h4 id="4-8-3-链接高亮-amp-列表完成"><a href="#4-8-3-链接高亮-amp-列表完成" class="headerlink" title="4.8.3 链接高亮&amp;列表完成"></a>4.8.3 链接高亮&amp;列表完成</h4><p><img src="https://image.youyou-2608.com/springboot/paramterizable.png" alt></p>
<p><strong>实现方法：引入公共片段时传入相关参数，公共片段根据参数高亮相关部分。</strong></p>
<p>Thymeleaf日期工具对象(文档附录 &gt; dates)：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;#dates.format(date, &apos;dd/MMM/yyyy HH:mm&apos;)&#125;</span><br><span class="line">$&#123;#dates.arrayFormat(datesArray, &apos;dd/MMM/yyyy HH:mm&apos;)&#125;</span><br><span class="line">$&#123;#dates.listFormat(datesList, &apos;dd/MMM/yyyy HH:mm&apos;)&#125;</span><br><span class="line">$&#123;#dates.setFormat(datesSet, &apos;dd/MMM/yyyy HH:mm&apos;)&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="4-8-4-添加员工-gt-来到添加页面"><a href="#4-8-4-添加员工-gt-来到添加页面" class="headerlink" title="4.8.4 添加员工 &gt; 来到添加页面"></a>4.8.4 添加员工 &gt; 来到添加页面</h4><ol>
<li>添加表单：Bootstrap官网模板直接复制；</li>
<li>通过 *<em>添加 *</em>按钮跳转到添加页面；</li>
<li>使用th:each完成部门的遍历；</li>
</ol>
<hr>
<h4 id="4-8-5-添加员工-gt-完成添加"><a href="#4-8-5-添加员工-gt-完成添加" class="headerlink" title="4.8.5 添加员工 &gt; 完成添加"></a>4.8.5 添加员工 &gt; 完成添加</h4><ol>
<li>完成添加后 <strong>重定向</strong> 至列表页面（forward或者redirect）；</li>
<li>提交的数据格式问题：日期格式：<ol>
<li>日期格式化：SpringMVC将页面提交的值需要转换成指定的类型；</li>
<li><strong>在配置文件中自定义表单提交的日期格式。</strong></li>
</ol>
</li>
</ol>
<hr>
<h4 id="4-8-6-修改员工信息"><a href="#4-8-6-修改员工信息" class="headerlink" title="4.8.6 修改员工信息"></a>4.8.6 修改员工信息</h4><ol>
<li>配置HiddenHttpMethodFilter；</li>
</ol>
<hr>
<h4 id="4-8-7-删除员工"><a href="#4-8-7-删除员工" class="headerlink" title="4.8.7 删除员工"></a>4.8.7 删除员工</h4><hr>
<h3 id="4-9-定制错误页面"><a href="#4-9-定制错误页面" class="headerlink" title="4.9 定制错误页面"></a>4.9 定制错误页面</h3><ol>
<li><p>默认出错处理：返回一个默认的错误处理页面：在页面共享信息；</p>
</li>
<li><p>如果是其他客户端，默认响应一个json数据；</p>
</li>
<li><p>可以参照ErrorAutoConfiguration，错误处理的自动配置，在容器中添加如下组件：</p>
<ol>
<li><p>DefaultErrorAttributes；</p>
</li>
<li><p>BasicErrorController：处理默认的error错误请求；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(produces = <span class="string">"text/html"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                              HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    HttpStatus status = getStatus(request);</span><br><span class="line">    Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(</span><br><span class="line">        request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">    response.setStatus(status.value());</span><br><span class="line">    ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">    <span class="keyword">return</span> (modelAndView != <span class="keyword">null</span>) ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ErrorPageCustomizer：系统出现错误，来到/error请求进行处理：web.xml；</p>
</li>
<li><p>DefaultErrorViewResolver；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    Map&lt;Series, String&gt; views = <span class="keyword">new</span> EnumMap&lt;&gt;(Series<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    views.put(Series.CLIENT_ERROR, <span class="string">"4xx"</span>);</span><br><span class="line">    views.put(Series.SERVER_ERROR, <span class="string">"5xx"</span>);</span><br><span class="line">    SERIES_VIEWS = Collections.unmodifiableMap(views);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    ModelAndView modelAndView = resolve(String.valueOf(status), model);</span><br><span class="line">    <span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">        modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line">    TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders</span><br><span class="line">        .getProvider(errorViewName, <span class="keyword">this</span>.applicationContext);</span><br><span class="line">    <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<p>定制自定义错误页面：</p>
<ol>
<li><p>有模板引擎的情况下：error/状态码，将错误命名为status_code.html放在classpath:error/下，发生此错误会来到该页面；</p>
<p>可以使用4xx和5xx作为错误页面的文件名来匹配该类型的所有错误，精确匹配优先；</p>
<p>页面能获取的信息：</p>
<ol>
<li>timestamp；</li>
<li>message；</li>
<li>status code；</li>
<li>exception；</li>
<li>errors。</li>
</ol>
</li>
<li><p>没有模板引擎：静态资源文件夹下寻找。</p>
</li>
</ol>
<p>定制自定义json数据：</p>
<ol>
<li><p>没有自适应效果，浏览器和客户端返回的都是json数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span></span><br><span class="line"><span class="meta">@Response</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>自适应效果：转发给/error进行自适应效果处理，给request中传入自己的参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(produces = <span class="string">"text/html"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                              HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    HttpStatus status = getStatus(request);</span><br><span class="line">    Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(</span><br><span class="line">        request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">    response.setStatus(status.value());</span><br><span class="line">    ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">    <span class="keyword">return</span> (modelAndView != <span class="keyword">null</span>) ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">    Map&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class="line">                                                  isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">    HttpStatus status = getStatus(request);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(body, status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将自定义错误信息携带：</p>
<p>响应数据由getErrorAttributes()获取：</p>
<ol>
<li><p>编写一个ErrorController的实现类或者AbstractErrorController的子类，放在容器中；</p>
</li>
<li><p>页面上能用的数据或者json返回的数据都是errorAttributes.getErrorAttributes得到；DefaultErrorAttributes.getErrorAttributes()进行错误处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.error.DefaultErrorAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 18-10-7 下午4:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorHandler</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            org.springframework.web.reactive.function.server.ServerRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getErrorAttributes(request, includeStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<hr>
<h2 id="第五章-配置嵌入式Servlet容器"><a href="#第五章-配置嵌入式Servlet容器" class="headerlink" title="第五章 配置嵌入式Servlet容器"></a>第五章 配置嵌入式Servlet容器</h2><hr>
<h3 id="5-1-定制嵌入式Servlet容器"><a href="#5-1-定制嵌入式Servlet容器" class="headerlink" title="5.1 定制嵌入式Servlet容器"></a>5.1 定制嵌入式Servlet容器</h3><p>默认使用嵌入式tomcat8.5.4作为嵌入式的Servlet容器；</p>
<p><img src="https://image.youyou-2608.com/springboot/tomcat.png" alt></p>
<ol>
<li>如何定制嵌入式的Servlet容器？</li>
<li>SpringBoot能否支持其他的Servlet容器？</li>
</ol>
<ol>
<li>修改和Server有关的配置(server.properties)：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server.port=8080</span><br><span class="line">servet.context-path=/path</span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong>编写一个EmbeddedServletContainerCustomizer来修改嵌入式Servlet容器：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainerCustomizer <span class="title">embeddedServletContainerCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class="line">        container.setPort(<span class="number">8083</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>与容器相关的类：ServerProperties.class</p>
<p>SpringBoot2.0：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedTomcatConfig</span> <span class="keyword">implements</span> <span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">ConfigurableServletWebServerFactory</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableServletWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">        factory.setContextPath(<span class="string">"/test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-2-注册Servlet容器三大组件"><a href="#5-2-注册Servlet容器三大组件" class="headerlink" title="5.2 注册Servlet容器三大组件"></a>5.2 注册Servlet容器三大组件</h3><p>Servlet：ServletRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean&lt;MyServlet&gt; <span class="title">myServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyServlet(), <span class="string">"/servlet.do"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Filter：FilterRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;MyFilter&gt; <span class="title">myFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FilterRegistrationBean&lt;MyFilter&gt; registrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">    registrationBean.setFilter(<span class="keyword">new</span> MyFilter());</span><br><span class="line">    registrationBean.setUrlPatterns(Arrays.asList(<span class="string">"/hello.do"</span>, <span class="string">"/nihao.do"</span>));</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Listener：ServletListenerRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean&lt;MyListener&gt; <span class="title">myListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean&lt;MyListener&gt;();</span><br><span class="line">    registrationBean.setListener(<span class="keyword">new</span> MyListener());</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="5-3-嵌入式Servlet容器自动配置原理"><a href="#5-3-嵌入式Servlet容器自动配置原理" class="headerlink" title="5.3 嵌入式Servlet容器自动配置原理"></a>5.3 嵌入式Servlet容器自动配置原理</h3><p>EmbeddedWebServerFactoryCustomizerAutoConfiguration.class</p>
<p>Tomcat：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Tomcat<span class="class">.<span class="keyword">class</span>, <span class="title">UpgradeProtocol</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">static</span> <span class="title">class</span> <span class="title">TomcatWebServerFactoryCustomizerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TomcatWebServerFactoryCustomizer <span class="title">tomcatWebServerFactoryCustomizer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Environment environment, ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TomcatWebServerFactoryCustomizer(environment, serverProperties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Jetty：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Server<span class="class">.<span class="keyword">class</span>, <span class="title">Loader</span>.<span class="title">class</span>, <span class="title">WebAppContext</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">static</span> <span class="title">class</span> <span class="title">JettyWebServerFactoryCustomizerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JettyWebServerFactoryCustomizer <span class="title">jettyWebServerFactoryCustomizer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Environment environment, ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JettyWebServerFactoryCustomizer(environment, serverProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Undertow：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Undertow<span class="class">.<span class="keyword">class</span>, <span class="title">SslClientAuthMode</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">static</span> <span class="title">class</span> <span class="title">UndertowWebServerFactoryCustomizerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UndertowWebServerFactoryCustomizer <span class="title">undertowWebServerFactoryCustomizer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Environment environment, ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UndertowWebServerFactoryCustomizer(environment, serverProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件：Server.properties：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"server"</span>, ignoreUnknownFields = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerProperties</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>ConfigurableTomcatWebServerFactory.class：</p>
<p><img src="https://image.youyou-2608.com/springboot/hy.png" alt></p>
<hr>
<h3 id="5-4-使用外置的Servlet容器"><a href="#5-4-使用外置的Servlet容器" class="headerlink" title="5.4 使用外置的Servlet容器"></a>5.4 使用外置的Servlet容器</h3><p>内置的servlet容器不支持jsp；</p>
<ol>
<li>向项目中导入tomcat服务器，创建web.xml文件，添加application.properties配置；打包方式为war包；</li>
</ol>
<p>必须编写一个ServletInitializer文件；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources($&#123;MainClass&#125;<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>将嵌入式spring-boot-start-web内嵌的tomcat的scope指定为provided；</li>
</ol>
<hr>
<h2 id="第六章-Docker技术"><a href="#第六章-Docker技术" class="headerlink" title="第六章 Docker技术"></a>第六章 Docker技术</h2><h3 id="6-1-docker简介"><a href="#6-1-docker简介" class="headerlink" title="6.1 docker简介"></a>6.1 docker简介</h3><p>概念：Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、<a href="http://www.whatis.com.cn/word_5275.htm" target="_blank" rel="noopener">bare metal</a>、OpenStack 集群和其他的基础应用平台。 </p>
<p><a href="http://www.docker.org.cn/book/docker/what-is-docker-16.html" target="_blank" rel="noopener">Docker入门</a></p>
<p><img src="https://image.youyou-2608.com/springboot/image_docker.png" alt></p>
<hr>
<h3 id="6-2-Docker核心概念"><a href="#6-2-Docker核心概念" class="headerlink" title="6.2 Docker核心概念"></a>6.2 Docker核心概念</h3><ol>
<li>docker主机(Host)：安装了Docker程序的机器(Docker直接安装在操作系统之上)；</li>
<li>docker客户端(Client)：连接Docker主机进行操作；</li>
<li>docker仓库(Registry)：用来保存各种打包好的软件镜像；</li>
<li>docker镜像(Images)：软件打包好的镜像，放在docker仓库中；</li>
<li>docker容器(Container)：镜像启动后的实例称为一个容器，容器是独立运行的一个或一组应用；</li>
</ol>
<p>使用docker容器的步骤：</p>
<ol>
<li>安装docker；</li>
<li>去docker仓库找到这个软件对应的镜像；</li>
<li>使用docker运行这个镜像，就会生成一个Docker镜像容器；</li>
<li>对容器的启动和停止就是对软件的启动和停止。</li>
</ol>
<hr>
<h3 id="6-3-Docker常用操作"><a href="#6-3-Docker常用操作" class="headerlink" title="6.3 Docker常用操作"></a>6.3 Docker常用操作</h3><p>镜像官方网站：<a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search mysql     //搜索镜像</span><br><span class="line">docker pull mysql:5.5   //拉取镜像</span><br><span class="line">docker images           //查看本地所有镜像</span><br><span class="line">docker rmi images-id    //删除本地镜像</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com/springboot/docker_run.png" alt></p>
<p><strong>各个独立的容器互不干扰，独立运行。</strong></p>
<hr>
<h3 id="6-4-环境搭建"><a href="#6-4-环境搭建" class="headerlink" title="6.4 环境搭建"></a>6.4 环境搭建</h3><h4 id="6-4-1-安装MySQL："><a href="#6-4-1-安装MySQL：" class="headerlink" title="6.4.1 安装MySQL："></a>6.4.1 安装MySQL：</h4><p>启动一个MySQL实例(需要指定密码和<strong>端口映射</strong>)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -p port --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span></span><br></pre></td></tr></table></figure>

<p>官方文档：<a href="https://hub.docker.com/_/mysql/" target="_blank" rel="noopener">MySQL文档</a></p>
<p>几个高级操作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">使用配置文件：</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span></span><br><span class="line"></span><br><span class="line">不适用配置文件：</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span></span><br></pre></td></tr></table></figure>

<h4 id="6-4-2-安装Redis"><a href="#6-4-2-安装Redis" class="headerlink" title="6.4.2 安装Redis"></a>6.4.2 安装Redis</h4><h4 id="6-4-3-安装RabbitMQ"><a href="#6-4-3-安装RabbitMQ" class="headerlink" title="6.4.3 安装RabbitMQ"></a>6.4.3 安装RabbitMQ</h4><h4 id="6-4-4-安装ElasticSearch"><a href="#6-4-4-安装ElasticSearch" class="headerlink" title="6.4.4 安装ElasticSearch"></a>6.4.4 安装ElasticSearch</h4><hr>
<h2 id="第七章-SpringBoot与数据库访问"><a href="#第七章-SpringBoot与数据库访问" class="headerlink" title="第七章 SpringBoot与数据库访问"></a>第七章 SpringBoot与数据库访问</h2><p>SpringBoot与数据访问相关的场景启动器：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring-boot-starter-data-cassandra</span><br><span class="line"></span><br><span class="line">Starter for using Cassandra distributed database and Spring Data Cassandra</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-cassandra-reactive</span><br><span class="line"></span><br><span class="line">Starter for using Cassandra distributed database and Spring Data Cassandra Reactive</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-couchbase</span><br><span class="line"></span><br><span class="line">Starter for using Couchbase document-oriented database and Spring Data Couchbase</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-couchbase-reactive</span><br><span class="line"></span><br><span class="line">Starter for using Couchbase document-oriented database and Spring Data Couchbase Reactive</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-elasticsearch</span><br><span class="line"></span><br><span class="line">Starter for using Elasticsearch search and analytics engine and Spring Data Elasticsearch</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-jpa</span><br><span class="line"></span><br><span class="line">Starter for using Spring Data JPA with Hibernate</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-ldap</span><br><span class="line"></span><br><span class="line">Starter for using Spring Data LDAP</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-mongodb</span><br><span class="line"></span><br><span class="line">Starter for using MongoDB document-oriented database and Spring Data MongoDB</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-mongodb-reactive</span><br><span class="line"></span><br><span class="line">Starter for using MongoDB document-oriented database and Spring Data MongoDB Reactive</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-neo4j</span><br><span class="line"></span><br><span class="line">Starter for using Neo4j graph database and Spring Data Neo4j</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-redis</span><br><span class="line"></span><br><span class="line">Starter for using Redis key-value data store with Spring Data Redis and the Lettuce client</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-redis-reactive</span><br><span class="line"></span><br><span class="line">Starter for using Redis key-value data store with Spring Data Redis reactive and the Lettuce client</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-rest</span><br><span class="line"></span><br><span class="line">Starter for exposing Spring Data repositories over REST using Spring Data REST</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-solr</span><br><span class="line"></span><br><span class="line">Starter for using the Apache Solr search platform with Spring Data Solr</span><br><span class="line"></span><br><span class="line">Pom</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="7-1-整合JDBC与数据源"><a href="#7-1-整合JDBC与数据源" class="headerlink" title="7.1 整合JDBC与数据源"></a>7.1 整合JDBC与数据源</h3><p>建表语句执行：classpath:schema-*.sql</p>
<p>数据操作语句：classpath:data-*.sql</p>
<p>也可以使用schema在application.yml中自定义数据文件地址。</p>
<hr>
<h3 id="7-2-Druid数据源配置"><a href="#7-2-Druid数据源配置" class="headerlink" title="7.2 Druid数据源配置"></a>7.2 Druid数据源配置</h3><ol>
<li>引入依赖；</li>
<li>配置属性。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">type指定数据源</span><br></pre></td></tr></table></figure>

<p>添加一个配置类，将Druid配置映射到数据源。</p>
<p>结合过滤器和Servlet设置Druid监控。</p>
<hr>
<h3 id="7-3-整合MyBatis"><a href="#7-3-整合MyBatis" class="headerlink" title="7.3 整合MyBatis"></a>7.3 整合MyBatis</h3><p>启动器：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mybatis-spring-boot-starter</span><br></pre></td></tr></table></figure>

<p>获取插入数据库的记录的ID：</p>
<p>@Options(userGeneratedKeys=, keyProperty=）</p>
<p>开启MyBatis驼峰命名：</p>
<p>写一个配置类，实现ConfigurationCustomizer接口中的customize()方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">configuration.setMapUnderscopeToCamelCase(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<p>批量扫描所有的@Mapper注解：</p>
<p>@MapperScan(value=””)</p>
<p>相关配置文件见官网文档。</p>
<p>全局配置文件配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mybatis-config-location:classpath:mybatis/config.xml</span><br><span class="line">mybatis-config-mapper:class:mybatis/mapper.xml</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="7-4-SpringData数据访问JPA"><a href="#7-4-SpringData数据访问JPA" class="headerlink" title="7.4 SpringData数据访问JPA"></a>7.4 SpringData数据访问JPA</h3>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>周末随想</title>
    <url>/2018/12/31/%E5%91%A8%E6%9C%AB%E9%9A%8F%E6%83%B3/</url>
    <content><![CDATA[<blockquote>
<p>我们对于时间流逝的恐惧，不在于年龄增长带来的容颜衰老，而是光阴逝去，我们仍然一无所得。</p>
</blockquote>
<p>似乎从17年下半年实习完回到学校之后，时间就走得越来越快，平日里忙忙碌碌，稍有空闲偶然抬头，夕阳已在靠近山头。不知是我自己的错觉，还是周围的人也有同样的感觉。</p>
<p>工作近半年，我的潜意识似乎还停在六七月份，提着行李刚刚踏出校门的时候，尽管每天走出家门越来越冷的天气都会提醒我18年已然所剩无几。终于，18年就要过去了，我应该会从这仿佛停滞的潜意识中走出来吧。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4371.JPG" alt="入冬的第一场雪"></p>
<p>早上下楼，在花池边上看到的一颗爱心，趁还没被雪覆盖之前，拍了下来。</p>
<p>元旦假期刚好碰上了周末，新的一年应该算是一个重新振作、重新迈出脚步的好时机，对于我这样一段时间就会心血来潮把所有物品重新收拾一遍的人来说，这个周末可以说是一个一年一遇的好机会了。</p>
<p>周六早上还是照旧睡了个懒觉，起来吃个饭已经三点钟了。阳光明媚寒风凛冽的冬天自然是不适合出门的，下午就在网上冲浪，几个小时过得还算快。逛了会儿贴吧（因为发了句“苟利国家生死以”号被永封了，现在的社交媒体还是心理太敏感。）</p>
<p>晚上才意识到这就是年末了，其实我以为是周六是31号，就把家里彻彻底底收拾了一遍，收拾完已经是十二点了。又翻出了很多以前的东西，实习时候的、支教时候的、从大一到大四平时收集的纪念品（我有收藏的习惯，虽然只是一张草稿纸，也能让我在多年以后仍能回忆起N年前的那一刻的处境和想法。）</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4672.JPG" alt="支教班级刘夕夕送我的临别礼物"></p>
<p>今天晚上又在这本工数二里翻出了不少回忆。其实早已经忘了里面的内容。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4673.JPG" alt="刘夕夕送我的临别礼物"></p>
<p>好像大多数学生对我的评价都是善良、温柔、帅。。</p>
<p>虽然两年多过去了，依然清晰的记得对她的印象，上课捣蛋，不听话，其实并不是她的本性就是这样，她只是想用一些极端的方式引起别人对她的注意。后来，她生病了，她所说的“关心”大概就是每次上课之前我都问问她的病情，记得在送别会上哭了很长时间。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4674.JPG" alt="肖安福送我的临别礼物"></p>
<p>这也太真实了吧，矮我也就认了，这是我第一次听到有人说我丑的，小小年纪就懂得先抑后扬，将来可能会成为大文豪。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4675.JPG" alt="第一次坐上海磁浮列车"></p>
<p>这大概是16年冬天的时候去厦门，路过上海，特意去体验了上海磁浮。坐在飞驰的列车里，看着窗外高速公路上仿佛停止的车流，英语老师讲课的场景又在脑海中浮现出来。外研版英语教材中有一个单元的主题就是上海磁悬浮列车。黑板上的屏幕里放着老师当年在磁浮列车中拍摄的视频，窗外也是阳光明媚，屏幕里的高速公路和此刻我眼中所见别无二样，一闪而过、飞一般后退的风景，给人一种莫名的安心。曾经盼不到下课的45分钟在此刻却是如此短暂，只是此刻耳边响起的不再是熟悉动听的下课铃声，而是从未听到过的到站提醒。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4676%2820181230-115349%29.jpg" alt="四六级准考证"></p>
<p>至今让然保存着一次英语四级、三次英语六级、一次日语N2、一次日语N1考试的准考证。英语四级455、六级第一次375、第二次404、第三次530，日语N2 125、N1 108。总算是有心人，天不负吧。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4677%2820181230-115350%29.jpg" alt="爱心包裹募捐"></p>
<p>这是大二的时候去参加学校的“爱心包裹”募捐活动，那也是一个冬天，因为起得比较晚，没吃早饭没吃中午饭便去了开发区安盛广场。冒着寒风，厚着脸皮，从两点到四点半，和隔壁班搭档两个人募到了600，没有人比我们更高了，当时给我们开心得不行，在冒着小雨去管委会集合的路上，遇到一个撑伞的老奶奶，给我捐了100，还给我了一个翻墙工具光盘，让我们去了解法轮功真相。去邮政寄完钱，回到软院，终于在食堂吃上了第一顿饭，特意加了个鸡蛋奖励自己。满足的心情，至今记忆犹新。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4678%2820181230-115349%29.jpg" alt="院运动会"></p>
<p>大一时候的院运动会，参加了5公里长跑，14113号；大二时候的院运动会，参加了跳远，14116号。身边都是人高马大的，自卑了。。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4679.JPG" alt="庆祝建国65周年教职工合唱比赛"></p>
<p>合唱内容早已忘却，停在山上礼堂门口的那辆车却依然能清晰的记起来，“红旗”，一直觉得这个名字很响亮。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4684%2820181230-115349%29.jpg" alt="贵阳北—盘州"></p>
<p>16年12月沪昆高铁贵昆段开通，特意在贵阳转车，去体验经过家乡的高铁。第一次坐高铁，贵阳到家从四个小时缩短到一个小时，速度很快。16年底县里刚刚改名，从“盘县”改名到“盘州市”，所以每次看到这个“盘州站”，总给我一种陌生的感觉。贵阳北站的检票工具是一个💗（心）型，拍照的时候我特意在下面加了红色背景。从远方回家过年的人，看到车票上的这个爱心，应该会有一种温暖和感动的感觉吧，至少我是这样的。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4687.JPG" alt="四年坐过的火车"></p>
<p>把所有的车票集到一起才发现，原来坐着火车也去过不少地方呢。最常去的城市是六盘水、北京和大连；到过贵阳、厦门、三明、上海、西安、南昌、石家庄、烟台、郑州、北京、西安、广州、南宁、鞍山。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4688.JPG" alt="希望回忆也能保鲜"></p>
<p>北京房东奶奶送我的咖啡和糖、支教学生们的给我的联系方式和信件、嘉年华消费券…以前总是无意间就将想永久珍藏的东西放到这个保鲜盒中，渐渐地成为了习惯；后来我常常在想，食物放到保鲜盒中就能保持新鲜，那回忆呢，放到保鲜盒中也能永远保持新鲜吗？</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4689.JPG" alt="将回忆放到角落里吧"></p>
<p>一直记得去年的动漫《少女终末旅行》中有一句令人印象深刻的台词：記憶なんて、生きるの邪魔しかない（我将其翻译为：回忆，不过是生活的绊脚石）。如果你总是往后看，那会走得缓慢，把过去都藏到角落里，生活该大步的往前走，回忆，只适合在某个无所事事阴雨绵绵的晚上，翻出来打发时间。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4692.JPG" alt="不小心洒了一地的硬币"></p>
<p>收拾东西，想把硬币都擦一擦，因为太重，盒子裂开了，硬币洒了一地。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4695.JPG" alt="整理完的小桌子"></p>
<p>把桌子上的东西都擦了一遍。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4709.JPG" alt="收拾完的桌子"></p>
<p>把桌子上的东西都擦了一遍，给绿萝也擦了叶子。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4704.JPG" alt="收到了相机"></p>
<p>周天和学弟打了一下午的台球，一起吃了顿饭。晚上回来取到了相机。以后周末能多出去转转了，在这座城市生活了四年，却没去过几个地方，很是惭愧。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4707.JPG" alt="同事出差回来带的零食"></p>
<p>出差两个月的室友今天晚上回来了，带了一些日本的零食。</p>
<p><img src="https://image.youyou-2608.com/blog/IMG_4702.PNG" alt="坚持减肥"></p>
<p>坚持减肥十二天了，争取在春节之前减到100。</p>
<p>不知不觉写了一个小时，也该睡觉了，明天还要上班，明天就是18年最后一天了，该好好想想怎么跨年了。</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>《徒步中国》</title>
    <url>/2018/12/09/%E3%80%8A%E5%BE%92%E6%AD%A5%E4%B8%AD%E5%9B%BD%E3%80%8B/</url>
    <content><![CDATA[<p>一年半以后，我终于读完了这本书。</p>
<p>最初是去年的五月份在图书馆寻找旅行和摄影相关的书时，看到了这本书，书的名字——徒步中国，一下就吸引了我。960万平方公里辽阔的土地，我想许多热爱旅行的人都想走遍她的每一个角落，从江南水乡到青藏高原、从西沙群岛再到冰天雪地的黑龙江。</p>
<p>一直对这种第一人称出场人数少流水账式的书很有好感，可以快读，可以慢读，甚至能跳着读，不需要过多的去思考这句话背后的其他含义，不需要记住太多的设定，只要知道什么时间在什么地方遇到了什么事就足够了。</p>
<p>4646KM，我对这个数字已经没有过于清晰的概念了，只记得初中地理书上“中国的最东边在乌苏里江与黑龙江交汇处，最西边帕米尔高原，东西相距5200KM。”这样的类似的描述了；不过较为清晰的是107国道从北京广安门外到深圳北环大道有2700KM，如果哪一天我突然也想出去走走，那107国道将会是我第一个目标。</p>
<p>一个留学生能在中国徒步这么长的距离，每次拿起书本我的心中满是钦佩之情，一年的时间，几乎都在路上，一个人，不停的走路，还需要带着行李，几乎没有可以说话的地方，这需要相当的经济支撑，也需要相当大的勇气和毅力。但是每到达一个城市、每经过一千公里时的喜悦，却是容易体会的，在到达一个个小终点的喜悦面前，所有的一切都是值得的。</p>
<p>很多人问：你不觉得孤独吗？其实他也回答不上来，但是他觉得去经历这个过程很好。</p>
<p>到达每一座城市都是一个全新的开始，可以去亲身感受每一座城市独特之处，和这座城市的人交流，品尝这座城市的美食，游览这座城市的景点，用相机记录下这座城市的美，这就是旅行的意义吧。如果一生中能多有几次这样的经历，也算是美好的回忆了。</p>
<p>我又想起自己那份已经落满厚厚一层灰的107计划，我的内心也是一个喜欢四处游走、不停的记录的人，从广安门外到深圳北环大道，我无数次在地图上标注起点终点，然后放大缩小，甚至已经计划好了每一天的行程，整整30天，但是众所周知走出第一步总是最困难的。随着年龄的增长，只会越来越困难，我甚至做好了放弃的准备。</p>
<p>每每看到其他人博客里贴出来的林间小道，骑行头盔和公路车，心里总有无尽的羡慕，能说走就走的人，才是真正热爱生活的人。他们的才叫生活，而我经历的，叫生存或许来得更贴切一些。</p>
<p>一直从贯穿全书的还有作者和女朋友的分分合合。一个是在中国徒步的德国人，一个是在德国留学的中国人，总给人冥冥之中早已注定的感觉。全书的结尾，两人还是分手了。我不是一个相信爱情的人，更别提异地恋和异国恋了。女生终究需要的是陪伴，是看得见摸得着的安全感，千里相隔，即便千言万语也无济于事。一边是深爱的人，一边是自己的原则和理想，仿佛就是一般爱情电影里狗血剧情。书中还有一句话：<strong>每一个人在世界上都有20万个适合做伴侣的人。</strong>虽然我一直认为感情的事情绝大多数时候都是自寻烦恼，但是我的内心对于爱情还是期待的，尽管我不相信世界上会有所谓的知己存在。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>深田恭子的日剧跑</title>
    <url>/2018/12/02/%E6%B7%B1%E7%94%B0%E6%81%AD%E5%AD%90%E7%9A%84%E6%97%A5%E5%89%A7%E8%B7%91/</url>
    <content><![CDATA[<p>深田恭子的日剧跑—Bilibili</p>
<iframe src="//player.bilibili.com/player.html?aid=9855476&cid=16293423&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="470px" width="700px"> </iframe>




<iframe src="//player.bilibili.com/player.html?aid=9921445&cid=16402294&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="470px" width="700px"> </iframe>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
      <tags>
        <tag>无分类</tag>
      </tags>
  </entry>
  <entry>
    <title>dubbo学习笔记</title>
    <url>/2018/12/02/dubbo%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>dubbo学习笔记</p>
<p><a href="http://dubbo.apache.org/zh-cn/index.html" target="_blank" rel="noopener">dubbo中文官方网站</a></p>
<p><a href="http://dubbo.apache.org/zh-cn/docs/user/quick-start.html" target="_blank" rel="noopener">dubbo官方文档</a></p>
<h3 id="分布式系统及其演变历程"><a href="#分布式系统及其演变历程" class="headerlink" title="分布式系统及其演变历程"></a>分布式系统及其演变历程</h3><p><img src="http://dubbo.apache.org/docs/zh-cn/user/sources/images/dubbo-architecture-roadmap.jpg" alt="dubbo"></p>
<p>单一应用架构：</p>
<p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p>
<p>垂直应用架构：</p>
<p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p>
<p>分布式服务架构：</p>
<p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</p>
<p>流动计算架构：</p>
<p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p>
<h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><p>RPC（Remote Procedure Call）—<a href="https://baike.baidu.com/item/%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8/7854346" target="_blank" rel="noopener">远程过程调用</a>，它是一种通过<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C/143243" target="_blank" rel="noopener">网络</a>从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。<a href="https://baike.baidu.com/item/RPC%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">RPC协议</a>假定某些<a href="https://baike.baidu.com/item/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/8048821" target="_blank" rel="noopener">传输协议</a>的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/9636548" target="_blank" rel="noopener">网络通信</a>模型中，RPC跨越了<a href="https://baike.baidu.com/item/%E4%BC%A0%E8%BE%93%E5%B1%82/4329536" target="_blank" rel="noopener">传输层</a>和<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E5%B1%82/4329788" target="_blank" rel="noopener">应用层</a>。RPC使得开发包括网络<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F" target="_blank" rel="noopener">分布式</a>多程序在内的应用程序更加容易。</p>
<p>远程过程调用：序列化和网络通信。</p>
<h3 id="特性一览"><a href="#特性一览" class="headerlink" title="特性一览"></a>特性一览</h3><ul>
<li>面向接口代理的高性能RPC调用</li>
<li>智能负载均衡</li>
<li>服务自动注册与发现</li>
<li>高度可扩展能力</li>
<li>运行期流量调度</li>
<li>可视化的服务治理与运维</li>
</ul>
<h3 id="dubbo应用架构"><a href="#dubbo应用架构" class="headerlink" title="dubbo应用架构"></a>dubbo应用架构</h3><p><img src="http://dubbo.apache.org/img/architecture.png" alt="高性能Java RPC框架"></p>
<h3 id="dubbo快速启动"><a href="#dubbo快速启动" class="headerlink" title="dubbo快速启动"></a>dubbo快速启动</h3><p><a href="http://dubbo.apache.org/zh-cn/docs/user/quick-start.html" target="_blank" rel="noopener">dubbo快速启动</a></p>
<h3 id="dubbo实例"><a href="#dubbo实例" class="headerlink" title="dubbo实例"></a>dubbo实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/12/2 下午7:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAddress</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line">    <span class="keyword">private</span> String consignee;</span><br><span class="line">    <span class="keyword">private</span> String phoneNum;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isDefault;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserAddress</span><span class="params">(Integer id, String userId, String userAddress, String consignee, String phoneNum,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">boolean</span> isDefault)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.userAddress = userAddress;</span><br><span class="line">        <span class="keyword">this</span>.consignee = consignee;</span><br><span class="line">        <span class="keyword">this</span>.phoneNum = phoneNum;</span><br><span class="line">        <span class="keyword">this</span>.isDefault = isDefault;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"UserAddress&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", userId='"</span> + userId + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", userAddress='"</span> + userAddress + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", consignee='"</span> + consignee + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", phoneNum='"</span> + phoneNum + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", isDefault="</span> + isDefault +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/12/2 下午7:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">initOrder</span><span class="params">(String userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bean.UserAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/12/2 下午7:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;UserAddress&gt; <span class="title">getUserAddressList</span><span class="params">(String userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bean.UserAddress;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/12/2 下午7:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">getUserAddressList</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        UserAddress userAddress1 = <span class="keyword">new</span> UserAddress(<span class="number">1</span>, <span class="string">"001"</span>, <span class="string">"人民广场"</span>, <span class="string">"100"</span>, <span class="string">"230189"</span>, <span class="keyword">true</span>);</span><br><span class="line">        UserAddress userAddress2 = <span class="keyword">new</span> UserAddress(<span class="number">2</span>, <span class="string">"002"</span>, <span class="string">"文化公园"</span>, <span class="string">"101"</span>, <span class="string">"230190"</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(userAddress1, userAddress2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dubbo.service.consumer.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/12/2 下午8:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">initOrder</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUserAddressList(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dubbo.service.consumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/12/2 下午9:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/initOrder.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">initOrder</span><span class="params">(@RequestParam(<span class="string">"userId"</span>)</span> String userId) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.initOrder(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dubbo.service.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DubboDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Spring boot application</span><br><span class="line">spring.application.name = dubbo-provider-demo</span><br><span class="line">server.port = 9090</span><br><span class="line">management.port = 9091</span><br><span class="line"></span><br><span class="line"># Base packages to scan Dubbo Components (e.g., @Service, @Reference)</span><br><span class="line">dubbo.scan.basePackages  = com.alibaba.boot.dubbo.demo.provider.service</span><br><span class="line"></span><br><span class="line"># Dubbo Config properties</span><br><span class="line">## ApplicationConfig Bean</span><br><span class="line">dubbo.application.id = dubbo-provider-demo</span><br><span class="line">dubbo.application.name = dubbo-provider-demo</span><br><span class="line"></span><br><span class="line">## ProtocolConfig Bean</span><br><span class="line">dubbo.protocol.id = dubbo</span><br><span class="line">dubbo.protocol.name = dubbo</span><br><span class="line">dubbo.protocol.port = 12345</span><br><span class="line"></span><br><span class="line">## RegistryConfig Bean</span><br><span class="line">dubbo.registry.id = my-registry</span><br><span class="line">dubbo.registry.address = N/A</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>生活小记</title>
    <url>/2018/12/01/%E6%84%89%E5%BF%AB%E7%9A%84%E5%91%A8%E6%9C%AB/</url>
    <content><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="420" height="86" src="//music.163.com/outchain/player?type=2&id=26201877&auto=1&height=66"></iframe>

<p>因为项目延期，并且已经到了项目后期，所以工作也是越来越忙，忙起来，自然就没有多余的时间去胡思乱想，自然而然时间也过得快了，每天到公司开始干活，感觉累了抬头一看，窗外已是漆黑一片，周末的到来也是同样的令人不可思议。</p>
<p>今天周六，也是十二月一号，新的一个月的开始。</p>
<p>因为今天是周末，昨天晚上睡得并不算早，但是却是意外的起了个大早。起点便醒来，感觉眼睛有点疼又接着睡了一会儿，拿起手机看看才八点多一点，碰巧拿起手机便接到了快递的电话，突然我很后悔自己不让快递把快递送蜂巢，但是也觉着早起也挺好的，反正也不觉得困了。感觉自己很奇怪，平时上班早上八点多起床还觉得困，能睡的时候却早早的醒了。</p>
<p>洗漱完毕，取了快递，立马拆开读了半小时，昨天晚上买的书《百年孤独》，周三和学妹一起吃饭时提到了她在读这本书。昨天晚上下班回来约了学妹下午出去玩。这两天一直在听《轻音少女》的插曲《ふわふわ時間》，一直听到十一点半，然后去本部找学妹。</p>
<p><img src="https://image.youyou-2608.com/blog/QQ20181201-2.JPG" alt="星海广场"></p>
<p>先去了星海公园海边，拍了几张照片，天气不算太差，风也不是很大。</p>
<p>然后去了喜家德喝了点东西，本来打算去市内的，下车了才发现两人说的不是一个地方。。阴差阳错的去了和平广场，逛了无印良品、华润超市、数码书店还去买了香薰，吃了火锅。</p>
<p>简直不敢相信竟然逛了大半天，这算是我第一次逛商场吧，和学妹逛商场还挺有意思的，虽然有点小累，了解到了很多之前没听说过的东西。</p>
<p>快乐的时光总是短暂。离开商场的时候，学妹说在我生日的时候给送我香水作为生日礼物，有一瞬间觉得特别开心，但是接踵而至的却是负面的情绪。聚少离多在生活中更加常见，此时此刻，能轻松的许下诺言，可是谁又能知道明年的今天，彼此是不是早已天各一方？不论以后如何，只觉得要珍惜眼前。</p>
<p><img src="https://image.youyou-2608.com/blog/QQ20181201-1.JPG" alt="星海广场"></p>
<p>（这破图怎么旋转了，在七牛云里明明好好的。。）</p>
<p><img src="https://image.youyou-2608.com/blog/QQ20181201-3.JPG" alt="和平广场"></p>
<p><img src="https://image.youyou-2608.com/blog/QQ20181201-4.JPG" alt="和平广场"></p>
<p><img src="https://image.youyou-2608.com/blog/QQ20181201-0.JPG" alt="学妹送的香水"></p>
<p>和学妹开心的一天。</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习笔记-第三章-高级装配</title>
    <url>/2018/11/24/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%89%E7%AB%A0-%E9%AB%98%E7%BA%A7%E8%A3%85%E9%85%8D/</url>
    <content><![CDATA[<p>第三章：高级装配</p>
<p>本章内容：</p>
<ul>
<li>Spring profile</li>
<li>条件化的bean声明</li>
<li>自动装配与歧义性</li>
<li>bean的作用域</li>
<li>Spring表达式语言</li>
</ul>
<hr>
<h3 id="3-1-环境与profile"><a href="#3-1-环境与profile" class="headerlink" title="3.1 环境与profile"></a>3.1 环境与profile</h3><p>在软件开发的不同阶段需要不同的环境和配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(destroyMethod = <span class="string">"shutdown"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EmbeddedDatabaseBuilder()</span><br><span class="line">        .addScript(<span class="string">"classpath:ch3.sql"</span>)</span><br><span class="line">        .addScript(<span class="string">"classpath:ch3.1.sql"</span>)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了适应环境更换的需求，可以将所需要的所有的配置类配置到每个bean中，然后在构建阶段选择需要使用的bean，但是从开发环境切换到生产环境时可能会发生问题。</p>
<h4 id="3-1-1-配置profile-bean"><a href="#3-1-1-配置profile-bean" class="headerlink" title="3.1.1 配置profile bean"></a>3.1.1 配置profile bean</h4><p>Spring为此种场景提供了profile功能。</p>
<p>使用profile注解来声明在合适的阶段使用合适的bean。将所有的bean整理到一个profile中，确保在需要的时候active相应的bean。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ch3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jndi.JndiObjectFactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/24 下午1:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(destroyMethod = <span class="string">"shutdown"</span>)</span><br><span class="line">    <span class="meta">@Profile</span>(<span class="string">"dev"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">embeddedDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EmbeddedDatabaseBuilder()</span><br><span class="line">                .setType(EmbeddedDatabaseType.H2)</span><br><span class="line">                .addScript(<span class="string">"classpath:test.sql"</span>)</span><br><span class="line">                .addScript(<span class="string">"classpath:test1.sql"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile</span>(<span class="string">"prod"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">jndiDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JndiObjectFactoryBean jndiObjectFactoryBean =</span><br><span class="line">                <span class="keyword">new</span> JndiObjectFactoryBean();</span><br><span class="line">        jndiObjectFactoryBean.setJndiName(<span class="string">"jndi/myDS"</span>);</span><br><span class="line">        jndiObjectFactoryBean.setResourceRef(<span class="keyword">true</span>);</span><br><span class="line">        jndiObjectFactoryBean.setProxyInterface(javax.sql.DataSource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> (DataSource) jndiObjectFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>虽然所有的bean都被声明在一个profile里，但是只有当指定的profile被激活时，相应的bean才会被创建，没有指定profile的bean始终都会被创建，与激活的profile没有关系。</strong></p>
<p>在XML中配置profile：</p>
<p>可以通过beans元素的profile属性，在xml中配置profile。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">profile</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbc:embedded-database</span> <span class="attr">id</span>=<span class="string">"dataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">"classpath:test.sql"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">"classpath:test1.sql"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbc:embedded-database</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>只有profile属性与当前激活的profile相匹配的配置文件才会被用到。</strong></p>
<p>重复使用beans属性指定多个profile：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans</span> <span class="attr">profile</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbc:embedded-database</span> <span class="attr">id</span>=<span class="string">"dataSource"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">"classpath:test.sql"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">"classpath:test1.sql"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbc:embedded-database</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">beans</span> <span class="attr">profile</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jee:jndi-lookup</span> <span class="attr">jndi-name</span>=<span class="string">"jdbc/MyDatabase"</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">resource-ref</span>=<span class="string">"true"</span> <span class="attr">proxy-interface</span>=<span class="string">"javax.sql.DataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>虽然id都一样，类型都是javax.sql.dataSource，但是只会创建指定profile的bean。</strong></p>
<h4 id="3-1-2-激活profile"><a href="#3-1-2-激活profile" class="headerlink" title="3.1.2 激活profile"></a>3.1.2 激活profile</h4><p>Spring在确定处于激活状态的profile时，依赖于两个独立的属性：</p>
<ul>
<li>spring.profiles.active</li>
<li>spring.profiles.default</li>
</ul>
<p>优先级从上到下，如果spring.profiles.active没有设置，则看spring.profiles.default，否则只会创建没有定义在profiles中的bean。</p>
<p>有多种方式设置这两个属性：</p>
<ul>
<li>作为DispatcherServlet的初始化参数</li>
<li>作为web应用的上下文参数</li>
<li>作为JNDI条目</li>
<li>作为环境变量</li>
<li>作为JVM属性</li>
<li>在集成测试类上使用@ActiveProfiles属性</li>
</ul>
<p>在web.xml配置文件中设置默认的profile：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>spring.profiles.default<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>spring.profiles.default<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>可以同时激活多个profile，以逗号分隔。</strong></p>
<p>使用profile进行测试：</p>
<p>Spring提供了@ActiveProfiles注解，用来指定测试时使用的profile。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJunit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span></span>=&#123;PersistenceTestConfig<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line">@ActiveProfiles("dev")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersistenceTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-2-条件化的bean"><a href="#3-2-条件化的bean" class="headerlink" title="3.2 条件化的bean"></a>3.2 条件化的bean</h3><p>需求：</p>
<ol>
<li>希望一个或多个bean只有在类路径下包含某个特定的库时才创建</li>
<li>希望某个bean在特定的bean声明之后再创建</li>
</ol>
<p>Spring 4引入了@Conditional注解，只有条件计算结果为true才会创建bean，否则不创建。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ch3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Condition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/24 下午2:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MagicExistsCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line">        Environment environment = conditionContext.getEnvironment();</span><br><span class="line">        <span class="keyword">return</span> environment.containsProperty(<span class="string">"magic"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Conditional</span>(MagicExistsCondition<span class="class">.<span class="keyword">class</span>)   //条件化创建<span class="title">bean</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">MagicBean</span> <span class="title">magicBean</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MagicBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ConditionContext接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConditionContext</span> </span>&#123;</span><br><span class="line">    <span class="function">BeanDefinitionRegistry <span class="title">getRegistry</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ConfigurableListableBeanFactory <span class="title">getBeanFactory</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Environment <span class="title">getEnvironment</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ResourceLoader <span class="title">getResourceLoader</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ClassLoader <span class="title">getClassLoader</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>getRegistry：根据返回值可以检查bean定义</li>
<li>getEnvirnment：检查环境变量</li>
<li>getResourceLoader：读取加载的资源</li>
<li>getClassLoader：加载并检查类是否存在</li>
</ul>
<p>AnnotatedTypeMetadata接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AnnotatedTypeMetadata</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAnnotated</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">getAnnotationAttributes</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">getAnnotationAttributes</span><span class="params">(String var1, <span class="keyword">boolean</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">MultiValueMap&lt;String, Object&gt; <span class="title">getAllAnnotationAttributes</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">MultiValueMap&lt;String, Object&gt; <span class="title">getAllAnnotationAttributes</span><span class="params">(String var1, <span class="keyword">boolean</span> var2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-3-处理启动装配的歧义性"><a href="#3-3-处理启动装配的歧义性" class="headerlink" title="3.3 处理启动装配的歧义性"></a>3.3 处理启动装配的歧义性</h3><p>仅有一个bean匹配所需结果时，自动装配才是有效的，如果有多个bean能够匹配结果的话，这种歧义性会阻碍Spring自动装配属性、构造器参数和方法参数。</p>
<p>Spring提供的解决方案：</p>
<ul>
<li>将可选bean中的其中一个声明为首选（primary）</li>
<li>使用限定符（qualifier）缩小可选范围</li>
</ul>
<h4 id="3-3-1-标示首选的bean"><a href="#3-3-1-标示首选的bean" class="headerlink" title="3.3.1 标示首选的bean"></a>3.3.1 标示首选的bean</h4><p>将其中一个可选的bean声明为首选可以避免自动装配的歧义性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDessert</span><span class="params">(Dessert dessert)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dessert = dessert;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IceCream</span> <span class="keyword">implements</span> <span class="title">Dessert</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dessert <span class="title">dessert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IceCream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"iceCream"</span> <span class="attr">class</span>=<span class="string">"com.test.dessert.IceCream"</span> <span class="attr">primary</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-2-限定自动装配的bean"><a href="#3-3-2-限定自动装配的bean" class="headerlink" title="3.3.2 限定自动装配的bean"></a>3.3.2 限定自动装配的bean</h4><p>设置首选bean的局限性在于 <strong>@Primary无法将可选方案范围限定到一个无歧义性的选项中</strong> ，当首选bean的数量超过一个时，无法进一步缩小限定范围。</p>
<p>@Qualifier注解是使用限定符的主要方式，与@Autowired协同使用，在注入时指定要注入的bean。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"iceCream"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDessert</span><span class="params">(Dessert dessert)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dessert = dessert;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Qualifier注解的参数就是想要注入的bean的id，所有使用@Component注解的类都会创建为bean，且id为首字母小写的类名。</p>
<p>基于默认id作为限定符是简单的，但是当类名被更改之后会使限定符失效。</p>
<p>创建自定义的限定符：</p>
<p>可以设置自己的限定符，而不依赖于bean id作为限定符。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"cold"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IceCream</span> <span class="keyword">implements</span> <span class="title">Dessert</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时cold限定符分配给了IceCream bean，只需要在合适的地方引入cold限定符即可自动装配。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"cold"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Dessert <span class="title">iceCream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IceCream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时类限定名的变更不会影响到自动装配。但是当应用中出现同名的注解@Qualifier(“cold”)时，歧义性又会再次出现。</p>
<p>这时需要多个@Qualifier注解来进一步缩小限定范围。</p>
<hr>
<h3 id="3-4-bean的作用域"><a href="#3-4-bean的作用域" class="headerlink" title="3.4 bean的作用域"></a>3.4 bean的作用域</h3><p><strong>默认情况下，Spring应用上下文中的所有bean都是以单例模式创建的。不管给定的bean被注入到其他bean多少次，每次注入的都是同一个实例。</strong></p>
<p>如果一个类是可变（mutable）的，那么对其进行重用时可能会遇到意想不到的问题。</p>
<p>Spring定义的bean作用域：</p>
<ul>
<li>单例（Singleton）：在整个应用中，只创建一个bean；</li>
<li>原型（Prototype）：每次注入或者通过上下文获取bean时都创建一个新的bean；</li>
<li>会话（Session）：在Web应用中，为每个回话创建一个bean；</li>
<li>请求（Request）：在Web应用中，为每个请求创建一个bean。</li>
</ul>
<p>@Scope注解：</p>
<p>用来指定bean的作用域：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class="line"><span class="comment">//或者 @Scope("prototype")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Notepad</span> </span>&#123;</span><br><span class="line">    <span class="comment">//something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>XML配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"notepad"</span> <span class="attr">class</span>=<span class="string">"com.app.Notepad"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-5-运行时值注入"><a href="#3-5-运行时值注入" class="headerlink" title="3.5 运行时值注入"></a>3.5 运行时值注入</h3><p>Spring提供了两种运行时求值的方式：</p>
<ul>
<li>属性占位符（Property placeholder）；</li>
<li>Spring表达式语言（S片EL）。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:/com/soundsys/app.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpressiveConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Environment env;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BlankDisc <span class="title">disc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BlankDisc(env.getProperty(<span class="string">"disc.title"</span>), env.getProperty(<span class="string">"disc.artist"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring的Environment：</p>
<p>getProperty()方法的四种重载方式：</p>
<ul>
<li>String getProperty(String key)；</li>
<li>String getProperty(String key, String defaultValue)；</li>
<li>T getProperty(String key, Class<t> type)；</t></li>
<li>T getProperty(String key, Class<t> type, T defaultValue)；</t></li>
</ul>
<p>使用重载形式的getProperty()方法可以避免类型转换：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> connectionCount = env.getProperty(<span class="string">"db.connection.count"</span>, Integer<span class="class">.<span class="keyword">class</span>, 10)</span>;</span><br></pre></td></tr></table></figure>

<p>Environment常见方法：</p>
<ul>
<li>boolean containsProperty(String property)；</li>
<li>String[] getActiveProfiles()；</li>
<li>String[] getDefaultProfiles()；</li>
<li>boolean acceptsProfiles(String… profiles)。</li>
</ul>
<p>解析属性占位符：</p>
<p>Spring支持将属性定义到外部的属性文件中，并使用占位符将其值插入到Spring bean中。在Spring装配中，占位符的形式为使用 “${…}” 的形式包装的属性名称。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sgtPeppers"</span> <span class="attr">class</span>=<span class="string">"soundsystem.BlankDisc"</span> <span class="attr">c:_title</span>=<span class="string">"$&#123;disc.title&#125;"</span> <span class="attr">c:_artist</span>=<span class="string">"$&#123;disc.artist&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用组件扫描和自动装配时：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlankDisc</span><span class="params">(@Value(<span class="string">"$&#123;disc.title&#125;"</span> String title, @Value(<span class="string">"$&#123;disc.artist&#125;"</span>)</span> String artist) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line">    <span class="keyword">this</span>.artist = artist;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SpEL表达式语言：</p>
<p>将表达式语言放到 “#{…}” 之中。</p>
<ul>
<li>“#{1 + 1}”</li>
<li>“#{T(System).currentMillis()}”</li>
<li>“#{sgtPeppers.artist}”</li>
<li>“#{false}”</li>
<li>“#{artistSelector.selectArtists().toUpperCase()}”</li>
</ul>
<p>SpEL运算符：</p>
<table>
<thead>
<tr>
<th>运算符类型</th>
<th>运算符</th>
</tr>
</thead>
<tbody><tr>
<td>算术运算符</td>
<td>+、-、*、/、%、</td>
</tr>
<tr>
<td>比较运算符</td>
<td>&lt;、&gt;、==、&lt;=、&gt;=、lt、gt、eq、le、ge</td>
</tr>
<tr>
<td>逻辑运算符</td>
<td>and、or、not、|</td>
</tr>
<tr>
<td>条件运算符</td>
<td>?:(ternary)、?:()</td>
</tr>
<tr>
<td>正则表达式</td>
<td>matches</td>
</tr>
</tbody></table>
<p>计算正则表达式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#&#123;admin.email matches '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.com'&#125;</span><br></pre></td></tr></table></figure>

<p>计算集合：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#&#123;jukebox.songs[4].title&#125;</span><br><span class="line">#&#123;jukebox.songs[T(java.lang.Math).random()*jukebox.songs.size()].title&#125;</span><br><span class="line">#&#123;jukebox.songs.?[artist eq 'Aerosmith']&#125;  //.?[]得到集合的一个子集</span><br><span class="line">#&#123;jukebox.songs.^[artist eq 'Areosmith']&#125;  //.^[]查询集合中的第一个匹配项</span><br><span class="line">#&#123;jukebox.songs.$[artist eq 'Areosmith'].![title]&#125;  //.$[]查询集合中的最后一个匹配项，.![]从集合的每个成员中选择特定的属性放到另外一个集合中</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之Reverse Polish Notation</title>
    <url>/2018/11/24/LeetCode%E4%B9%8BReverse-Polish-Notation/</url>
    <content><![CDATA[<h3 id="1-关于Reverse-Polish-Notation"><a href="#1-关于Reverse-Polish-Notation" class="headerlink" title="1. 关于Reverse Polish Notation"></a>1. 关于Reverse Polish Notation</h3><p>摘自 <a href="https://zh.wikipedia.org/zh-hans/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95" target="_blank" rel="noopener">维基百科</a> 的解释：</p>
<blockquote>
<p><strong>逆波兰表示法</strong>（<strong>Reverse Polish notation</strong>，<strong>RPN</strong>，或<strong>逆波兰记法</strong>），是一种是由<a href="https://zh.wikipedia.org/wiki/%E6%B3%A2%E5%85%B0" title="波兰" target="_blank" rel="noopener">波兰</a><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E5%AE%B6" title="数学家" target="_blank" rel="noopener">数学家</a><a href="https://zh.wikipedia.org/wiki/%E6%89%AC%C2%B7%E6%AD%A6%E5%8D%A1%E8%B0%A2%E7%BB%B4%E5%A5%87" title="扬·武卡谢维奇" target="_blank" rel="noopener">扬·武卡谢维奇</a>1920年引入的数学表达式方式，在逆波兰记法中，所有<a href="https://zh.wikipedia.org/w/index.php?title=%E6%93%8D%E4%BD%9C%E7%AC%A6&action=edit&redlink=1" title="操作符（页面不存在）" target="_blank" rel="noopener">操作符</a>置于<a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E6%95%B0" title="操作数" target="_blank" rel="noopener">操作数</a>的后面，因此也被称为<strong>后缀表示法</strong>。逆波兰记法不需要括号来标识操作符的优先级。</p>
</blockquote>
<h3 id="2-题目内容"><a href="#2-题目内容" class="headerlink" title="2. 题目内容"></a>2. 题目内容</h3><p>Evaluate the value of an arithmetic expression in <a href="http://en.wikipedia.org/wiki/Reverse_Polish_notation" target="_blank" rel="noopener">Reverse Polish Notation</a>.</p>
<p>Valid operators are+,-,*,/. Each operand may be an integer or another expression.<br>Some examples:</p>
<p> [“2”, “1”, “+”, “3”, “*”] -&gt; ((2 + 1) * 3) -&gt; 9<br> [“4”, “13”, “5”, “/“, “+”] -&gt; (4 + (13 / 5)) -&gt; 6</p>
<h3 id="3-解题思路"><a href="#3-解题思路" class="headerlink" title="3. 解题思路"></a>3. 解题思路</h3><p>对于一个合法的字符数组，依次扫描该字符数组：</p>
<ol>
<li>如果该字符是”+”,”-“,”*”,”/“中的任意一个，则将其放入栈中；</li>
<li>如果该字符是操作符，则从栈中取出两个操作数按照顺序进行运算；</li>
<li>直到扫描完毕，取出栈中的最后一个数，即为结果。</li>
</ol>
<h3 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">evalRPN</span><span class="params">(String[] tokens)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; operators = <span class="keyword">new</span> ArrayList&lt;String&gt;() &#123;&#123;</span><br><span class="line">        add(<span class="string">"+"</span>);</span><br><span class="line">        add(<span class="string">"-"</span>);</span><br><span class="line">        add(<span class="string">"*"</span>);</span><br><span class="line">        add(<span class="string">"/"</span>);</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">    Stack&lt;Integer&gt; tempValue = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> number1;</span><br><span class="line">    <span class="keyword">int</span> number2;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!operators.contains(token)) &#123;</span><br><span class="line">            tempValue.push((Integer.valueOf(token)));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            number1 = tempValue.pop();</span><br><span class="line">            number2 = tempValue.pop();</span><br><span class="line">            <span class="keyword">switch</span> (token) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">                    result = number2 + number1;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">                    result = number2 - number1;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">                    result = number2 * number1;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">                    result = number2 / number1;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tempValue.push(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tempValue.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Python爬取B站数据</title>
    <url>/2018/11/22/%E5%88%A9%E7%94%A8Python%E7%88%AC%E5%8F%96B%E7%AB%99%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h3 id="最初的想法"><a href="#最初的想法" class="headerlink" title="最初的想法"></a>最初的想法</h3><p>最近在睿站上看到B小将的很多睿智评论，于是想起能不能爬一下B站的用户信息，看看能不能统计一下B站的年龄信息。但是很遗憾，在个人主页里只能看到注册日期和生日，而不能看到完整的生日信息。</p>
<p>还是换个目标吧，好久没用python了，就当是复习一下基础知识。于是找了一下B站的API，官方没有开放的API可供调用，意料之中，已经有大佬准备好了：<a href="https://github.com/Kotobuki-Tsumugi/Bilibili_Views_spider" target="_blank" rel="noopener">GitHub-B站野生接口</a> 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BilibiliSpider</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.online_api = <span class="string">"https://api.bilibili.com/x/web-interface/online"</span>  <span class="comment"># 在线人数</span></span><br><span class="line">        self.video_api = <span class="string">"https://api.bilibili.com/x/web-interface/archive/stat?&amp;aid=%s"</span>  <span class="comment"># 视频信息</span></span><br><span class="line">        self.newlist_api = <span class="string">"https://api.bilibili.com/x/web-interface/newlist?&amp;rid=%s&amp;pn=%s&amp;ps=%s"</span>  <span class="comment"># 最新视频信息</span></span><br><span class="line">        self.region_api = <span class="string">"https://api.bilibili.com/x/web-interface/dynamic/region?&amp;rid=%s&amp;pn=%s&amp;ps=%s"</span>  <span class="comment"># 最新动态信息</span></span><br><span class="line">        self.member_api = <span class="string">"http://space.bilibili.com/ajax/member/GetInfo"</span>  <span class="comment"># 用户信息</span></span><br><span class="line">        self.stat_api = <span class="string">"https://api.bilibili.com/x/relation/stat?vmid=%s"</span>  <span class="comment"># 用户关注数和粉丝总数</span></span><br><span class="line">        self.upstat_api = <span class="string">"https://api.bilibili.com/x/space/upstat?mid=%s"</span>  <span class="comment"># 用户总播放量和总阅读量</span></span><br><span class="line">        self.follower_api = <span class="string">"https://api.bilibili.com/x/relation/followings?vmid=%s&amp;pn=%s&amp;ps=%s"</span>  <span class="comment"># 用户关注信息</span></span><br><span class="line">        self.fans_api = <span class="string">"https://api.bilibili.com/x/relation/followers?vmid=%s&amp;pn=%s&amp;ps=%s"</span>  <span class="comment"># 用户粉丝信息</span></span><br></pre></td></tr></table></figure>

<h3 id="抓取在线人数"><a href="#抓取在线人数" class="headerlink" title="抓取在线人数"></a>抓取在线人数</h3><p>最简单的例子，在 StuPeter 的例子里有现成的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">member_online_count</span><span class="params">(self)</span>:</span></span><br><span class="line">    ret_val = requests.get(self.online_api)</span><br><span class="line">    <span class="keyword">if</span> ret_val.status_code != <span class="number">200</span> <span class="keyword">or</span> ret_val.content <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        print(<span class="string">"获取当前在线人数失败"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    ret_content = json.loads(ret_val.content)</span><br><span class="line">    <span class="keyword">return</span> ret_content[<span class="string">"data"</span>][<span class="string">"web_online"</span>]</span><br></pre></td></tr></table></figure>

<h3 id="将返回数据写入文件"><a href="#将返回数据写入文件" class="headerlink" title="将返回数据写入文件"></a>将返回数据写入文件</h3><p>每次执行脚本都记录下当前时间：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_file</span><span class="params">(self, cnt)</span>:</span></span><br><span class="line">    now = datetime.datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">    f = open(self.file, <span class="string">"a"</span>)</span><br><span class="line">    content_to_write = <span class="string">"["</span> + now + <span class="string">"] : ["</span> + str(cnt) + <span class="string">"]"</span></span><br><span class="line">    f.write(content_to_write + <span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="配置定时任务"><a href="#配置定时任务" class="headerlink" title="配置定时任务"></a>配置定时任务</h3><p>配置定时任务(Ubantu18.04)每十分钟执行一次：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0,10,20,30,40,50 * * * * python /home/username/python/bilibili_spider.py</span><br></pre></td></tr></table></figure>

<h3 id="matplotlib折线图展示"><a href="#matplotlib折线图展示" class="headerlink" title="matplotlib折线图展示"></a>matplotlib折线图展示</h3><p>爬完数据之后数据数据都在文件里，直接数据文件中读取记录下的 时间 和 人数值，做成折线图：</p>
<p>还需要再研究研究，to be updated…</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客同时部署到github和coding并设置双线解析</title>
    <url>/2018/11/19/Hexo%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2%E5%88%B0github%E5%92%8Ccoding%E5%B9%B6%E8%AE%BE%E7%BD%AE%E5%8F%8C%E7%BA%BF%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>因为github服务器禁止了百度爬虫，所以不能百度收录不了站点，导致访问量很低，本来不想折腾的，想了一下还是将博客也部署到了coding上，方便百度的收录。</p>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><ol>
<li><p>在coding上创建一个名为 <strong>用户名</strong> (不是昵称)的项目，并开启pages服务；</p>
</li>
<li><p>将本地ssh公钥文件添加到coding的SSH公钥中并测试是否能访问：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T -p 443 git@git-ssh.coding.net</span><br></pre></td></tr></table></figure>
</li>
<li><p>在站点配置文件中添加上coding仓库地址：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:Kotobuki-Tsumugi/Kotobuki-Tsumugi.github.io.git</span></span><br><span class="line">    <span class="attr">coding:</span> <span class="string">git@git.dev.tencent.com:Kobobuki-Tsumugi/Kobobuki-Tsumugi.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在站点目录/source下创建一个名为Staticfile的空文件；</p>
</li>
<li><p>生成并上传静态文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>
</li>
<li><p>在域名解析中新增两条CNAME记录，指向username.coding.me，注意区分境外线路和默认线路，指向coding的必须为默认线路，如果不能正常访问，可以先暂停github的解析，待coding的解析成功后再开启github的解析，解析反应不及时。</p>
</li>
<li><p>向百度提交站点sitemap文件地址。</p>
</li>
</ol>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>其中也遇到一些玄学的问题：</p>
<p><img src="https://image.youyou-2608.com/blog/codings_pages.png" alt="coding提示域名绑定异常"></p>
<p>比如上图，我如果绑定youyou-2608.com 则一直提示“域名未联通”，即便我已经添加了指向username.coding.me的CNAME记录，添加<a href="http://www.youyou-2608.com">www.youyou-2608.com</a> 能绑定上，但是绑定状态一直是异常，访问username.coding.me也能正常跳转到<a href="https://youyou-2608.com" target="_blank" rel="noopener">https://youyou-2608.com</a> ，没太搞明白，既然已经能正常访问，也就作罢了。</p>
]]></content>
      <categories>
        <category>Hexo博客维护</category>
      </categories>
      <tags>
        <tag>Hexo博客维护</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客备份</title>
    <url>/2018/11/18/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h3 id="养成备份的好习惯"><a href="#养成备份的好习惯" class="headerlink" title="养成备份的好习惯"></a>养成备份的好习惯</h3><p>花了好长时间总算是把博客搭建起来了，之前自己买的服务器用Wordpress搭建博客，但是因为服务器经常需要使用，安装一些其他软件什么的，导致Wordpress运行不是很稳定，还很容易被墙。</p>
<p>因为Hexo每次执行hexo g -d之后发布的都是生成的静态文件，站点以及主题的配置文件不会一同发布到github上，最重要的是，如果在另一个机器上要更新博客，根本做不到。所以就想着把源文件备份一下。</p>
<hr>
<h3 id="使用github备份轻松备份"><a href="#使用github备份轻松备份" class="headerlink" title="使用github备份轻松备份"></a>使用github备份轻松备份</h3><p>github本来就是一个仓库，用它来备份最合适不过了。</p>
<ol>
<li>建立本地文件夹，将需要备份的文件存拷贝到该文件夹中；</li>
<li>在username.github.io仓库下新建一个分支；</li>
<li>建立本地备份文件夹与远程仓库的关联；</li>
<li>将本地文件夹push到仓库；</li>
<li>每次博客更新，先发布静态文件，然后在提交源文件。</li>
</ol>
<hr>
<h3 id="需要备份的文件"><a href="#需要备份的文件" class="headerlink" title="需要备份的文件"></a>需要备份的文件</h3><ol>
<li>_config.yml</li>
<li>package.json</li>
<li>/scaffolds</li>
<li>/source</li>
<li>/themes</li>
</ol>
<hr>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>感觉每次更新博客之后都需要拷贝一下上面这几个文件，感觉还是比较麻烦，没想到什么好办法。</p>
<p><strong>git第一次commit之后才能查看到本地分支，push之后能显示远程分支。</strong></p>
<hr>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>用python脚本来复制文件，并且将执行命令添加到终端命令中，这样只需要多执行一个自定义命令来运行脚本，更方便。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!user/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">source_path = <span class="string">"/Users/youyou2608/Kotobuki"</span></span><br><span class="line">target_path = <span class="string">"/Users/youyou2608/BlogBack"</span></span><br><span class="line">filter_files = [<span class="string">"db.json"</span>, <span class="string">"public"</span>, <span class="string">"package-lock.json"</span>, <span class="string">"node_modules"</span>, <span class="string">".deploy_git"</span>]</span><br><span class="line">file_updated = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy_files</span><span class="params">(source_dir, target_dir)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(source_dir):</span><br><span class="line">        <span class="keyword">if</span> f <span class="keyword">in</span> filter_files:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        source_file = os.path.join(source_dir, f)</span><br><span class="line">        target_file = os.path.join(target_dir, f)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(source_file):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(target_dir):</span><br><span class="line">                os.makedirs(target_dir)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(target_file) <span class="keyword">or</span> (</span><br><span class="line">                    os.path.exists(target_file) <span class="keyword">and</span> os.path.getsize(target_file) != os.path.getsize(source_file)):</span><br><span class="line">                open(target_file, <span class="string">"wb"</span>).write(open(source_file, <span class="string">"rb"</span>).read())</span><br><span class="line">                file_updated.append(source_file)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(source_file):</span><br><span class="line">            copy_files(source_file, target_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"开始Hexo站点源文件复制.."</span>)</span><br><span class="line">    copy_files(source_path, target_path)</span><br><span class="line">    print(<span class="string">"站点源文件复制完毕.."</span>)</span><br></pre></td></tr></table></figure>



<p>在 /etc/profile 中添加一行：alias ‘copy_hexo_source’=’python copy_hexo_source.py’ ，这样终端运行 copy_hexo_source 就可以复制文件了。</p>
]]></content>
      <categories>
        <category>Hexo博客维护</category>
      </categories>
      <tags>
        <tag>Hexo博客维护</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习笔记-第二章-装配Bean</title>
    <url>/2018/11/17/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%A3%85%E9%85%8DBean/</url>
    <content><![CDATA[<p>第二章：装配Bean</p>
<p>本章内容：</p>
<ul>
<li>声明bean</li>
<li>构造器注入和Setter方法注入</li>
<li>装配bean</li>
<li>控制bean的创建和销毁</li>
</ul>
<blockquote>
<p>在Spring中，对象无需自己查找或创建与其所关联的对象，容器负责把需要相互协作的对象引用赋值给各个对象，这种协作关系成为<strong>装配</strong>。</p>
</blockquote>
<hr>
<h3 id="2-1-Spring配置的可选方案"><a href="#2-1-Spring配置的可选方案" class="headerlink" title="2.1 Spring配置的可选方案"></a>2.1 Spring配置的可选方案</h3><blockquote>
<p>Spring容器负责创建应用程序中的bean并通过DI来协调对象之间的关系。开发人员需要做的是告诉Spring需要创建哪些对象并且如何装配在一起。</p>
</blockquote>
<p>Spring提供了三种可选方式：</p>
<ul>
<li>XML配置</li>
<li>Java显式配置</li>
<li>隐式的bean发现机制和自动装配</li>
</ul>
<p>如何选择：<strong>尽可能使用自动配置机制，当必须显式配置时使用JavaConfig，当JavaConfig中没有同样实现时使用XML配置。</strong></p>
<hr>
<h3 id="2-2-自动化装配bean"><a href="#2-2-自动化装配bean" class="headerlink" title="2.2 自动化装配bean"></a>2.2 自动化装配bean</h3><ul>
<li>自动扫描</li>
<li>自动装配</li>
</ul>
<h4 id="2-2-1-创建可被发现的bean"><a href="#2-2-1-创建可被发现的bean" class="headerlink" title="2.2.1 创建可被发现的bean"></a>2.2.1 创建可被发现的bean</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kotobuki2.soundsys;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/17 下午7:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CompactDisc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kotobuki2.soundsys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/17 下午7:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title = <span class="string">"SgtPeppers title"</span>;</span><br><span class="line">    <span class="keyword">private</span> String artiest = <span class="string">"The Beatles"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"playing.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kotobuki2.soundsys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/17 下午7:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过XML配置开启注解扫描：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"soundsys"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>自动装配测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kotobuki2.soundsys.CDPlayerConfig;</span><br><span class="line"><span class="keyword">import</span> com.kotobuki2.soundsys.CompactDisc;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertNotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/17 下午7:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span> </span>= CDPlayerConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CDPlayerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CompactDisc compactDisc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cdTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertNotNull(compactDisc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-2-为组件扫描的bean命名"><a href="#2-2-2-为组件扫描的bean命名" class="headerlink" title="2.2.2 为组件扫描的bean命名"></a>2.2.2 为组件扫描的bean命名</h4><p>默认将类名第一个字母小写后的字符串作为bean的id。</p>
<p>可以通过注解标示bean的别名：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"alias"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-2-3-设置组件扫描的基础包"><a href="#2-2-3-设置组件扫描的基础包" class="headerlink" title="2.2.3 设置组件扫描的基础包"></a>2.2.3 设置组件扫描的基础包</h4><p><strong>默认以配置类所在的包为基础包进行扫描。</strong></p>
<p>自定义扫描包：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"package-name"</span>)</span><br><span class="line"><span class="comment">//扫描多个基础包</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"package1"</span>, <span class="string">"package2"</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>但是用直接指定包名会出现问题：包名被变更以后便无法扫描到所需要的类，因此，还有另一种指定扫描包的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackageClasses = &#123;CDPlayer<span class="class">.<span class="keyword">class</span>, <span class="title">DVDPlayer</span>.<span class="title">class</span>&#125;)</span></span><br></pre></td></tr></table></figure>

<p>这种方式下，这些类所在的包都会作为基础包进行扫描，即便代码重构也不会受到影响。</p>
<h4 id="2-2-4-通过为bean添加注解实现自动装配"><a href="#2-2-4-通过为bean添加注解实现自动装配" class="headerlink" title="2.2.4 通过为bean添加注解实现自动装配"></a>2.2.4 通过为bean添加注解实现自动装配</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kotobuki2.soundsys;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/17 下午8:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MediaPlayer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kotobuki2.soundsys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/17 下午8:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayer</span> <span class="keyword">implements</span> <span class="title">MediaPlayer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CompactDisc compactDisc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CDPlayer</span><span class="params">(CompactDisc compactDisc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.compactDisc = compactDisc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        compactDisc.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Autowired注解不仅能够用在构造器上，也能用在属性的Setter方法上。</p>
<hr>
<h3 id="2-3-通过Java装配bean"><a href="#2-3-通过Java装配bean" class="headerlink" title="2.3 通过Java装配bean"></a>2.3 通过Java装配bean</h3><blockquote>
<p>在进行显式配置的时候，JavaConfig是更好的方案，因为其强大、类型安全并且重构友好。因为其本身就是Java代码。</p>
</blockquote>
<p>声明简单的bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name=<span class="string">"alias"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> CompactDisc <span class="title">sgtPeppers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SgtPeppers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>借助JavaConfig实现注入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> CDPlayer(<span class="keyword">new</span> sgtPeppers());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">(CompactDisc disc)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CDplayer(disc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后者不要求disc必须在JavaConfig中声明，实际上它可以通过组件扫描功能自动发现或者XML来进行配置。</p>
<p>通过构造器注入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">(CompactDisc disc)</span></span>&#123;</span><br><span class="line">    CDPlayer cdPlayer = <span class="keyword">new</span> CDPlayer(disc);</span><br><span class="line">    cdPlayer.setCompactDisc(disc);</span><br><span class="line">    <span class="keyword">return</span> cdPlayer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-4-通过XML装配Bean"><a href="#2-4-通过XML装配Bean" class="headerlink" title="2.4 通过XML装配Bean"></a>2.4 通过XML装配Bean</h3><p>在XML配置中，需要创建一个以<beans>作为根元素的XML配置文件。</beans></p>
<p><strong>可以借助Spring Tool Suite创建和管理Spring XML配置文件</strong>。</p>
<h4 id="2-4-1-声明一个简单的bean："><a href="#2-4-1-声明一个简单的bean：" class="headerlink" title="2.4.1 声明一个简单的bean："></a>2.4.1 声明一个简单的bean：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean_id"</span> <span class="attr">class</span>=<span class="string">"com.soundsys.SgtPeppers"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果没有指明id，bean将会根据类全限定名指定，为了减少XML配置的繁琐，只需要对需要按名称引用的bean进行命名。“com.soundsys.SgtPeppers#0”…</p>
<p><constructor-arg> 元素：</constructor-arg></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span> <span class="attr">class</span>=<span class="string">"com.soundsys.CDPlayer"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"compactDisc"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-2-c命名空间"><a href="#2-4-2-c命名空间" class="headerlink" title="2.4.2 c命名空间"></a>2.4.2 c命名空间</h4><p><a href="https://blog.csdn.net/elim168/article/details/74516439" target="_blank" rel="noopener">p命名空间和c命名空间</a></p>
<h4 id="2-4-3-将字面量注入到构造器中："><a href="#2-4-3-将字面量注入到构造器中：" class="headerlink" title="2.4.3 将字面量注入到构造器中："></a>2.4.3 将字面量注入到构造器中：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"compactDisc"</span> <span class="attr">class</span>=<span class="string">"com.soundsys.BlackDisc"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"title"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"The Beatles"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 value 属性，将给定的值注入到构造器中。</p>
<h4 id="2-4-3-装配集合"><a href="#2-4-3-装配集合" class="headerlink" title="2.4.3 装配集合"></a>2.4.3 装配集合</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beat"</span> <span class="attr">class</span>=<span class="string">"com.soundsys.beat"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"The Beatles"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"bean1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"bean2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"bean3"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beat"</span> <span class="attr">class</span>=<span class="string">"com.soundsys.beat"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"The Beatles"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>SgtPeppers<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>The Beatles<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用两者的区别就是 list 和 set 会忽略重复元素。</p>
<h4 id="2-4-4-p命名空间"><a href="#2-4-4-p命名空间" class="headerlink" title="2.4.4 p命名空间"></a>2.4.4 p命名空间</h4><p><a href="https://blog.csdn.net/elim168/article/details/74516439" target="_blank" rel="noopener">p命名空间和c命名空间</a></p>
<h4 id="2-4-5-导入混合配置"><a href="#2-4-5-导入混合配置" class="headerlink" title="2.4.5 导入混合配置"></a>2.4.5 导入混合配置</h4><p>在 JavaConfig 中引用 JavaConfig 配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(CDConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">(CompactDisc disc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CDPlayer(disc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(CDPlayerConfig<span class="class">.<span class="keyword">class</span>, <span class="title">CDConfig</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SoundSysConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建一个配置类，使用@Import导入两个配置类。</p>
<p>在JavaConfig中引入XML配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(CDPlayerConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ImportResource("classpath:cd-config.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoundSysConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在XML配置中引用XML配置：</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"cd-config.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span> <span class="attr">class</span>=<span class="string">"com.soundsys.CDPlayer"</span> <span class="attr">c:cd-ref</span>=<span class="string">"compactDisc"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在XML中引入JavaConfig配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.soundsys.CDConfig"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span> <span class="attr">class</span>=<span class="string">"com.soundsys.CDPlayer"</span> <span class="attr">c:cd-ref</span>=<span class="string">"compactDisc"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.soundsys.CDConfig"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"cdplayer-config.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>新建一个配置文件，分别导入JavaConfig配置和XML配置。</p>
<hr>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote>
<p>Spring框架的核心是Spring容器，负责管理应用中组件的生命周期，它会创建这些组件并保证它们的依赖能够得到满足。</p>
<p>尽可能使用自动配置，以避免显式配置带来的维护成本。</p>
<p>如果确实需要显式配置，应优先选择基于Java的配置，因为其更加强大、类型安全且易于重构。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之单链表重排序</title>
    <url>/2018/11/17/LeetCode%E5%AD%90%E5%8D%95%E9%93%BE%E8%A1%A8%E9%87%8D%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<blockquote>
<p> 笑恨平生，不存欢愉。</p>
</blockquote>
<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>Given a singly linked list <em>L</em>: <em>L</em> 0→<em>L</em> 1→…→<em>L</em> <em>n</em>-1→<em>L</em> n,<br>reorder it to: <em>L</em> 0→<em>L</em> <em>n</em> →<em>L</em> 1→<em>L</em> <em>n</em>-1→<em>L</em> 2→<em>L</em> <em>n</em>-2→…</p>
<p>You must do this in-place without altering the nodes’ values.</p>
<p>For example,<br>Given{1,2,3,4}, reorder it to{1,4,2,3}.</p>
<h3 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h3><ul>
<li><p>时间限制：1秒</p>
</li>
<li><p>空间限制：32768K</p>
</li>
</ul>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>两个游标：一个用来指向下一次将要插入元素的位置，另一个用来遍历链表。从根结点开始遍历，如果当前节点的next节点不为空并且next的next节点不为空，则取最后一个节点插入到当前节点之后，游标一跳两个位置。直到游标一节点的next节点为空或者next的next节点为空。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.reorder.list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sort.linkedlist.ListNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/17 下午4:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span> || head.next.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode pt = head;</span><br><span class="line">        ListNode index = head;</span><br><span class="line">        ListNode preIndex = head;</span><br><span class="line">        <span class="keyword">while</span> (pt.next != <span class="keyword">null</span> &amp;&amp; pt.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (index.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                preIndex = index;</span><br><span class="line">                index = index.next;</span><br><span class="line">            &#125;</span><br><span class="line">            preIndex.next = <span class="keyword">null</span>;</span><br><span class="line">            index.next = pt.next;</span><br><span class="line">            pt.next = index;</span><br><span class="line">            pt = pt.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方法可行，但是每排序一个节点都需要遍历一次链表，效率比较低，可以看到下图，运行时间较长，占用内存已经 <strong><font color="red">超过空间限制</font></strong> 了。</p>
<p><img src="https://image.youyou-2608.com/blog/leetcode1.png" alt="链表重排序"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>看了一下网上给出的方案，几乎都是一样的：</p>
<p>这道链表重排序问题可以拆分为以下三个小问题：</p>
<ol>
<li><p>使用快慢指针来找到链表的中点，并将链表从中点处断开，形成两个独立的链表。</p>
</li>
<li><p>将第二个链翻转。</p>
</li>
<li><p>将第二个链表的元素间隔地插入第一个链表中。</p>
</li>
</ol>
<p>都是将链表拆成两个独立的链表进行重排序。</p>
<p>剽窃来的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;这道链表重排序问题可以拆分为以下三个小问题：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 使用快慢指针来找到链表的中点，并将链表从中点处断开，形成两个独立的链表。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. 将第二个链翻转。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3. 将第二个链表的元素间隔地插入第一个链表中。</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head || !head-&gt;next || !head-&gt;next-&gt;next) <span class="keyword">return</span>;</span><br><span class="line">        ListNode *fast = head;</span><br><span class="line">        ListNode *slow = head;</span><br><span class="line">        <span class="keyword">while</span> (fast-&gt;next &amp;&amp; fast-&gt;next-&gt;next) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *mid = slow-&gt;next;</span><br><span class="line">        slow-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode *last = mid;</span><br><span class="line">        ListNode *pre = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (last) &#123;</span><br><span class="line">            ListNode *next = last-&gt;next;</span><br><span class="line">            last-&gt;next = pre;</span><br><span class="line">            pre = last;</span><br><span class="line">            last = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (head &amp;&amp; pre) &#123;</span><br><span class="line">            ListNode *next = head-&gt;next;</span><br><span class="line">            head-&gt;next = pre;</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">            head-&gt;next-&gt;next = next;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>时间空间使用都很少，性能问题没了。</p>
<p><img src="https://image.youyou-2608.com/blog/leetcode2.png" alt="LeetCode链表重排序"></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之二叉树非递归前序遍历</title>
    <url>/2018/11/17/LeetCode%E5%AD%90%E4%BA%8C%E5%8F%89%E6%A0%91%E9%9D%9E%E9%80%92%E5%BD%92%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>Given a binary tree, return the <em>preorder</em> traversal of its nodes’ values.</p>
<p>For example:<br>Given binary tree{1,#,2,3},</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line"> /</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>return[1,2,3].</p>
<p><strong>Note:</strong> Recursive solution is trivial, could you do it iteratively?</p>
<p><strong>使用非递归的方法前序遍历二叉树。</strong></p>
<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>前序遍历就是按照中、左、右的顺序对二叉树进行遍历。</p>
<p>思路很简单，如果当前节点不为空，不断遍历当前节点的左子树，如果当前节点有右子树的话，将其放入栈中以便后期遍历其右子树，如果当前节点为空，则取出栈顶元素按照同样的方式遍历其右子树。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.postorder.raversal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/17 下午3:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreOrderSolution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        TreeNode pointer = root;</span><br><span class="line">        <span class="keyword">while</span> (pointer != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (pointer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                list.add(pointer.val);</span><br><span class="line">                <span class="keyword">if</span> (pointer.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    stack.push(pointer);</span><br><span class="line">                &#125;</span><br><span class="line">                pointer = pointer.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pointer = stack.pop();</span><br><span class="line">            pointer = pointer.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>牛客网做得还不错，就是现在还是只支持C++和Java。</p>
<p><img src="https://image.youyou-2608.com/blog/leetcode.png" alt="代码通过测试"></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之二叉树非递归后续遍历</title>
    <url>/2018/11/17/LeetCode%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E9%9D%9E%E9%80%92%E5%BD%92%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<p>周末突然降温，哪儿也去不了，不如在家刷题。</p>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>Given a binary tree, return the <em>postorder</em> traversal of its nodes’ values.</p>
<p>For example:<br>Given binary tree{1,#,2,3},</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line"> /</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>return[3,2,1].</p>
<p><strong>Note:</strong> Recursive solution is trivial, could you do it iteratively？</p>
<p><strong>使用非递归方法后序遍历二叉树。</strong></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>二叉树后序遍历就是对每个节点按照左、右、中的顺序进行遍历。</p>
<p>详细的解析参见：<a href="https://www.jianshu.com/p/456af5480cee" target="_blank" rel="noopener">二叉树遍历(先序、中序、后序)</a> ，讲得非常详细易懂。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.postorder.raversal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/17 下午1:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        TreeNode pointer = root;</span><br><span class="line">        TreeNode lastVisit = root;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() || pointer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (pointer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(pointer);</span><br><span class="line">                pointer = pointer.left;</span><br><span class="line">            &#125;</span><br><span class="line">            pointer = stack.peek();</span><br><span class="line">            <span class="keyword">if</span> (pointer.right == <span class="keyword">null</span> || pointer.right == lastVisit) &#123;</span><br><span class="line">                list.add(pointer.val);</span><br><span class="line">                lastVisit = pointer;</span><br><span class="line">                stack.pop();</span><br><span class="line">                pointer = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pointer = pointer.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>是时候好好重修一下数据结构了。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之链表插入排序</title>
    <url>/2018/11/16/LeetCode%E4%B9%8B%E9%93%BE%E8%A1%A8%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p><a href="https://www.nowcoder.com/practice/152bc6c5b14149e49bf5d8c46f53152b?tpId=46&tqId=29034&tPage=1&rp=1&ru=/ta/leetcode&qru=/ta/leetcode/question-ranking" target="_blank" rel="noopener">链表插入排序</a> 是 <a href="https://www.nowcoder.com" target="_blank" rel="noopener">牛客网</a> 上LeetCode在线编程的一道题。</p>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>Sort a linked list using insertion sort.</p>
<p>使用插入排序对链表排序，此处为单链表。</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>插入排序</strong>就是依次将未排序部分的第一个元素插入到已排序部分合适的位置，使得已排序部分仍然有序。</p>
<p>列表可以直接根据位置索引元素，但是链表不可以直接取得指定位置的元素。</p>
<p>根据插入排序的思路：将整个链表按照已排序和未排序分为两部分，未排序部分的首个元素即为将要被排序的元素，问题变为将一个元素插入到一个有序链表中使得该链表仍然有序。分为两种情况：一种是合适位置在有序链表的非末尾，另一种是在有序链表的末尾，然后其他的问题就是注意插入时的赋值顺序。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">insertionSortList1</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode root = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ListNode temp = root;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span> &amp;&amp; head.val &gt;= temp.next.val)</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        <span class="keyword">if</span> (temp.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp.next = head;</span><br><span class="line">            head = head.next;</span><br><span class="line">            temp.next.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ListNode temp2 = temp.next;</span><br><span class="line">            temp.next = head;</span><br><span class="line">            head = head.next;</span><br><span class="line">            temp.next.next = temp2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考：<a href="http://www.cnblogs.com/tonyluis/p/4579295.html" target="_blank" rel="noopener">http://www.cnblogs.com/tonyluis/p/4579295.html</a></p>
<hr>
<p>最近将博客从WordPress搬到了GitHub，WordPress比较灵活，但是价格昂贵的服务器是为此付出的代价。后来看到 <a href="https://www.jianshu.com/" target="_blank" rel="noopener">简书</a> 页面比较简洁，尝试了一下简书，MarkDown编辑器有实时预览，比博客园那不知道要高到哪里去了， <a href="https://www.cnblogs.com/" target="_blank" rel="noopener">博客园</a> 从16年就在开发的MarkDown编辑器，快2019年了还没投入使用。用了两周简书发现简书的阅读量几乎为0。还尝试了 <a href="https://juejin.im/" target="_blank" rel="noopener">掘金</a>、<a href="https://segmentfault.com/" target="_blank" rel="noopener">SegmentFault</a> 最近考虑博客搬迁才知道还有 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 存在，于是喜出望外的转移了平台，花了点时间配置了 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">Next</a> 主题以及域名之类的，<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 真的良心，不得不让我再恶心一下吃相难看想钱想疯的 CSDN。</p>
<p>博客地址：<a href="https://kotobuki-tsumugi.github.io" target="_blank" rel="noopener">https://kotobuki-tsumugi.github.io</a>，<a href="https://youyou-2608.com" target="_blank" rel="noopener">https://youyou-2608.com</a>，欢迎访问。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习笔记-第一章-Spring之旅</title>
    <url>/2018/11/14/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-Spring%E4%B9%8B%E6%97%85/</url>
    <content><![CDATA[<p>第一部分：Spring的核心</p>
<ul>
<li><p>第一章：Spring之旅</p>
<p>介绍Spring框架，包括Spring DI和AOP。</p>
</li>
<li><p>第二章：装配Bean</p>
<p>Spring的自动配置、基于Java的配置和XML配置。</p>
</li>
<li><p>第三章：高级装配</p>
<p>Spring的条件化配置，处理自动装配时的歧义性，作用域以及Spring表达式语言。</p>
</li>
<li><p>第四章：面向切面的Spring</p>
<p>展示如何使用Spring的AOP特性把系统级服务从它们所服务的对象中解耦出来。</p>
</li>
</ul>
<hr>
<p>第一章 Spring之旅</p>
<p>本章内容：</p>
<ul>
<li>Spring的Bean容器</li>
<li>介绍Spring的核心模块</li>
<li>更为强大的Spring生态系统</li>
<li>Spring的新功能</li>
</ul>
<p><strong>创建Spring的主要目的是用来替代更加重量级的企业级Java技术，尤其是EJB。</strong>相当于EJB来说，Spring提供了更加轻量级和更加简单的编程模型。</p>
<hr>
<h3 id="1-1-简化Java开发"><a href="#1-1-简化Java开发" class="headerlink" title="1.1 简化Java开发"></a>1.1 简化Java开发</h3><h4 id="1-1-1-Spring的非侵入式编程"><a href="#1-1-1-Spring的非侵入式编程" class="headerlink" title="1.1.1 Spring的非侵入式编程"></a>1.1.1 Spring的非侵入式编程</h4><p>在基于Spring构建的应用中，一般不会有任何痕迹表明你使用了Spring，最坏的场景是在一个类上使用了Spring注解，但是这个类依旧是一个Pojo类。</p>
<p>Spring的非侵入式编程模型意味着这个类在Spring应用还是在非Spring应用中都能发挥同样的作用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kotobuki;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/14 下午9:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-1-2-依赖注入"><a href="#1-1-2-依赖注入" class="headerlink" title="1.1.2 依赖注入"></a>1.1.2 依赖注入</h4><p>在一个应用中通常会涉及到很多类，这些类需要相互协作来完成特定的功能，如果让每个类管理与自己协作的类，则会导致应用高度耦合。</p>
<blockquote>
<p> 依赖注入带来的最大好处就是松耦合。如果一个对象只通过借口来表明依赖关系，那么这种依赖就能够在对象毫不知情的情况下用不同的实现替换。</p>
<p>可以让对其他的类有依赖的类自动获得已经准备好的依赖。</p>
</blockquote>
<p>一个送外卖的过程：当不是用DI的时候送餐员需要自己准备外卖，然后再配送。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.clerk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.com.food.Dinner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/15 下午8:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliveryWithoutDI</span> <span class="keyword">implements</span> <span class="title">Delivery</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Dinner dinner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeliveryWithoutDI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dinner = <span class="keyword">new</span> Dinner(<span class="string">"rice"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delivery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"delivery it on time."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当使用DI之后，当有外卖需要配送的时候，分配送餐员，送餐员会自动获得需要配送的外卖，需要做的只是负责配送，而不用关心其他事情。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.clerk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.com.food.Dinner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/15 下午8:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliveryClerk</span> <span class="keyword">implements</span> <span class="title">Delivery</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Dinner dinner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeliveryClerk</span><span class="params">(Dinner dinner)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dinner = dinner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delivery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"delivery on time."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-1-3-应用切面"><a href="#1-1-3-应用切面" class="headerlink" title="1.1.3 应用切面"></a>1.1.3 应用切面</h4><blockquote>
<p>面向切面编程允许你把遍布应用各处的功能分离出来形成可重用的组件。</p>
</blockquote>
<p>一个系统或应用由许多不同的组件构成，但是每一个组件在负责自己的功能之外，通常还要承担额外的责任。一些与核心业务无关的代码会融入到核心业务逻辑中。比如转账，除了发生金钱的转移之外，还要验证身份、记录账单以及给用户发送通知。这些会跨越系统的组件成为横切关注点。它们会使核心业务代码变得复杂。</p>
<p><img src="https://image.youyou-2608.com/blog/AOP1.png" alt="Spring AOP"></p>
<p>通过AOP，可以将与核心业务无关的代码分离出来。</p>
<h4 id="1-1-4-使用模板消除样板式代码"><a href="#1-1-4-使用模板消除样板式代码" class="headerlink" title="1.1.4 使用模板消除样板式代码"></a>1.1.4 使用模板消除样板式代码</h4><p>使用JDBC访问数据库，会产生大量与查询语句无关的代码，还必须要捕捉异常，虽然无济于事。</p>
<p>Spring旨在通过模板封装来消除样板式代码。</p>
<p><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/data-access.html#spring-data-tier" target="_blank" rel="noopener">Data Access with JDBC</a></p>
<h3 id="1-2-容纳你的bean"><a href="#1-2-容纳你的bean" class="headerlink" title="1.2 容纳你的bean"></a>1.2 容纳你的bean</h3><blockquote>
<p>在Spring应用中，你的应用对象生存于Spring容器中，Spring容器负责创建对象，装配并管理它们的整个生命周期。</p>
</blockquote>
<p>使用应用上下文：</p>
<ul>
<li>AnnotationConfigApplicationContext：从一个或多个基于Java的配置类中加载Spring应用上下文。</li>
<li>AnnotationConfigWebApplicationContext：从一个或多个基于Java的配置类中加载Spring Web应用上下文。</li>
<li>ClassPathXmlApplicationContext：从类路径下的一个或多个XML配置文件中加载上下文定义。</li>
<li>FileSystemXmlApplicationContext：从文件系统下的一个或多个XML配置文件中加载上下文定义。</li>
<li>XmlWebApplicationContext：从Web应用下的一个或多个XML配置文件中还在上下文定义。</li>
</ul>
<p>bean的生命周期：</p>
<p><img src="https://image.youyou-2608.com/bean-lifecycle.png" alt="bean的生命周期"></p>
<p><img src="https://image.youyou-2608.com/bean2.png" alt="Bean的生命周期"></p>
<h3 id="1-3-俯瞰Spring风景线"><a href="#1-3-俯瞰Spring风景线" class="headerlink" title="1.3 俯瞰Spring风景线"></a>1.3 俯瞰Spring风景线</h3><p>Spring的模块：</p>
<p><img src="https://image.youyou-2608.com/springmodel" alt="Spring模块"></p>
<table>
<thead>
<tr>
<th><a href="https://docs.spring.io/spring/docs/5.1.2.RELEASE/spring-framework-reference/core.html#spring-core" target="_blank" rel="noopener">Core</a></th>
<th>IoC container, Events, Resources, i18n, Validation, Data Binding, Type Conversion, SpEL, AOP.</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://docs.spring.io/spring/docs/5.1.2.RELEASE/spring-framework-reference/testing.html#testing" target="_blank" rel="noopener">Testing</a></td>
<td>Mock objects, TestContext framework, Spring MVC Test, WebTestClient.</td>
</tr>
<tr>
<td><a href="https://docs.spring.io/spring/docs/5.1.2.RELEASE/spring-framework-reference/data-access.html#spring-data-tier" target="_blank" rel="noopener">Data Access</a></td>
<td>Transactions, DAO support, JDBC, ORM, Marshalling XML.</td>
</tr>
<tr>
<td><a href="https://docs.spring.io/spring/docs/5.1.2.RELEASE/spring-framework-reference/web.html#spring-web" target="_blank" rel="noopener">Web Servlet</a></td>
<td>Spring MVC, WebSocket, SockJS, STOMP messaging.</td>
</tr>
<tr>
<td><a href="https://docs.spring.io/spring/docs/5.1.2.RELEASE/spring-framework-reference/web-reactive.html#spring-webflux" target="_blank" rel="noopener">Web Reactive</a></td>
<td>Spring WebFlux, WebClient, WebSocket.</td>
</tr>
<tr>
<td><a href="https://docs.spring.io/spring/docs/5.1.2.RELEASE/spring-framework-reference/integration.html#spring-integration" target="_blank" rel="noopener">Integration</a></td>
<td>Remoting, JMS, JCA, JMX, Email, Tasks, Scheduling, Cache.</td>
</tr>
<tr>
<td><a href="https://docs.spring.io/spring/docs/5.1.2.RELEASE/spring-framework-reference/languages.html#languages" target="_blank" rel="noopener">Languages</a></td>
<td>Kotlin, Groovy, Dynamic languages.</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之水仙花数</title>
    <url>/2018/11/11/LeetCode%E4%B9%8B%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0/</url>
    <content><![CDATA[<h3 id="1-水仙花数"><a href="#1-水仙花数" class="headerlink" title="1. 水仙花数"></a>1. 水仙花数</h3><p>以下是摘自 <a href="https://zh.wikipedia.org/zh-hans/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0" target="_blank" rel="noopener">维基百科</a> 中的释义：</p>
<blockquote>
<p>在<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E8%AE%BA" title="数论" target="_blank" rel="noopener">数论</a>中，<strong><a href="https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1" title="水仙花" target="_blank" rel="noopener">水仙花</a>数</strong>（<strong>Narcissistic number</strong>）<sup><a href="https://zh.wikipedia.org/zh-hans/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-mw-1" target="_blank" rel="noopener">[1]</a></sup><sup><a href="https://zh.wikipedia.org/zh-hans/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-moore-2" target="_blank" rel="noopener">[2]</a></sup>，也被称为<strong>超完全数字不变数</strong>（<strong>pluperfect digital invariant, PPDI</strong>）<sup><a href="https://zh.wikipedia.org/zh-hans/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-3" target="_blank" rel="noopener">[3]</a>/sup&gt;、<strong><a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E6%88%80" title="自恋" target="_blank" rel="noopener">自恋</a>数</strong>、<strong>自幂数</strong>、<strong><a href="https://zh.wikipedia.org/wiki/%E9%98%BF%E5%A7%86%E6%96%AF%E5%A3%AF" title="阿姆斯壮" target="_blank" rel="noopener">阿姆斯壮</a>数</strong>或<strong>阿姆斯特朗数</strong>（<strong>Armstrong number</strong>）<sup><a href="https://zh.wikipedia.org/zh-hans/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-4" target="_blank" rel="noopener">[4]</a></sup> ，用来描述一个<strong>N</strong>位非负整数，其各位数字的<strong>N</strong>次方和等于该数本身。</sup></p>
</blockquote>
<p>这里定义的N=3。</p>
<h3 id="2-问题描述"><a href="#2-问题描述" class="headerlink" title="2. 问题描述"></a>2. 问题描述</h3><p>春天是鲜花的季节，水仙花就是其中最迷人的代表，数学上有个水仙花数，他是这样定义的： “水仙花数”是指一个三位数，它的各位数字的立方和等于其本身，比如：153=1^3+5^3+3^3。 现在要求输出所有在m和n范围内的水仙花数。</p>
<a id="more"></a>

<p>对于每个测试实例，要求输出所有在给定范围内的水仙花数，就是说，输出的水仙花数必须大于等于m,并且小于等于n，如果有多个，则要求从小到大排列在一行内输出，之间用一个空格隔开;<br>如果给定的范围内不存在水仙花数，则输出no;<br>每个测试实例的输出占一行。</p>
<p>输入：<br>100 120<br>300 380</p>
<p>输出：<br>no<br>370 371</p>
<h3 id="3-问题分析"><a href="#3-问题分析" class="headerlink" title="3. 问题分析"></a>3. 问题分析</h3><p>我的解决思路：先将给出的数字按照个位十位百位的顺序拆解，然后计算各数位三次方之和，再和原数进行比较比较。思路比较简单。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.odd.number;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/3 下午12:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">getNumbers</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; comps = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">double</span> num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">            comps.clear();</span><br><span class="line">            comps = getNumberComponent(i);</span><br><span class="line">            <span class="keyword">for</span> (Integer comp : comps) &#123;</span><br><span class="line">                num += Math.pow(comp, <span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num == i) &#123;</span><br><span class="line">                result.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">getNumberComponent</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> base = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> comp;</span><br><span class="line">        <span class="keyword">int</span> lastComp;</span><br><span class="line">        List&lt;Integer&gt; components = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (number % (base / <span class="number">10</span>) != number) &#123;</span><br><span class="line">            <span class="keyword">int</span> power = <span class="number">0</span>;</span><br><span class="line">            lastComp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Integer index : components) &#123;</span><br><span class="line">                lastComp += index * Math.pow(<span class="number">10</span>, power);</span><br><span class="line">                power += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            comp = ((number - lastComp) % base) / (base / <span class="number">10</span>);</span><br><span class="line">            components.add(comp);</span><br><span class="line">            base *= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> components;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (input.hasNextLine()) &#123;</span><br><span class="line">            String str = input.nextLine();</span><br><span class="line">            String[] numbers = str.split(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> start = Integer.valueOf(numbers[i]);</span><br><span class="line">                <span class="keyword">int</span> end = Integer.valueOf(numbers[i + <span class="number">1</span>]);</span><br><span class="line">                result = getNumbers(start, end);</span><br><span class="line">                <span class="keyword">if</span> (result.isEmpty()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"no"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Integer aResult : result) &#123;</span><br><span class="line">                        System.out.print(aResult + <span class="string">" "</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="他山之石"><a href="#他山之石" class="headerlink" title="他山之石"></a>他山之石</h3><p>貌似在评论区里看到了有用python解决的：<br><img src="https://upload-images.jianshu.io/upload_images/11202770-5ff6050c51a2f767.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20181103-142633@2x.png"></p>
<p>没太看懂。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
</search>
