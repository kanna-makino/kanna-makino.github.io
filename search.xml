<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ubuntu 18.04安装Mariadb修改初始密码</title>
    <url>/2020/10/22/Ubuntu-18-04%E5%AE%89%E8%A3%85Mariadb%E4%BF%AE%E6%94%B9%E5%88%9D%E5%A7%8B%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p>Ubuntu 18.04安装Mariadb修改初始密码</p>
<p>在Ubuntu环境下新安装Mariadb数据库之后，所有的配置文件里都没有默认密码，然后用root用户和空密码也登不进去，浪费了好长时间，将解决的过程记录一下。</p>
<p>MySQL版本：<strong>10.1.47-MariaDB-0+deb9u1 Debian 9.13</strong></p>
<p>在StackOverflow上找到的解决方法 &gt;&gt;&gt;  <a href="https://stackoverflow.com/questions/39281594/error-1698-28000-access-denied-for-user-rootlocalhost" target="_blank" rel="noopener">ERROR 1698 (28000): Access denied for user ‘root’@’localhost</a>‘](<a href="https://stackoverflow.com/questions/39281594/error-1698-28000-access-denied-for-user-rootlocalhost" target="_blank" rel="noopener">https://stackoverflow.com/questions/39281594/error-1698-28000-access-denied-for-user-rootlocalhost</a>)</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhulongkun20@v2ray:mysqld_safe --skip-grant-tables</span><br><span class="line"></span><br><span class="line">zhulongkun20@v2ray:sudo /etc/init.d/mysql restart</span><br><span class="line"></span><br><span class="line">zhulongkun20@v2ray:sudo mysql</span><br><span class="line"></span><br><span class="line">进入到 MySQL 后台</span><br><span class="line">MariaDB [(none)]&gt;</span><br><span class="line"></span><br><span class="line">执行SQL修改密码</span><br><span class="line">MariaDB [(none)]&gt; update mysql.user set password=PASSWORD(&quot;root&quot;) where user=&quot;root&quot;;</span><br><span class="line"></span><br><span class="line">刷新</span><br><span class="line">MariaDB [(none)]&gt; flush privileges;</span><br><span class="line">MariaDB [(none)]&gt; exit</span><br><span class="line">Bye</span><br><span class="line"></span><br><span class="line">重启</span><br><span class="line">zhulongkun20@v2ray:/etc$ sudo /etc/init.d/mysql restart</span><br><span class="line">[ ok ] Restarting mysql (via systemctl): mysql.service.</span><br><span class="line"></span><br><span class="line">登录然后还是报错</span><br><span class="line">zhulongkun20@v2ray:mysql -uroot -p</span><br><span class="line">ERROR 1698 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos;</span><br></pre></td></tr></table></figure>

<p>解决问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhulongkun20@v2ray:mysqld_safe --skip-grant-tables</span><br><span class="line"></span><br><span class="line">zhulongkun20@v2ray:sudo /etc/init.d/mysql restart</span><br><span class="line"></span><br><span class="line">zhulongkun20@v2ray:sudo mysql</span><br><span class="line"></span><br><span class="line">进入到 MySQL 后台</span><br><span class="line">MariaDB [(none)]&gt;</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; use mysql;</span><br><span class="line">MariaDB [mysql]&gt; SELECT User, Host, plugin FROM mysql.user;</span><br><span class="line">+------+-----------+-------------+</span><br><span class="line">| User | Host      | plugin      |</span><br><span class="line">+------+-----------+-------------+</span><br><span class="line">| root | localhost | unix_socket |</span><br><span class="line">+------+-----------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [mysql]&gt; UPDATE user SET plugin=&apos;mysql_native_password&apos; WHERE User=&apos;root&apos;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [mysql]&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">然后退出</span><br><span class="line">MariaDB [mysql]&gt; exit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">杀掉所有进程后重启登录即可：</span><br><span class="line">zhulongkun20@v2ray:~$ mysql -uroot -p</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>@PreAuthorize and @PostAuthorize</title>
    <url>/2020/10/20/PreAuthrize-and-PostAuthrize/</url>
    <content><![CDATA[<p>@PreAuthorize 和 @PostAuthorize是SpringSecurity中常用的两个注解，简单了解一下他们的用法吧！</p>
<a id="more"></a>

<h2 id="开启验证"><a href="#开启验证" class="headerlink" title="开启验证"></a>开启验证</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bill.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> :  zhulongkun20@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> :  10-20-2020 15:27:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> :  SpringSecurity配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> :  v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 基于内存的方式构建两个用户，user/123456，admin/123456</span></span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .passwordEncoder(passwordEncoder())</span><br><span class="line">                .withUser(<span class="string">"admin"</span>)</span><br><span class="line">                .password(passwordEncoder().encode(<span class="string">"123456"</span>))</span><br><span class="line">                .roles(<span class="string">"admin"</span>);</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .passwordEncoder(passwordEncoder())</span><br><span class="line">                .withUser(<span class="string">"user"</span>)</span><br><span class="line">                .password(passwordEncoder().encode(<span class="string">"123456"</span>))</span><br><span class="line">                .roles(<span class="string">"normal"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="PreAuthorize注解"><a href="#PreAuthorize注解" class="headerlink" title="@PreAuthorize注解"></a>@PreAuthorize注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bill.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> :  zhulongkun20@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> :  10-20-2020 15:22:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> :  HomeController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> :  v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, spring security."</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/helloNormal"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@PreAuthorize</span>(<span class="string">"hasAnyRole('normal')"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, normal."</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/helloAdmin"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@PreAuthorize</span>(<span class="string">"hasAnyRole('admin')"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloAdmin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, admin"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当@EnableGlobalMethodSecurity(prePostEnabled = true)开启的时候，@PreAuthorize注解生效，支持SpringEL表达式，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只要有其中一个权限即可访问</span></span><br><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"hasAnyRole("</span>admin<span class="string">", "</span>normal<span class="string">")"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时满足条件才可以访问</span></span><br><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"hasRole('admin') AND hasRole('normal')"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="PostAuthorize"><a href="#PostAuthorize" class="headerlink" title="@PostAuthorize"></a>@PostAuthorize</h2><p>@PostAuthorize 注解使用并不多，在方法执行后再进行权限验证，适合验证带有返回值的权限，Spring EL 提供返回对象能够在表达式语言中获取返回的对象returnObject。</p>
<p>当@EnableGlobalMethodSecurity(prePostEnabled = true)的时候，@PostAuthorize可以使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/helloUser"</span>)</span><br><span class="line"><span class="meta">@PostAuthorize</span>(<span class="string">"returnObject != null &amp;&amp;  returnObject.username == authentication.name"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">helloUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object pricipal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">    User user;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"anonymousUser"</span>.equals(pricipal)) &#123;</span><br><span class="line">        user = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        user = (User) pricipal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内置表达式：</p>
<table>
<thead>
<tr>
<th align="left">表达式</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">hasRole([role])</td>
<td align="left">如果有当前角色, 则返回 true(会自动加上 ROLE_ 前缀)</td>
</tr>
<tr>
<td align="left">hasAnyRole([role1, role2])</td>
<td align="left">如果有任一角色即可通过校验, 返回true,(会自动加上 ROLE_ 前缀)</td>
</tr>
<tr>
<td align="left">hasAuthority([authority])</td>
<td align="left">如果有指定权限, 则返回 true</td>
</tr>
<tr>
<td align="left">hasAnyAuthority([authority1, authority2])</td>
<td align="left">如果有任一指定权限, 则返回true</td>
</tr>
<tr>
<td align="left">principal</td>
<td align="left">获取当前用户的 principal 主体对象</td>
</tr>
<tr>
<td align="left">authentication</td>
<td align="left">获取当前用户的 authentication 对象,</td>
</tr>
<tr>
<td align="left">permitAll</td>
<td align="left">总是返回 true, 表示全部允许</td>
</tr>
<tr>
<td align="left">denyAll</td>
<td align="left">总是返回 false, 代表全部拒绝</td>
</tr>
<tr>
<td align="left">isAnonymous()</td>
<td align="left">如果是匿名访问, 返回true</td>
</tr>
<tr>
<td align="left">isRememberMe()</td>
<td align="left">如果是remember-me 自动认证, 则返回 true</td>
</tr>
<tr>
<td align="left">isAuthenticated()</td>
<td align="left">如果不是匿名访问, 则返回true</td>
</tr>
<tr>
<td align="left">isFullAuthenticated()</td>
<td align="left">如果不是匿名访问或remember-me认证登陆, 则返回true</td>
</tr>
<tr>
<td align="left">hasPermission(Object target, Object permission)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">hasPermission(Object target, String targetType, Object permission)</td>
<td align="left"></td>
</tr>
</tbody></table>
<h2 id="Secured"><a href="#Secured" class="headerlink" title="@Secured"></a>@Secured</h2><p>当@EnableGlobalMethodSecurity(securedEnabled = true)的时候，@Secured可以使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/helloUser"</span>)</span><br><span class="line"><span class="meta">@Secured</span>(&#123;<span class="string">"ROLE_admin"</span>, <span class="string">"ROLE_normal"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">helloUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello, user"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拥有normal或者admin角色的用户都可以访问helloUser()方法。另外需要注意的是这里 <strong>匹配的字符串需要添加前缀“ROLE_“</strong>，如果我们要求，只有同时拥有admin &amp; normal的用户才能访问helloUser()方法，这时候@Secured就无能为力了。</p>
]]></content>
      <categories>
        <category>SpringSecurity</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式</title>
    <url>/2020/10/20/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="设计模式的意义"><a href="#设计模式的意义" class="headerlink" title="设计模式的意义"></a>设计模式的意义</h2><p>设计模式（Design Pattern）是前辈们对代码开发经验的总结，是解决特定问题的一系列套路，它不是语法规定，而是一套 <strong>用来提高代码可复用性、可维护性、可读性、稳健性以及安全性</strong> 的解决方案。</p>
<p>23 种设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性，以及类的关联关系和组合关系的充分理解。</p>
<p>当然，软件设计模式只是一个引导，在实际的软件开发中，必须根据具体的需求来选择：</p>
<ul>
<li>对于简单的程序，可能写一个简单的算法要比引入某种设计模式更加容易；</li>
<li>但是对于大型项目开发或者框架设计，用设计模式来组织代码显然更好。</li>
</ul>
<a id="more"></a>

<h2 id="设计模式的要素"><a href="#设计模式的要素" class="headerlink" title="设计模式的要素"></a>设计模式的要素</h2><ul>
<li>模式的名称；</li>
<li>要解决的问题类型；</li>
<li>解决方案；</li>
<li>效率、安全及可移植性等优缺点评估。</li>
</ul>
<h2 id="面向对象的设计原则"><a href="#面向对象的设计原则" class="headerlink" title="面向对象的设计原则"></a>面向对象的设计原则</h2><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>软件实体应当对扩展开放，对修改封闭。（open for entension, but closed for modification.），使软件有一定的扩展性同时具备稳定性。</p>
<p>可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中。</p>
<h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><p>继承必须确保超类所拥有的性质在子类中仍然成立（Inheritance should ensure that any property proved about supertype objects also holds for subtype objects）。</p>
<p>里氏替换原则的主要作用如下：</p>
<ol>
<li>里氏替换原则是实现开闭原则的重要方式之一。</li>
<li>它克服了继承中重写父类造成的可复用性变差的缺点。</li>
<li>它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性。</li>
<li>加强程序的健壮性，同时变更时可以做到非常好的兼容性，提高程序的维护性、可扩展性，降低需求变更时引入的风险。</li>
</ol>
<p><strong>子类可以扩展父类的功能，但不能改变父类原有的功能。</strong></p>
<h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><p>高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象（High level modules shouldnot depend upon low level modules.Both should depend upon abstractions.Abstractions should not depend upon details. Details should depend upon abstractions）。其核心思想是：要面向接口编程，不要面向实现编程。</p>
<p>依赖倒置原则的主要作用如下：</p>
<ul>
<li>依赖倒置原则可以降低类间的耦合性。</li>
<li>依赖倒置原则可以提高系统的稳定性。</li>
<li>依赖倒置原则可以减少并行开发引起的风险。</li>
<li>依赖倒置原则可以提高代码的可读性和可维护性。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DIPTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Customer wang = <span class="keyword">new</span> Customer();</span><br><span class="line">        System.out.println(<span class="string">"顾客购买以下商品："</span>);</span><br><span class="line">        wang.shopping(<span class="keyword">new</span> ShaoguanShop());</span><br><span class="line">        wang.shopping(<span class="keyword">new</span> WuyuanShop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//商店</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sell</span><span class="params">()</span></span>; <span class="comment">//卖</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//韶关网店</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShaoguanShop</span> <span class="keyword">implements</span> <span class="title">Shop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"韶关土特产：香菇、木耳……"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//婺源网店</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WuyuanShop</span> <span class="keyword">implements</span> <span class="title">Shop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"婺源土特产：绿茶、酒糟鱼……"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//顾客</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shopping</span><span class="params">(Shop shop)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//购物</span></span><br><span class="line">        System.out.println(shop.sell());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分（There should never be more than one reason for a class to change）。</p>
<p>单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。如果遵循单一职责原则将有以下优点：</p>
<ul>
<li>降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多。</li>
<li>提高类的可读性。复杂性降低，自然其可读性会提高。</li>
<li>提高系统的可维护性。可读性提高，那自然更容易维护了。</li>
<li>变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响。</li>
</ul>
<h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法。</p>
<p>接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下 5 个优点：</p>
<ol>
<li>将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。</li>
<li>接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性。</li>
<li>如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险。</li>
<li>使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义。</li>
<li>能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码。</li>
</ol>
<p>在具体应用接口隔离原则时，应该根据以下几个规则来衡量。</p>
<ul>
<li>接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑。</li>
<li>为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法。</li>
<li>了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑。</li>
<li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</li>
</ul>
<h3 id="迪米特原则"><a href="#迪米特原则" class="headerlink" title="迪米特原则"></a>迪米特原则</h3><p>如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</p>
<p>过度使用迪米特法则会使系统产生大量的中介类，从而增加系统的复杂性，使模块之间的通信效率降低。所以，在釆用迪米特法则时需要反复权衡，确保高内聚和低耦合的同时，保证系统的结构清晰。</p>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>指一个类只有一个实例，且该类能自行创建这个实例的一种模式。</p>
<p>单例模式有 3 个特点：</p>
<ol>
<li>单例类只有一个实例对象；</li>
<li>该单例对象必须由单例类自行创建；</li>
<li>单例类对外提供一个访问该单例的全局访问点。</li>
</ol>
<p>单例模式可以保证在一个 JVM 中只存在单一实例。单例模式的应用场景主要有以下几个方面：</p>
<ul>
<li>需要频繁创建的一些类，使用单例可以降低系统的内存压力，减少 GC。</li>
<li>某类只要求生成一个对象的时候，如一个班中的班长、每个人的身份证号等。</li>
<li>某些类创建实例时占用资源较多，或实例化耗时较长，且经常使用。</li>
<li>某类需要频繁实例化，而创建的对象又频繁被销毁的时候，如多线程的线程池、网络连接池等。</li>
<li>频繁访问数据库或文件的对象。</li>
<li>对于一些控制硬件级别的操作，或者从系统上来讲应当是单一控制逻辑的操作，如果有多个实例，则系统会完全乱套。</li>
<li>当对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象访问速度。如 Web 中的配置对象、数据库的连接池等。</li>
</ul>
<p>两种实现方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonMode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonMode instance = <span class="keyword">new</span> SingletonMode();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonMode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SingletonMode <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonMode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingletonMode singletonMode = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonMode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SingletonMode <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singletonMode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            singletonMode = <span class="keyword">new</span> SingletonMode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singletonMode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>定义一个创建产品对象的工厂接口，将产品对象的实际创建工作推迟到具体子工厂类当中。这满足创建型模式中所要求的“创建与使用相分离”的特点。</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol>
<li>工厂类包含必要的逻辑判断，可以决定在什么时候创建哪一个产品的实例。客户端可以免除直接创建产品对象的职责，很方便的创建出相应的产品。工厂和产品的职责区分明确；</li>
<li>客户端无需知道所创建具体产品的类名，只需知道参数即可；</li>
<li>也可以引入配置文件，在不修改客户端代码的情况下更换和添加新的具体产品类。</li>
</ol>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol>
<li>简单工厂模式的工厂类单一，负责所有产品的创建，职责过重，一旦异常，整个系统将受影响。且工厂类代码会非常臃肿，违背高聚合原则；</li>
<li>使用简单工厂模式会增加系统中类的个数（引入新的工厂类），增加系统的复杂度和理解难度；</li>
<li>系统扩展困难，一旦增加新产品不得不修改工厂逻辑，在产品类型较多时，可能造成逻辑过于复杂；</li>
<li>简单工厂模式使用了 static 工厂方法，造成工厂角色无法形成基于继承的等级结构。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A product"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductB</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B product"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeProduct</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">        product.showInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductFactoryTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ProductFactory productFactory = <span class="keyword">new</span> ProductFactory();</span><br><span class="line">        productFactory.makeProduct(<span class="keyword">new</span> ProductA());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>简单工厂模式违背了开闭原则，而“工厂方法模式”是对简单工厂模式的进一步抽象化，其好处是可以使系统在不修改原来代码的情况下引进新的产品，即满足开闭原则。</p>
<h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul>
<li>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程。</li>
<li>灵活性增强，对于新产品的创建，只需多写一个相应的工厂类。</li>
<li>典型的解耦框架。高层模块只需要知道产品的抽象类，无须关心其他实现类，满足迪米特法则、依赖倒置原则和里氏替换原则。</li>
</ul>
<h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul>
<li>类的个数容易过多，增加复杂度</li>
<li>增加了系统的抽象性和理解难度</li>
<li>抽象产品只能生产一种产品，此弊端可使用<a href="http://c.biancheng.net/view/1351.html" target="_blank" rel="noopener">抽象工厂模式</a>解决。</li>
</ul>
<h4 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h4><ul>
<li>客户只知道创建产品的工厂名，而不知道具体的产品名。如 TCL 电视工厂、海信电视工厂等。</li>
<li>创建对象的任务由多个具体子工厂中的某一个完成，而抽象工厂只提供创建产品的接口。</li>
<li>客户不关心创建产品的细节，只关心产品的品牌</li>
</ul>
<h4 id="模式的结构"><a href="#模式的结构" class="headerlink" title="模式的结构"></a>模式的结构</h4><p>工厂方法模式的主要角色如下：</p>
<ol>
<li>抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法 newProduct() 来创建产品。</li>
<li>具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li>
<li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。</li>
<li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li>
</ol>
<h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。</p>
<p>抽象工厂模式的主要角色如下。</p>
<ol>
<li>抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法 newProduct()，可以创建多个不同等级的产品。</li>
<li>具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</li>
<li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</li>
<li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间是多对一的关系。</li>
</ol>
<p>抽象工厂模式的结构同工厂方法模式的结构相似，不同的是其产品的种类不止一个，所以创建产品的方法也不止一个。</p>
<p><img src="http://c.biancheng.net/uploads/allimg/181114/3-1Q11416002NW.gif" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductTypeA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductTypeB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA</span> <span class="keyword">implements</span> <span class="title">ProductTypeA</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"product a"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductB</span> <span class="keyword">implements</span> <span class="title">ProductTypeB</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"product b"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductFacotry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">ProductTypeA <span class="title">productA</span><span class="params">(ProductTypeA productTypeA)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ProductTypeB <span class="title">productB</span><span class="params">(ProductTypeB productTypeB)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FacotryA</span> <span class="keyword">implements</span> <span class="title">ProductFacotry</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProductTypeA <span class="title">productA</span><span class="params">(ProductTypeA productTypeA)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"a product"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProductTypeB <span class="title">productB</span><span class="params">(ProductTypeB productTypeB)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"b product"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>指将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的<a href="http://c.biancheng.net/design_pattern/" target="_blank" rel="noopener">设计模式</a>被称为建造者模式。它是将一个复杂的对象分解为多个简单的对象，然后一步一步构建而成。它将变与不变相分离，即产品的组成部分是不变的，但每一部分是可以灵活选择的。</p>
<p>该模式的主要优点如下：</p>
<ol>
<li>封装性好，构建和表示分离。</li>
<li>扩展性好，各个具体的建造者相互独立，有利于系统的解耦。</li>
<li>客户端不必知道产品内部组成的细节，建造者可以对创建过程逐步细化，而不对其它模块产生任何影响，便于控制细节风险。</li>
</ol>
<p>其缺点如下：</p>
<ol>
<li>产品的组成部分必须相同，这限制了其使用范围。</li>
<li>如果产品的内部变化复杂，如果产品内部发生变化，则建造者也要同步修改，后期维护成本较大。</li>
</ol>
<p>建造者（Builder）模式的主要角色如下。</p>
<ol>
<li>产品角色（Product）：它是包含多个组成部件的复杂对象，由具体建造者来创建其各个零部件。</li>
<li>抽象建造者（Builder）：它是一个包含创建产品各个子部件的抽象方法的接口，通常还包含一个返回复杂产品的方法 getResult()。</li>
<li>具体建造者(Concrete Builder）：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。</li>
<li>指挥者（Director）：它调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品的信息。</li>
</ol>
<p><img src="http://c.biancheng.net/uploads/allimg/181114/3-1Q1141H441X4.gif" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String partA;</span><br><span class="line">    <span class="keyword">private</span> String partB;</span><br><span class="line">    <span class="keyword">private</span> String partC;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPartA</span><span class="params">(String partA)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.partA = partA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPartB</span><span class="params">(String partB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.partB = partB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPartC</span><span class="params">(String partC)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.partC = partC;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Product product = <span class="keyword">new</span> Product();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPartA</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPartB</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPartC</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.setPartA(<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.setPartB(<span class="string">"B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.setPartC(<span class="string">"C"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        builder.buildPartA();</span><br><span class="line">        builder.buildPartB();</span><br><span class="line">        builder.buildPartC();</span><br><span class="line">        <span class="keyword">return</span> builder.getResult();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。</p>
<p>代理模式的主要优点有：</p>
<ul>
<li>代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；</li>
<li><strong>代理对象可以扩展目标对象的功能</strong>；</li>
<li>代理模式能将客户端与目标对象分离，在一定程度 <strong>降低了系统的耦合度，增加了程序的可扩展性</strong>。</li>
</ul>
<p>其主要缺点是：</p>
<ul>
<li>代理模式会造成系统设计中类的数量增加；</li>
<li>在客户端和目标对象之间增加一个代理对象，会造成请求处理速度变慢；</li>
<li><strong>增加了系统的复杂度</strong>。</li>
</ul>
<p>代理模式的主要角色如下。</p>
<ol>
<li>抽象主题（Subject）类：通过接口或抽象类声明真实主题和代理对象实现的业务方法。</li>
<li>真实主题（Real Subject）类：实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。</li>
<li>代理（Proxy）类：提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。</li>
</ol>
<p><img src="http://c.biancheng.net/uploads/allimg/181115/3-1Q115093011523.gif" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"真实主题"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RealSubject realSubject;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (realSubject == <span class="keyword">null</span>) &#123;</span><br><span class="line">            realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line">        &#125;</span><br><span class="line">        preRequest();</span><br><span class="line">        realSubject.request();</span><br><span class="line">        postRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"访问之前的处理"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"访问之后的处理"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy();</span><br><span class="line">        proxy.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。适配器模式分为类结构型模式和对象结构型模式两种，前者类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。</p>
<p>该模式的主要优点如下：</p>
<ul>
<li>客户端通过适配器可以透明地调用目标接口。</li>
<li><strong>复用了现存的类</strong>，程序员不需要修改原有代码而重用现有的适配者类。</li>
<li>将目标类和适配者类解耦，解决了目标类和适配者类接口不一致的问题。</li>
<li>在很多业务场景中符合开闭原则。</li>
</ul>
<p>其缺点是：</p>
<ul>
<li>适配器编写过程需要结合业务场景全面考虑，可能会增加系统的复杂性。</li>
<li>增加代码阅读难度，降低代码可读性，过多使用适配器会使系统代码变得凌乱。</li>
</ul>
<p>类适配器：</p>
<p><img src="http://c.biancheng.net/uploads/allimg/181115/3-1Q1151045351c.gif" alt></p>
<p>对象适配器：</p>
<p><img src="http://c.biancheng.net/uploads/allimg/181115/3-1Q1151046105A.gif" alt></p>
<h3 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h3><p>指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式，它属于对象结构型模式。</p>
<p>装饰（Decorator）模式的主要优点有：</p>
<ul>
<li>装饰器是继承的有力补充，比继承灵活，在不改变原有对象的情况下，动态的给一个对象扩展功能，即插即用；</li>
<li>通过使用不用装饰类及这些装饰类的排列组合，可以实现不同效果；</li>
<li>装饰器模式完全遵守开闭原则；</li>
</ul>
<p>其主要缺点是：装饰模式会增加许多子类，过度使用会增加程序得复杂性。</p>
<p>装饰模式主要包含以下角色。</p>
<ol>
<li>抽象构件（Component）角色：定义一个抽象接口以规范准备接收附加责任的对象。</li>
<li>具体构件（ConcreteComponent）角色：实现抽象构件，通过装饰角色为其添加一些职责。</li>
<li>抽象装饰（Decorator）角色：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。</li>
<li>具体装饰（ConcreteDecorator）角色：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。</li>
</ol>
<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">implements</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建具体构件角色"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用具体构件角色的方法operation()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Component component;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.component = component;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        component.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecorator</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecorator</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.operation();</span><br><span class="line">        addFunction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加功能"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Component component = <span class="keyword">new</span> ConcreteComponent();</span><br><span class="line">        component.operation();</span><br><span class="line">        Component component1 = <span class="keyword">new</span> ConcreteDecorator(component);</span><br><span class="line">        component1.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p><strong>该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。策略模式属于对象行为模式，它通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。</strong></p>
<p>在现实生活中常常遇到实现某种目标存在多种策略可供选择的情况，例如，出行旅游可以乘坐飞机、乘坐火车、骑自行车或自己开私家车等，超市促销可以釆用打折、送商品、送积分等方法。</p>
<p>如果使用多重条件转移语句实现（即硬编码），不但使条件语句变得很复杂，而且增加、删除或更换算法要修改原代码，不易维护，违背开闭原则。如果采用策略模式就能很好解决该问题。</p>
<p>策略模式的主要优点如下：</p>
<ol>
<li>多重条件语句不易维护，而使用策略模式可以避免使用多重条件语句。</li>
<li>策略模式提供了一系列的可供重用的算法族，恰当使用继承可以把算法族的公共代码转移到父类里面，从而避免重复的代码。</li>
<li>策略模式可以提供相同行为的不同实现，客户可以根据不同时间或空间要求选择不同的。</li>
<li>策略模式提供了对开闭原则的完美支持，可以在不修改原代码的情况下，灵活增加新算法。</li>
<li>策略模式把算法的使用放到环境类中，而算法的实现移到具体策略类中，实现了二者的分离。</li>
</ol>
<p>其主要缺点如下。</p>
<ol>
<li>客户端必须理解所有策略算法的区别，以便适时选择恰当的算法类。</li>
<li>策略模式造成很多的策略类。</li>
</ol>
<p>策略模式的主要角色如下。</p>
<ol>
<li>抽象策略（Strategy）类：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现；</li>
<li>具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现。</li>
<li>环境（Context）类：持有一个策略类的引用，最终给客户端调用。</li>
</ol>
<p><img src="http://c.biancheng.net/uploads/allimg/181116/3-1Q116103K1205.gif" alt></p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">strategyMethod</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"具体策略A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"具体策略B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        strategy.strategyMethod();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Strategy <span class="title">getStrategy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context();</span><br><span class="line">        Strategy strategy = <span class="keyword">new</span> ConcreteStrategyA();</span><br><span class="line">        context.setStrategy(strategy);</span><br><span class="line">        context.strategyMethod();</span><br><span class="line">        System.out.println(<span class="string">"-----"</span>);</span><br><span class="line">        Strategy strategy1 = <span class="keyword">new</span> ConcreteStrategyB();</span><br><span class="line">        context.setStrategy(strategy1);</span><br><span class="line">        context.strategyMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV中的Canny边缘检测</title>
    <url>/2020/10/19/OpenCV%E4%B8%AD%E7%9A%84Canny%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="噪声去除"><a href="#噪声去除" class="headerlink" title="噪声去除"></a>噪声去除</h2><p>由于边缘检测很容易受到噪声影响，所以第一步是使用 5x5 的高斯滤波器去除噪声。</p>
<p>用到的函数：cv2.GaussianBlur()</p>
<p>参数：</p>
<ul>
<li>src: 源图像</li>
<li>ksize: 卷积框</li>
<li>sigmaX：表现在高斯曲线上就是曲线越高越尖，表现在滤波效果上就是模糊程度小</li>
<li>sigmaY：表现在高斯曲线上就是曲线越矮越平缓，表现在滤波效果上就是模糊程度大</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.GaussianBlur(img, (<span class="number">5</span>, <span class="number">5</span>), <span class="number">70</span>, <span class="number">70</span>)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="计算图像梯度"><a href="#计算图像梯度" class="headerlink" title="计算图像梯度"></a>计算图像梯度</h2><p>对平滑后的图像使用 Sobel 算子计算水平方向和竖直方向的一阶导数（图 </p>
<p>像梯度）（Gx 和 Gy）。根据得到的这两幅梯度图（Gx 和 Gy）找到边界的梯 </p>
<p>度和方向，公式如下： </p>
<p>$$ Edge Gradient(G) = \sqrt(G_x^2 + G_y^2) $$</p>
<p>$$ Angle(\theta) = tan^{-1} (\frac{G_x}{G_y} ) $$</p>
<p>($G_x, G_y$) 梯度的方向一般总是与边界垂直。梯度方向被归为四类：垂直，水平，和 两个对角线。</p>
<h2 id="非极大值抑制"><a href="#非极大值抑制" class="headerlink" title="非极大值抑制"></a>非极大值抑制</h2><p>在获得梯度的方向和大小之后，应该对整幅图像做一个扫描，去除那些非边界上的点。对每一个像素进行检查，看这个的梯度是不是周围具有相同梯度方向的点中最大的。</p>
<p><img src="https://images2.imgbox.com/75/ee/RxuqU0tS_o.png" alt></p>
<h2 id="滞后阈值"><a href="#滞后阈值" class="headerlink" title="滞后阈值"></a>滞后阈值</h2><p>现在要确定那些边界才是真正的边界。这时我们需要设置两个阈值：minVal 和 maxVal。当图像的灰度梯度高于 maxVal时被认为是真的边界，那些低于 minVal 的边界会被抛弃。如果介于两者之间的话，就要看这个点是否与某个被确定为真正的边界点相连，如果是就认为它也是边界点，如果不是就抛弃。</p>
<p><img src="https://images2.imgbox.com/a3/09/Pt2LMJDg_o.png" alt></p>
<h2 id="OpenCV中的Canny算法"><a href="#OpenCV中的Canny算法" class="headerlink" title="OpenCV中的Canny算法"></a>OpenCV中的Canny算法</h2><p>在 OpenCV 中只需要一个函数：cv2.Canny()，就可以完成以上几步。让我们看如何使用这个函数。这个函数的第一个参数是输入图像。第二和第三个分别是 minVal 和 maxVal。第三个参数设置用来计算图像梯度的 Sobel卷积核的大小，默认值为 3。最后一个参数是 L2gradient，它可以用来设定求梯度大小的方程。如果设为 True，就会使用我们上面提到过的方程，否则使用方程：</p>
<p>$$ Edege Gradient(G) = |G_x^2| + |G_y^2| $$</p>
<p>代替，默认值为 False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">"../imgs/test.jpeg"</span>)</span><br><span class="line"></span><br><span class="line">cv2.namedWindow(<span class="string">'image'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_nothing</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv2.createTrackbar(<span class="string">'minVal'</span>, <span class="string">'image'</span>, <span class="number">0</span>, <span class="number">500</span>, do_nothing)</span><br><span class="line">cv2.createTrackbar(<span class="string">'maxVal'</span>, <span class="string">'image'</span>, <span class="number">0</span>, <span class="number">500</span>, do_nothing)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    minVal = cv2.getTrackbarPos(<span class="string">'minVal'</span>, <span class="string">'image'</span>)</span><br><span class="line">    maxVal = cv2.getTrackbarPos(<span class="string">'maxVal'</span>, <span class="string">'image'</span>)</span><br><span class="line">    <span class="keyword">if</span> minVal &gt; maxVal:</span><br><span class="line">        cv2.setTrackbarPos(<span class="string">'minVal'</span>, <span class="string">'image'</span>, maxVal)</span><br><span class="line">    dst = cv2.Canny(img, minVal, maxVal)</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>, dst)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">5</span>) == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p>原图：</p>
<p><img src="https://images2.imgbox.com/53/f9/B6zaHYEb_o.jpeg" alt></p>
<p>结果：（可以通过调节滑动条来设置阈值 minVal 和 maxVal 进而来进行 Canny 边界检测。）</p>
<p><img src="https://images2.imgbox.com/0d/cb/jUxo9bif_o.png" alt></p>
]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>一小时学会Swagger</title>
    <url>/2020/10/18/%E4%B8%80%E5%B0%8F%E6%97%B6%E5%AD%A6%E4%BC%9ASwagger/</url>
    <content><![CDATA[<p>网上无意间看到的Swagger教程，一口气全部看完了，讲得很不错。</p>
<blockquote>
<p>秦疆老师SpringBoot课程扩展之Swagger学习； 这可能是全网最详细的Swagger视频了 从生活到代码，从简单到深入。风趣幽默,通俗易懂。</p>
</blockquote>
<iframe src="//player.bilibili.com/player.html?aid=64841843&bvid=BV1Y441197Lw&cid=112543089&page=3" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="height:500px;width=600px"> </iframe>

<a id="more"></a>

<p>讲 new Docket().enable(true|false) 和dev | prod | test等环境下的使用的时候因为环境变化所以配置的端口号改变却还用8080端口访问项目导致 swagger 报错导致进不去项目。</p>
]]></content>
      <categories>
        <category>Swagger</category>
      </categories>
      <tags>
        <tag>Swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>《宇宙よりも遠い場所》台词-第三话</title>
    <url>/2020/10/17/%E3%80%8A%E5%AE%87%E5%AE%99%E3%82%88%E3%82%8A%E3%82%82%E9%81%A0%E3%81%84%E5%A0%B4%E6%89%80%E3%80%8B%E5%8F%B0%E8%AF%8D-%E7%AC%AC%E4%B8%89%E8%AF%9D/</url>
    <content><![CDATA[<blockquote>
<p>无论何时，我们的第一步总是从好奇心开始。 不曾看过的风景，不曾听过的声音，不曾闻过的味道，不曾摸过的质感，不曾尝过的食物，以及不曾感受过的澎湃。 为了重拾不知何时忘却的记忆碎片和不知何时舍弃的感动的旅途。 在到达终点的时候，我们会想些什么呢？ 40度的咆哮，50度的疯狂，60度的呐喊，跨越荒芜的海源到达原生地域。 在地球的天边，远离文明的南方尽头。 这是向南极（比宇宙更远的地方）进发的四位女孩子的旅行物语。我们通过她们回想起生于明日的光辉！</p>
</blockquote>
<br>

<p>結月：軽く死ねますね。</p>
<a id="more"></a>

<p>決まり：高校生、南極、あるわけないよな。</p>
<p>報せ：どうぞ。</p>
<p>決まり：ありがとう、あつっ、なにホット。</p>
<p>報せ：や、おばあちゃんがまだ五月だから。</p>
<p>日向：五月も熱いものは熱い、私冷たいもの、後御茶菓子。</p>
<p>決まり：私もプッティン的ななにか。</p>
<p>報せ：やっぱり、なんかおかしくない？</p>
<p>日向：おかしい？あんな無茶な作戦をしつけておいてどの口がおかしい？</p>
<p>決まり：そうだよ、どれだけ恥ずかしかったと思ってるの？</p>
<p>報せ：しょうがない、他に方法がなかったから。</p>
<p>日向：それにしても、あの。</p>
<p>日向：ああ。</p>
<p>決まり：何々？</p>
<p>日向：女子高生、南極へ行く。</p>
<p>報せ：こてし予定されいる民間の南極観測隊に取材と共に女子高生が同行する。</p>
<p>決まり：同行するのはタレントの白石結月さん、南極への旅や昭和基地の生活など、ネット中継でリポート。</p>
<p>報せ：先捕ばれた。</p>
<p>決まり：こんなのあるんだ。この前隊員の人なにも言ってなかったけど。</p>
<p>日向：それを言ったらうるさいからな、これが。</p>
<p>報せ：リポート、記者、同行者、えーと、、白石結月、事務所は、ここに電話かけて。</p>
<p>日向：あ、かけてどうすんだよ。</p>
<p>報せ：私も同行できないか書きやて、南極観測隊員の娘で今女子高生、南極も詳しい。</p>
<p>日向：自分でかけろよ。</p>
<p>報せ：や、私はそう言うのはちょっと向いてないって言うか、人蒸しい。</p>
<p>日向：私こいつの性格だんだんわかる気がする。</p>
<p>決まり：私も。</p>
<p>日向：びー</p>
<p>報せ：えー、無理無理、、</p>
<p>日向：話せ、南極に行きたいんだろう。</p>
<p>報せ：ずるいです、、</p>
<p>A：はい、もしもし。</p>
<p>報せ：なにすんだよ。</p>
<p>結月：あのう、小淵沢白瀬さんですよね。</p>
<p>白瀬：はい、</p>
<p>結月：はじめまして、私白石結月と言います。</p>
<p>白瀬：白石？</p>
<p>日向：結月？</p>
<p>決まり：あれ、その名前、</p>
<p>決まり：ウィキにある、五歳から、CMなどで出演、フォローは３．8万人。</p>
<p>決まり：去年、「フォローバックは止まらない」歌手デビュ。</p>
<p>結月：軽く死ねますね、恥ずかしすぎて。</p>
<p>決まり：報せちゃん。</p>
<p>日向：写真写真！</p>
<p>結月：無断にSNSにアップするのは肖像権のに侵害になります。</p>
<p>決まり：後で色紙にサインと手形にいいですか？</p>
<p>日向：力士か？</p>
<p>白瀬：でも、どうしてこんなところに？</p>
<p>結月：はい、お話がありまして。</p>
<p>決まり：なに？</p>
<p>結月：私に代わりに南極に行きませんか？</p>
<p>日向：はい？</p>
<p>結月：南極、行きたいんですよね？</p>
<p>白瀬：どこに漏らしたの？掲示板？呟？Timeline?</p>
<p>決まり：私なにもしてないよ。</p>
<p>結月：あ、いえいえ、実はこの前、新宿で親睦会の時、私も呼ばれたんです。そこで皆さんのこと聞いて。</p>
<p>白瀬：なんだ。</p>
<p>日向：でも、変わるって。</p>
<p>結月：端的に言うと、行きたくないんです。北海道出身なので、寒いは飽き飽きますし。女子高生なら、私じゃなくても、企画の主旨が変わらないと思いますので。</p>
<p>白瀬：い、いいの？</p>
<p>日向：白瀬。</p>
<p>決まり：報せちゃん。きた！</p>
<p>白瀬：やた、やた、、だから言ったでしょう、私の作戦でやてれば、必ず行け。</p>
<p>決まり：でも。</p>
<p>白瀬：なにが無茶よ、なにが無理よ、行けたでしょう。やた、南極、ついに南極、待って待って、ペイギン。</p>
<p>決まり：痛そう。</p>
<p>日向：すいません、ばかで。</p>
<p>結月：いえいえ。</p>
<p>結月：出口はここだけですか？</p>
<p>白瀬：そうだけど。</p>
<p>結月：サンダル借ります、失礼します。</p>
<p>B：ご苦労様。</p>
<p>B：私、結月のマナージャーを務めております、白石民子と申します。</p>
<p>決まり：白石？</p>
<p>B：母でもあります。</p>
<p>日向：やっぱり。</p>
<p>結月：だから行かないって何度も言ってるでしょ。</p>
<p>B：そう言うわけにはは行かないの、仕事でしょ。</p>
<p>結月：もう、この人たちに譲れて言っちゃたし。</p>
<p>B：そんなこと、勝手にできると思ってるの？失礼。なんですか？</p>
<p>白瀬：いえ、その。</p>
<p>日向：南極のリポートですよね、こいつじゃダメですか？</p>
<p>決まり：かなり美人ですよ、ほら、芸能人みたい。</p>
<p>B：喋れます？</p>
<p>日向：も、もちろん。</p>
<p>白瀬：今、ここ、南極、天気は。</p>
<p>決まり：もしもし、聞こえませんよ。</p>
<p>日向：待って、しゃべりは私、私がやりますから。はい、こちら南極です、日本の皆さん見えますか？</p>
<p>B：ルクスは？</p>
<p>日向：え？</p>
<p>決まり：はっきり言った！</p>
<p>日向：うるさい！よし、このたら、これでどうだ？</p>
<p>B：失礼します。</p>
<p>日向：あら？</p>
<p>白瀬：なにやてるの？</p>
<p>決まり：あ、奇跡おきたと思ったんだよな。</p>
<p>日向：もうちょっと白瀬が喋りれていたらな。</p>
<p>決まり：それが嫌なら日向が、</p>
<p>日向：抜くていい。</p>
<p>決まり：思ってより気付く。</p>
<p>決まり：いっらしゃいます。</p>
<p>白瀬：きた！</p>
<p>日向：なにが？</p>
<p>決まり：説得？</p>
<p>白瀬：そう、あの子どうしても行かないって言ってらしくて。</p>
<p>B：説得してたら、あなたたちも同行者として、配信会はに推薦と言うことでどうでしょ。</p>
<p>白瀬：つまり、あの子行くと言わせれば。</p>
<p>決まり、日向：なるほど。</p>
<p>決まり：でも、結月ちゃんもうここにいないじゃないの。</p>
<p>白瀬：それが、日曜に東京で仕事があるから、土曜までホテルに泊まることしたらしくて。</p>
<p>日向：金と土、二日か。</p>
<p>白瀬：もたもた時間がない、行くよ。</p>
<p>決まり：もう十時すぎてるよ。</p>
<p>白瀬：じゃ、明日の朝、学校へ行く前、５時。</p>
<p>日向：待て待て、寝起き取るかよ。</p>
<p>白瀬：じゃ、６時？7時？いつでいいの？</p>
<p>日向：落ち着け。</p>
<p>日向：あれだけ嫌がてるってことはそれなりに行きたくない理由があるってことだろう。</p>
<p>白瀬：寒いから嫌だからじゃなくて？</p>
<p>日向：端的にって言ってただろう、他に言いたくない理由があるってことだよ。</p>
<p>決まり：日向ちゃん大人。</p>
<p>白瀬：理由って？</p>
<p>日向：それがわからないけどさ、まずそれを聞いてみるのが先なんじゃないのか。</p>
<p>決まり：理由が。</p>
<p>日向：な、やば、じゃな。</p>
<p>決まり：うん、また明日。</p>
<p>日向：どうした？</p>
<p>白瀬：自己嫌悪。</p>
<p>日向：あ？</p>
<p>白瀬：確かに、日向の言う通りだなと思ってたの、私さ、結局自分の気持ち優先させてばかりで、人のこと考えてないのこも。</p>
<p>日向：いまさら？冗談だよ。思いの強さとわがままは紙一重でって言うだろう。</p>
<p>白瀬：誰の言葉？</p>
<p>日向：私。</p>
<p>恵：今日はバイトは？</p>
<p>決まり：ないよ。</p>
<p>恵：じゃ、何か食べ行くか？</p>
<p>決まり：うん。</p>
<p>恵：南極か？ほら、大丈夫なの？</p>
<p>決まり：まあ、まだわからないけど、ごめんね、また今度。</p>
<p>日向：ここ？</p>
<p>白瀬：うん、三丸ご室。</p>
<p>決まり：どうする？ビビビ尾行？</p>
<p>日向：付けても意味ないだろう、偶然だ、偶然を装て。あれ、泊まってたんだ、どこいくの？</p>
<p>決まり：勉強？</p>
<p>結月：はい、学校いけない分追いつかないといけないので、ここだと、〜ありますし、夜も平気ですし。</p>
<p>決まり：偉いな。</p>
<p>結月：南極のことですよね、すみません、特に進展はなくて。</p>
<p>日向：ん、それはそれなんだけど。</p>
<p>白瀬：ちょっと、その前に、聞いておきたいことがあって。</p>
<p>結月：なんです？</p>
<p>白瀬：どうして行きたくないの？</p>
<p>結月：そんなに変ですか？</p>
<p>決まり：だって、南極行ったら、ペンギンいるよ、氷山もあるし、オオレルも見れるか。</p>
<p>結月：ははになにか言われましたね、行くよ説得してくれてなんとか。</p>
<p>白瀬：はい。</p>
<p>日向：弱い。</p>
<p>決まり：あ、でも、ほんとにききたいもあって、結月ちゃん行きたくない理由。</p>
<p>結月：聞いてどうするですか？</p>
<p>決まり：嫌なら、いいけど。</p>
<p>結月：多分皆さんはわからないと思いますけど、私友達いないです、今じゃないですよ、今まで、今まで一度も。4歳の頃からずっと子役の仕事として、でも忙しいから、友達と遊んでる暇がどんどんなくて、気付いたら、それを繰り返して。私ね、友達と喧嘩したことないですよ、するのはいつもお母さんばかり、だから、高校入ったら、高校で絶対に友達作ろうと思って、部活して、バイトして、友達と放課後買い食いして、カラオケって。でも、やっぱり、最初って大切じゃないのか、今頑張た入ってないと、そうゆ関係とか、グループとか、形ができちゃうって言うか。なんです？</p>
<p>決まり：だから、抱きしめたくなった。</p>
<p>結月：苦しい。</p>
<p>決まり：わかるよ、そう言うの、新学期とか私もすごく嫌だよ。</p>
<p>結月：わからないですよ。</p>
<p>決まり：わかるよ。</p>
<p>結月：分からないです、だから、皆さん、親友同士じゃないですか？</p>
<p>日向：親友？</p>
<p>結月：違うんですか？</p>
<p>日向：私たち出会って1ヶ月も経ってないぞ。</p>
<p>白瀬：一緒に遊びに行ってこともないし。</p>
<p>決まり：ただ同じところに向かおうとしているだけ、今のとことは、ね。</p>
<p>白瀬：ね。</p>
<p>決まり：ねー。</p>
<p>日向：遅くまで悪かったね。</p>
<p>白瀬：お母さん分かってるといいけど。</p>
<p>結月：こちらこそ、話せてなんか、ちょっとだけ落ち着けました、では。</p>
<p>決まり：バイバイ。</p>
<p>日向：で、これ、結論としてはどうだったんだ？</p>
<p>決まり：結論って？</p>
<p>日向：お前忘れのか？もともとは結月に説得しに来たんだろう？</p>
<p>決まり：お、そうだたんだ。あれ、でも、ここで結月ちゃんが断ることができれば、報せちゃんが代わりに、ん〜説得したら、一緒にいけて、あれ、でも、結月ちゃんが断ったら、報せちゃんが代わりに、なんかゴチャゴチャしてる。</p>
<p>日向：わかるよ。</p>
<p>白瀬：あの子が断ったら、どうせい別の芸能人見たいの人が代わりを務める。</p>
<p>決まり：あ、そうか。</p>
<p>白瀬：私たちは説得しかなかった、でも。</p>
<p>日向：ま、これでよかったじゃやない？</p>
<p>結月：初めてだ、あんなことされたの。友達って、あんな感じなのかな。</p>
<p>結月：決まりさん。</p>
<p>決まり：やっぱり、南極に行こう。</p>
<p>結月：なにやてるんです？怒られますよ。</p>
<p>日向：いいから、行くぞ。</p>
<p>白瀬：風強いから、早く。</p>
<p>結月：や、でも、私は。</p>
<p>決まり：手を伸ばして。</p>
<p>結月：変な夢。</p>
<p>決まり：おはよう。</p>
<p>結月：皆さん。</p>
<p>日向：だから言ったろう、早すぎるって、まだパジャンパジャン。</p>
<p>決まり：行ったのは白瀬ちゃんだよ。</p>
<p>白瀬：しかたないでしょ、東京まで行くんだから。</p>
<p>結月：東京？</p>
<p>決まり：ん、結月ちゃん東京で仕事だって言ってただから、もしよかったら、一緒に行こうかなって。</p>
<p>日向：いきなり押しかけて、ごめんな、こいつ連絡先聞いておきないから。</p>
<p>決まり：私？</p>
<p>白瀬：時間ある？</p>
<p>結月：はい。</p>
<p>決まり：ほんと？</p>
<p>決まり：じゃさじゃさ、東京に南極の、、</p>
<p>日向：ど、どうした？</p>
<p>日向：決まり！</p>
<p>白瀬：決まり！</p>
<p>決まり：え、私？だって、だって、</p>
<p>結月：だから、三人一緒なら行くっていてるの、一緒じゃかったら、行かないから。</p>
<p>決まり：はい、結月ちゃん、いくよ。</p>
<p>結月：はい。</p>
<p>白瀬：ペイギン。</p>
<p>結月：もふもふですね。</p>
<p>決まり：お、長い。</p>
<p>日向：これ中入れるぞ。</p>
<p>決まり：本当？お、結構狭いんだね。</p>
<p>白瀬：今はもっと新しい雪上車が使わってる見たいだけど。</p>
<p>日向：微速前進、ようそろ！</p>
<p>結月：船じゃないと思いますけど。</p>
<p>日向：二段ベッドは上だけだ。</p>
<p>決まり：室内は二十度以上だって、よかった。</p>
<p>結月：外はマイナス十度からね、鼻水出ますねきっと。</p>
<p>結月：もう少し寄ってください。</p>
<p>決まり：本物はもっと綺麗だろうね。</p>
<p>白瀬：もちろん、すごく綺麗だって、涙出てくるって、お母さん言ってた。</p>
<p>日向：でも、オオロラはなかなか見れないじゃないのか？</p>
<p>結月：聞いてことあります。</p>
<p>決まり：じゃ、もし本当に見ること出来たら、南極でオオロラを見た世界で唯一の高校生になれるかも。</p>
<p>結月：そうか、そうなったら、軽く死ねますね。</p>
]]></content>
      <categories>
        <category>日语</category>
      </categories>
      <tags>
        <tag>日语</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV学习笔记（二）</title>
    <url>/2020/10/17/OpenCV%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<ul>
<li>移动</li>
<li>旋转</li>
<li>仿射变换</li>
<li>用到的函数：cv2.getPerspectiveTransform()</li>
</ul>
<a id="more"></a>

<h2 id="扩展和缩放"><a href="#扩展和缩放" class="headerlink" title="扩展和缩放"></a>扩展和缩放</h2><h3 id="cv2-resize-函数用法"><a href="#cv2-resize-函数用法" class="headerlink" title="cv2.resize()函数用法"></a>cv2.resize()函数用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">void resize(InputArray src, OutputArray dst, Size dsize, double fx=<span class="number">0</span>, double fy=<span class="number">0</span>, int interpolation=INTER_LINEAR )</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">src：输入，原图像，即待改变大小的图像；</span><br><span class="line">dst：输出，改变大小之后的图像，这个图像和原图像具有相同的内容，只是大小和原图像不一样而已；</span><br><span class="line">dsize：输出图像的大小。如果这个参数不为0，那么就代表将原图像缩放到这个Size(width，height)指定的大小；如果这个参数为0，那么原图像缩放之后的大小就要通过下面的公式来计算：</span><br><span class="line">       dsize = Size(round(fx*src.cols), round(fy*src.rows))</span><br><span class="line"></span><br><span class="line">       其中，fx和fy就是下面要说的两个参数，是图像width方向和height方向的缩放比例。</span><br><span class="line"></span><br><span class="line">fx：width方向的缩放比例，如果它是0，那么它就会按照(double)dsize.width/src.cols来计算；</span><br><span class="line">fy：height方向的缩放比例，如果它是0，那么它就会按照(double)dsize.height/src.rows来计算；</span><br><span class="line">interpolation：这个是指定插值的方式，图像缩放之后，肯定像素要进行重新计算的，就靠这个参数来指定重新计算像素的方式，有以下几种：</span><br><span class="line">      INTER_NEAREST - 最邻近插值</span><br><span class="line">      INTER_LINEAR - 双线性插值，如果最后一个参数你不指定，默认使用这种方法</span><br><span class="line">      INTER_AREA -区域插值 resampling using pixel area relation. It may be a preferred method for image decimation, as it gives moire’-free results. But when the image is zoomed, it is similar to the INTER_NEAREST method.</span><br><span class="line">      INTER_CUBIC - 4x4像素邻域内的双立方插值</span><br><span class="line">      INTER_LANCZOS4 - 8x8像素邻域内的Lanczos插值</span><br></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>使用cv2.resize()可以实现对图片的大小调整。</p>
<p>三种插值方法：</p>
<ol>
<li>cv2.INTER_AREA</li>
<li>cv2.INTER_LINEER</li>
<li>cv2.INTER_CUBIC</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">"../imgs/pi.png"</span>)</span><br><span class="line">result1 = cv2.resize(img, <span class="literal">None</span>, fx=<span class="number">0.5</span>, fy=<span class="number">0.5</span>, interpolation=cv2.INTER_CUBIC)</span><br><span class="line">result2 = cv2.resize(img, <span class="literal">None</span>, fx=<span class="number">0.5</span>, fy=<span class="number">0.5</span>, interpolation=cv2.INTER_AREA)</span><br><span class="line">result3 = cv2.resize(img, <span class="literal">None</span>, fx=<span class="number">0.5</span>, fy=<span class="number">0.5</span>, interpolation=cv2.INTER_LINEAR)</span><br><span class="line"><span class="comment"># height, width = img.shape[0:2]</span></span><br><span class="line"><span class="comment"># result = cv2.resize(img, (2 * width, 2 * height), interpolation=cv2.INTER_CUBIC)</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    cv2.imshow(<span class="string">'INTER_CUBIC'</span>, result1)</span><br><span class="line">    cv2.imshow(<span class="string">'INTER_AREA'</span>, result2)</span><br><span class="line">    cv2.imshow(<span class="string">'INTER_LINEAR'</span>, result3)</span><br><span class="line">    <span class="comment"># cv2.imshow('image', img)</span></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">4</span>) == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="https://images2.imgbox.com/8c/39/GHMN9Lih_o.png" alt></p>
<p>-&gt;&gt;<a href="https://blog.csdn.net/guyuealian/article/details/85097633" target="_blank" rel="noopener">OpenCV图像缩放resize各种插值方式的比较</a></p>
<h2 id="图像的平移"><a href="#图像的平移" class="headerlink" title="图像的平移"></a>图像的平移</h2><p>使用cv2.wrapAffine()实现图像的平移。</p>
<p>函数 cv2.warpAffine() 的第三个参数的是输出图像的大小，它的格式<br>应该是图像的（宽，高）。应该记住的是图像的宽对应的是列数，高对应的是行<br>数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">"../imgs/pi.png"</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">height, width = img.shape</span><br><span class="line"><span class="comment"># 平移矩阵 100x50</span></span><br><span class="line">M = np.float32([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">100</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">50</span>]])</span><br><span class="line">result = cv2.warpAffine(img, M, (width, height), dst=<span class="literal">None</span>, borderMode=cv2.BORDER_REFLECT, borderValue=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    cv2.imshow(<span class="string">'result'</span>, result)</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">0</span>) == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="https://images2.imgbox.com/7e/4f/MjuCKjWa_o.png" alt></p>
<h2 id="图像的旋转"><a href="#图像的旋转" class="headerlink" title="图像的旋转"></a>图像的旋转</h2><p>opencv中对图像的旋转主要是先通过getRotationMatrix2D函数得到图像的旋转矩阵，然后再通过仿射变换函数warpAffine得到旋转后的图像。</p>
<p><strong>参数说明</strong>：</p>
<p>getRotationMatrix2D:</p>
<ul>
<li>center–表示旋转的中心点</li>
<li>angle–表示旋转的角度degrees</li>
<li>scale–图像缩放因子</li>
</ul>
<p>warpAffine:</p>
<ul>
<li>src – 输入的图像</li>
<li>M – 2 X 3 的变换矩阵.</li>
<li>dsize – 输出的图像的size大小</li>
<li>dst – 输出的图像</li>
<li>flags – 输出图像的插值方法</li>
<li>borderMode – 图像边界的处理方式</li>
<li>borderValue – 当图像边界处理方式为<code>BORDER_CONSTANT</code> 时的填充值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'../imgs/pi.png'</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">height, width = img.shape</span><br><span class="line">M = cv2.getRotationMatrix2D((width / <span class="number">2</span>, height / <span class="number">2</span>), <span class="number">270</span>, <span class="number">0.8</span>)</span><br><span class="line">result = cv2.warpAffine(img, M, dsize=<span class="literal">None</span>, dst=<span class="literal">None</span>, flags=cv2.BORDER_CONSTANT, borderValue=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    cv2.imshow(<span class="string">'result'</span>, result)</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">0</span>) == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p><img src="https://images2.imgbox.com/05/48/8NwA8q5F_o.png" alt></p>
<h2 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h2><p>在仿射变换中，原图中所有的平行线在结果图像中同样平行。为了创建这<br>个矩阵我们需要从原图像中找到三个点以及他们在输出图像中的位置。然后<br>cv2.getAffineTransform 会创建一个 2x3 的矩阵，最后这个矩阵会被传给<br>函数 cv2.warpAffine。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">"../imgs/pi.png"</span>)</span><br><span class="line">rows, cols, ch = img.shape</span><br><span class="line">pts1 = np.float32([[<span class="number">50</span>, <span class="number">50</span>], [<span class="number">200</span>, <span class="number">50</span>], [<span class="number">50</span>, <span class="number">200</span>]])</span><br><span class="line">pts2 = np.float32([[<span class="number">10</span>, <span class="number">100</span>], [<span class="number">200</span>, <span class="number">50</span>], [<span class="number">100</span>, <span class="number">250</span>]])</span><br><span class="line"></span><br><span class="line">M = cv2.getAffineTransform(pts1, pts2)</span><br><span class="line">dst = cv2.warpAffine(img, M, (cols, rows))</span><br><span class="line">plt.subplot(<span class="number">121</span>, plt.imshow(img), plt.title(<span class="string">'Input'</span>))</span><br><span class="line">plt.subplot(<span class="number">121</span>, plt.imshow(img), plt.title(<span class="string">'Output'</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    cols = int(cols)</span><br><span class="line">TypeError: int() argument must be a string, a bytes-like object or a number, not &apos;AxesImage&apos;</span><br></pre></td></tr></table></figure>

<h2 id="图像的翻转"><a href="#图像的翻转" class="headerlink" title="图像的翻转"></a>图像的翻转</h2><p><strong>参数说明</strong>：</p>
<ul>
<li>src – 输入的图像</li>
<li>dst – 输出的图像</li>
<li>flipCode – 翻转模式，flipCode==0垂直翻转（沿X轴翻转），flipCode&gt;0水平翻转（沿Y轴翻转），flipCode&lt;0水平垂直翻转（先沿X轴翻转，再沿Y轴翻转，等价于旋转180°）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">"../imgs/pi.png"</span>)</span><br><span class="line">flip_img = cv2.flip(img, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">    cv2.imshow(<span class="string">'flip_img'</span>, flip_img)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">0</span>) == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://images2.imgbox.com/42/8f/vV1TXa67_o.png" alt></p>
]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法进阶</title>
    <url>/2020/10/16/Markdown%E8%AF%AD%E6%B3%95%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<h1 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h1><p>生成文章目录:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[TOC]</span><br></pre></td></tr></table></figure>

<h1 id="图形"><a href="#图形" class="headerlink" title="图形"></a>图形</h1><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A[开始]--&gt;B(打开冰箱门)</span><br><span class="line">B--&gt;C(放入大象)</span><br><span class="line">C--&gt;D(光上冰箱门)</span><br><span class="line">D--&gt;E(结束)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A[开始]--&gt;B(打开冰箱门)</span><br><span class="line">B--&gt;C(放入大象)</span><br><span class="line">C--&gt;D(光上冰箱门)</span><br><span class="line">D--&gt;E(结束)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op1=&gt;operation: Identify objects</span><br><span class="line">op2=&gt;operation: Investigate business process</span><br><span class="line">op3=&gt;operation: Sketch</span><br><span class="line">op4=&gt;operation: Discuss</span><br><span class="line">cond=&gt;condition: Yes or No</span><br><span class="line">op5=&gt;operation: Draw a chart</span><br><span class="line">op6=&gt;operation: Modify</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op1-&gt;op2-&gt;op3-&gt;op4-&gt;cond</span><br><span class="line">cond(yes)-&gt;op5-&gt;e</span><br><span class="line">cond(no)-&gt;op6-&gt;op3</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op1=&gt;operation: Identify objects</span><br><span class="line">op2=&gt;operation: Investigate business process</span><br><span class="line">op3=&gt;operation: Sketch</span><br><span class="line">op4=&gt;operation: Discuss</span><br><span class="line">cond=&gt;condition: Yes or No</span><br><span class="line">op5=&gt;operation: Draw a chart</span><br><span class="line">op6=&gt;operation: Modify</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op1-&gt;op2-&gt;op3-&gt;op4-&gt;cond</span><br><span class="line">cond(yes)-&gt;op5-&gt;e</span><br><span class="line">cond(no)-&gt;op6-&gt;op3</span><br></pre></td></tr></table></figure>

<h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">小程序 -&gt;&gt; 小程序: wx.login()获取code</span><br><span class="line">小程序 -&gt;&gt; 服务器: wx.request()发送code</span><br><span class="line">服务器 -&gt;&gt; 微信服务器: code + appid + secret</span><br><span class="line">微信服务器 -&gt;&gt; 服务器: openid</span><br><span class="line">服务器 -&gt;&gt; 服务器: 根据openid确定用户并生成token</span><br><span class="line">服务器 -&gt;&gt; 小程序: token</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">小程序 -&gt;&gt; 小程序: wx.login()获取code</span><br><span class="line">小程序 -&gt;&gt; 服务器: wx.request()发送code</span><br><span class="line">服务器 -&gt;&gt; 微信服务器: code + appid + secret</span><br><span class="line">微信服务器 -&gt;&gt; 服务器: openid</span><br><span class="line">服务器 -&gt;&gt; 服务器: 根据openid确定用户并生成token</span><br><span class="line">服务器 -&gt;&gt; 小程序: token</span><br></pre></td></tr></table></figure>

<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[^keyword]:www.xxx.com</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<p>[^1]: some description</p>
<h1 id="待办事项"><a href="#待办事项" class="headerlink" title="待办事项"></a>待办事项</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- []</span><br><span class="line">- [x]</span><br></pre></td></tr></table></figure>

<ul>
<li><input disabled type="checkbox"> 待办事项一</li>
<li><input disabled type="checkbox"> 待办事项二</li>
<li><input checked disabled type="checkbox"> 已完成一</li>
</ul>
<h1 id="Latex公式"><a href="#Latex公式" class="headerlink" title="Latex公式"></a>Latex公式</h1><p>$ 表示行内公式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$x^2 + y^2 = 1$</span><br></pre></td></tr></table></figure>

<p>$x^2 + y^2 = 1$</p>
<p>$$ 整行公式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$ \sum_&#123;i=1&#125;^n a_i = 0 $$</span><br><span class="line">$$ f(x_1, x_x, \dots, x_n) = x_1^2 + x_2^2 + \dots + x_n^2 $$</span><br><span class="line">$$ \sum^&#123;j-1&#125;_&#123;k-0&#125;&#123;\widehat&#123;\gamma&#125;_&#123;kj&#125;&#123;z_k&#125;&#125; $$</span><br><span class="line">$ \sqrt&#123;3x-1&#125;+\sqrt[5]&#123;2y^5-4&#125; $</span><br><span class="line">$$ \cos (2\theta) = \cos^2 \theta - \sin^2 \theta $$</span><br><span class="line">输出带有分子分母的分数的语法为\frac&#123;分子&#125;&#123;分母&#125;，使用大括号把分子、分母都围住。</span><br><span class="line">$$ \lim\limits_&#123;x \to \infty&#125; \exp(-x) = 0 $$</span><br><span class="line">$$ \frac&#123;n!&#125;&#123;k!&#123;n-k&#125;!&#125; = \binom&#123;n&#125;&#123;k&#125; $$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">	\begin&#123;matrix&#125;</span><br><span class="line">    1 &amp; 2 &amp; 3 \\</span><br><span class="line">    4 &amp; 5 &amp; 6 \\</span><br><span class="line">    7 &amp; 8 &amp; 9</span><br><span class="line">    \end&#123;matrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$ \sum_{i=1}^n a_i = 0  $$</p>
<p>$$ f(x_1, x_x, \dots, x_n) = x_1^2 + x_2^2 + \dots + x_n^2 $$</p>
<p>$$ \sum^{j-1}<em>{k-0}{\widehat{\gamma}</em>{kj}{z_k}} $$</p>
<p>$\sqrt{3x-1}+\sqrt[5]{2y^5-4}$</p>
<p>$$\cos (2\theta) = \cos^2 \theta - \sin^2 \theta$$</p>
<p>$$ \lim\limits_{x \to \infty} \exp(-x) = 0 $$</p>
<p>$$ \frac{n!}{k!{n-k}!} = \binom{n}{k} $$<br>$$<br>\begin{matrix}<br>1 &amp; 2 &amp; 3 \<br>4 &amp; 5 &amp; 6 \<br>7 &amp; 8 &amp; 9<br>\end{matrix}<br>$$</p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>暂时安定下来</title>
    <url>/2020/10/15/%E6%9A%82%E6%97%B6%E5%AE%89%E5%AE%9A%E4%B8%8B%E6%9D%A5/</url>
    <content><![CDATA[<p>从九月十六号从福建三明出来，到今天正好一个月的时间。这段时间每天都在外面流浪，背着个包、拖着个行李箱，居无定所、想到哪儿就去哪儿，去了昆明、成都、广州、贵阳，本来想去张家界来着，但是因为中途遇到了初中同学，又刚好赶上国庆，就作罢了。朋友说我真自在，是不是打算要环游中国了。但是这其中的滋味，恐怕只有自己亲自去体验才能感受到了。</p>
<a id="more"></a>

<p>之前在广州听中介说布吉这边房子便宜，昨天在这儿租了个房子，这边房价真是承受不起，不大点地方，却差不多让我掏空腰包。这房子里应该是还住了三个人，今天有一个没去上班，中午在厨房煮面，瞅到一眼。应该打个招呼的，但是想到也不长住，以后也不会有什么交集，算了。</p>
<p>一个之前关系很好的同学在这边工作，去年想换工作的时候曾经联系过，应该请人家吃个饭的，但是现在这处境不是很好意思，先等等吧，安定下来再联系吧。</p>
<p>昨天晚上帮一个网友搭博客，无意间在贴吧里看到一位同届并且即将毕业的化工研三校友自杀了，心里受到点刺激。再怎么样毕业了还能找个不错的工作，或者考个公务员做个人上人，年纪轻轻前途光明，却在这时候选择了remake。相比之下，我呢？毕业两年一事无成，我才是个真真正正的FW，虽然也时常有这种想法，但是想到家人就觉得即便是混吃等死也要好好活着，我们的生命不仅是自己的，也是亲人的。可能自己确实是解脱了，留个亲人朋友的只有悲痛。我佩服他的勇气，但是感觉他只是一时没想通，钻牛角尖了，如果当时能有个人和他沟通交流一下，就不会发生这样的悲剧。</p>
<p>在很多城市都看到路边的宣传标语：学会自己解压。对于我来说，还是多逛逛厕所吧，有时候觉得真的坚持不下去了，去厕所和蛆宝宝们嘴臭几句，看看大家的故事会，一下心态就转变过来了，几遍是活成了垃圾堆里的一只老鼠，也不要想着remake，也要笑着活下去。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>设置git初始化默认分支为main</title>
    <url>/2020/10/09/%E8%AE%BE%E7%BD%AEgit%E5%88%9D%E5%A7%8B%E5%8C%96%E9%BB%98%E8%AE%A4%E5%88%86%E6%94%AF%E4%B8%BAmain/</url>
    <content><![CDATA[<p>好久没上传代码到 GitHub 了，前两天新建了一个仓库，然后习惯性的执行 <code>git push origin master </code> , 过了好一会儿才在 GitHub 页面上看到两个分支：main 和 master。</p>
<p>这两天陆陆续续出现好几次，网上查了一下才知道从10月份起，GitHub 的默认分支名不再是master，而是main。据说是因为master这个词和种族主义有关系，现在的人真是玻璃心啊。</p>
<p>git 初始化默认分支名是master，每次新建仓库都要改默认分支名很麻烦，就查了一下设置 git 初始化分支名的方法，找到两种解决办法：</p>
<a id="more"></a>

<ul>
<li><p><strong>初始化后切换分支</strong> &gt;&gt; <a href="https://stackoverflow.com/a/42871621" target="_blank" rel="noopener">https://stackoverflow.com/a/42871621</a></p>
<p>As you noticed, there is no parameter for <code>git init</code> for the branch name, so two commands will have to do.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git checkout -b trunk</span><br></pre></td></tr></table></figure>

<p>This creates a new repository with <code>trunk</code> as the current branch instead of <code>master</code>. The branch <code>master</code> does not actually exist–the branches don’t get created until they have at least one commit. Until the branch gets created, the branch only exists in <code>.git/HEAD</code>, which explains why the <code>master</code> branch will disappear when you switch to <code>trunk</code>.</p>
<p>If you’ve already committed, you can run <code>git branch -m</code> instead:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">touch file.txt</span><br><span class="line">git add file.txt</span><br><span class="line">git commit -m &apos;commit 1&apos;</span><br><span class="line">git branch -m trunk</span><br></pre></td></tr></table></figure>

<p>This renames the branch from <code>master</code> to <code>trunk</code> once it’s created.</p>
<p>This does seem a bit clunky since the mechanism is different depending on whether the repository is empty, but it works.</p>
</li>
</ul>
<ul>
<li><p><strong>升级 git 使用 git 全局配置</strong> &gt;&gt; <a href="https://stackoverflow.com/a/63136920" target="_blank" rel="noopener">https://stackoverflow.com/a/63136920</a></p>
<p>Since <strong>Git 2.28</strong> (released July 27, 2020) a new configuration option, <code>init.defaultBranch</code> is being introduced to replace the hard-coded term <code>master</code>.</p>
<p>Default remains to <code>master</code>!</p>
<p>The user can override the default value of the configuration variable with:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global init.defaultBranch main</span><br></pre></td></tr></table></figure>

<p>Read the git doc chapter for further details <a href="https://github.blog/2020-07-27-highlights-from-git-2-28/#introducing-init-defaultbranch" target="_blank" rel="noopener">Introducing init.defaultBranch</a></p>
<p>升级 git 还要配置 zsh，太麻烦了，没试。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程</title>
    <url>/2020/10/08/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p>创建线程的两种方式：</p>
<ul>
<li>继承Thread类；</li>
<li>实现Runnable接口。</li>
</ul>
<a id="more"></a>

<ol>
<li>继承Thread类：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"My thread."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        myThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>当一个类已经继承了其他类时，就只能实现Runnable接口：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">OtherClass</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"my thread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先创建一个Thread实例，再传入自己的MyThread实例</span></span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="keyword">new</span> Thread(myThread).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>Thread类实现了Runnable接口。</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> priority;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当线程有返回值时，必须实现Callable接口，执行Callable任务后返回Future对象，调用Future对象的get()方法获取返回值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    MyThread2(<span class="keyword">int</span> i) &#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i * i * i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> taskSize = <span class="number">10</span>;</span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(taskSize);</span><br><span class="line">        List&lt;Future&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; taskSize; i++) &#123;</span><br><span class="line">            Callable callable = <span class="keyword">new</span> MyThread2(i);</span><br><span class="line">            Future future = pool.submit(callable);</span><br><span class="line">            list.add(future);</span><br><span class="line">        &#125;</span><br><span class="line">        pool.shutdown();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Future future : list) &#123;</span><br><span class="line">            System.out.println(future.get().toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>new Thread的弊端如下：</strong></p>
<p>a. 每次new Thread新建对象性能差。<br>b. 线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或oom。<br>c. 缺乏更多功能，如定时执行、定期执行、线程中断。</p>
<p><strong>相比new Thread，Java提供的四种线程池的好处在于：</strong></p>
<p>a. 重用存在的线程，减少对象创建、消亡的开销，性能佳。<br>b. 可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞。<br>c. 提供定时执行、定期执行、单线程、并发数控制等功能。</p>
<p>参见 &gt;&gt; <a href="https://blog.csdn.net/u011974987/article/details/51027795" target="_blank" rel="noopener">Java 四种线程池的用法分析</a></p>
<p>Java提供的4种线程池：</p>
<ul>
<li>newCachedThreadPool：创建一个可缓存线程池，如果线程池长度超过处理需要，<strong>可灵活回收空闲线程</strong>，若无可回收，则新建线程。</li>
<li>newFixedThreadPool：创建一个定长线程池，<strong>可控制线程最大并发数</strong>，超出的线程会在队列中等待。</li>
<li>newSchuduledThreadPool：创建一个定长线程池，<strong>支持定时及周期性任务执行</strong>。</li>
<li>newSingleThreadPool：创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，<strong>保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行</strong>。</li>
</ul>
<p>newCachedThreadPool</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService pool = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(i * <span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            pool.execute(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + index));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>线程池为无限大，当执行第二个任务时第一个任务已经完成，会复用执行第一个任务的线程，而不用每次新建线程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pool-1-thread-1 0</span><br><span class="line">pool-1-thread-1 1</span><br><span class="line">pool-1-thread-1 2</span><br><span class="line">pool-1-thread-1 3</span><br><span class="line">pool-1-thread-1 4</span><br><span class="line">pool-1-thread-1 5</span><br><span class="line">pool-1-thread-1 6</span><br><span class="line">pool-1-thread-1 7</span><br><span class="line">pool-1-thread-1 8</span><br><span class="line">pool-1-thread-1 9</span><br></pre></td></tr></table></figure>

<p>newFixedThreadPool</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService pool = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> x = i;</span><br><span class="line">    pool.execute(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"  "</span> + x);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>任务数超出最大线程数，超出的线程会等待：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pool-1-thread-2  1</span><br><span class="line">pool-1-thread-3  2</span><br><span class="line">pool-1-thread-1  0</span><br><span class="line">pool-1-thread-2  3</span><br><span class="line">pool-1-thread-1  5</span><br><span class="line">pool-1-thread-3  4</span><br><span class="line">pool-1-thread-2  6</span><br><span class="line">pool-1-thread-1  7</span><br><span class="line">pool-1-thread-3  8</span><br><span class="line">pool-1-thread-2  9</span><br></pre></td></tr></table></figure>

<p>newSchuduledThreadPool</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ScheduledExecutorService pool = Executors.newScheduledThreadPool(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 延迟 1 秒后每 3 秒执行一次</span></span><br><span class="line">pool.scheduleAtFixedRate(() -&gt; System.out.println(Thread.currentThread().getName()), <span class="number">1</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>

<p>newSingleThreadPool</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService pool = Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">    pool.execute(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pool-1-thread-1 0</span><br><span class="line">pool-1-thread-1 1</span><br><span class="line">pool-1-thread-1 2</span><br><span class="line">pool-1-thread-1 3</span><br><span class="line">pool-1-thread-1 4</span><br><span class="line">pool-1-thread-1 5</span><br><span class="line">pool-1-thread-1 6</span><br><span class="line">pool-1-thread-1 7</span><br><span class="line">pool-1-thread-1 8</span><br><span class="line">pool-1-thread-1 9</span><br></pre></td></tr></table></figure>

<p>线程的生命周期：</p>
<p>新建New：JVM分配内存，并初始化成员变量的值；</p>
<p>就绪Runnable：创建方法调用栈和程序计数器；</p>
<p>运行 Running：获得CPU，执行run()方法；</p>
<p>阻塞 Blocked：让出CPU时间片，停止运行；</p>
<p>死亡 Dead：正常结束，异常结束或调用stop()方法。</p>
<blockquote>
<p>wait()和sleep()的关键的区别在于，sleep()方法属于Thread类，wait()方法属于Object类，wait()是用于线程间通信的，而sleep()是用于短时间暂停当前线程。更加明显的一个区别在于，<strong>当一个线程调用wait()方法的时候，会释放它锁持有的对象的管程和锁，但是调用sleep()方法的时候，不会释放他所持有的管程。</strong></p>
<p>而当调用 wait()方法的时候，线程会放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象调用 notify()方法后本线程才进入对象锁定池准备获取对象锁进入运行状态。</p>
</blockquote>
<p>终止线程的3种方式 &gt; <a href="https://blog.csdn.net/Smile_Miracle/article/details/71550548" target="_blank" rel="noopener">Java中如何优雅正确的终止线程</a></p>
<ol>
<li><p>使用stop()方法</p>
<p>thread.stop()调用之后，创建子线程的线程就会抛出 ThreadDeatherror 的错误，并且会释放子线程所持有的所有锁。一般任何进行加锁的代码块，都是为了保护数据的一致性，如果在调用thread.stop()后导致了该线程所持有的所有锁的突然释放(不可控制)，那么被保护数据就有可能呈现不一致性，其他线程在使用这些被破坏的数据时，有可能导致一些很奇怪的应用程序错误。因此，并不推荐使用 stop 方法来终止线程。</p>
</li>
<li><p>使用volatile标志位：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"创建"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"终止"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyRunnable myRunnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(myRunnable, i + <span class="string">" "</span>);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">2000L</span>);</span><br><span class="line">        System.out.println(<span class="string">"-------"</span>);</span><br><span class="line">        myRunnable.flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 创建</span><br><span class="line">2 创建</span><br><span class="line">1 创建</span><br><span class="line">-------</span><br><span class="line">2 终止</span><br><span class="line">0 终止</span><br><span class="line">1 终止</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用interrupt方式</p>
<ol>
<li><p>线程处于阻塞状态时：</p>
<p>如使用了 sleep,同步锁的 wait,socket 中的 receiver,accept 等方法时，会使线程处于阻塞状态。当调用线程的 interrupt()方法时，会抛出 InterruptException 异常。阻塞中的那个方法抛出这个异常，通过代码捕获该异常，然后 break 跳出循环状态，从而让我们有机会结束这个线程的执行。通常很多人认为只要调用 interrupt 方法线程就会结束，实际上是错的， 一定要先捕获 InterruptedException 异常之后通过break 来跳出循环，才能正常结束 run 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread5</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread5 thread5 = <span class="keyword">new</span> MyThread5();</span><br><span class="line">        thread5.start();</span><br><span class="line">        <span class="keyword">boolean</span> interrupted = thread5.isInterrupted();</span><br><span class="line">        <span class="keyword">if</span> (!interrupted) &#123;</span><br><span class="line">            thread5.interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">	at java.base/java.lang.Thread.sleep(Native Method)</span><br><span class="line">	at ch4.MyThread5.run(MyThread5.java:<span class="number">12</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>线程未处于阻塞状态：</p>
<p>使用 isInterrupted()判断线程的中断标志来退出循环。当使用<br>interrupt()方法时，中断标志就会置 true，和使用自定义的标志来控制循环是一样的道理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread5</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"线程开始。。。"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">200000</span>);</span><br><span class="line">            System.out.println(<span class="string">"线程结束。"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"在沉睡中被停止, 进入catch， 调用isInterrupted()方法的结果是："</span> + <span class="keyword">this</span>.isInterrupted());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread5 thread5 = <span class="keyword">new</span> MyThread5();</span><br><span class="line">        thread5.start();</span><br><span class="line">        thread5.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output</span><br><span class="line">线程开始。。。</span><br><span class="line">在沉睡中被停止, 进入<span class="keyword">catch</span>， 调用isInterrupted()方法的结果是：<span class="keyword">false</span></span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">	at java.base/java.lang.Thread.sleep(Native Method)</span><br><span class="line">	at ch4.MyThread5.run(MyThread5.java:<span class="number">13</span>)</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ol>
<p>线程基本方法：</p>
<p>yield：线程的礼让指的是先将线程的资源让出去，让别的线程先执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethod</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    Thread.yield(); <span class="comment">//线程礼让</span></span><br><span class="line">                    System.out.println(<span class="string">"玩耍线程礼让执行 ***********************"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"、 x = "</span> + x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"玩耍的线程"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"【霸道的main主线程】 x = "</span> + x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">玩耍线程礼让执行 ***********************</span><br><span class="line">【霸道的main主线程】 x = 0</span><br><span class="line">【霸道的main主线程】 x = 1</span><br><span class="line">【霸道的main主线程】 x = 2</span><br><span class="line">【霸道的main主线程】 x = 3</span><br><span class="line">【霸道的main主线程】 x = 4</span><br><span class="line">【霸道的main主线程】 x = 5</span><br><span class="line">【霸道的main主线程】 x = 6</span><br><span class="line">【霸道的main主线程】 x = 7</span><br><span class="line">【霸道的main主线程】 x = 8</span><br><span class="line">【霸道的main主线程】 x = 9</span><br><span class="line">玩耍的线程、 x = 0</span><br><span class="line">玩耍的线程、 x = 1</span><br><span class="line">玩耍的线程、 x = 2</span><br><span class="line">玩耍线程礼让执行 ***********************</span><br><span class="line">玩耍的线程、 x = 3</span><br><span class="line">玩耍的线程、 x = 4</span><br><span class="line">玩耍的线程、 x = 5</span><br><span class="line">玩耍线程礼让执行 ***********************</span><br><span class="line">玩耍的线程、 x = 6</span><br><span class="line">玩耍的线程、 x = 7</span><br><span class="line">玩耍的线程、 x = 8</span><br><span class="line">玩耍线程礼让执行 ***********************</span><br><span class="line">玩耍的线程、 x = 9</span><br></pre></td></tr></table></figure>

<p>join: 线程强制执行，指的当满足某些条件之后，某一个线程对象将一直可以独占资源，一直到该线程的程序执行结束。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethod</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread mainThread = Thread.currentThread(); <span class="comment">//获得主线程</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == <span class="number">3</span>) &#123;  <span class="comment">//如果x == 3，就强制执行主线程</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        mainThread.join();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"、 x = "</span> + x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"玩耍的线程"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            System.out.println(<span class="string">"【霸道的main主线程】 x = "</span> + x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">玩耍的线程、 x = 0</span><br><span class="line">玩耍的线程、 x = 1</span><br><span class="line">玩耍的线程、 x = 2</span><br><span class="line">【霸道的main主线程】 x = 0</span><br><span class="line">【霸道的main主线程】 x = 1</span><br><span class="line">【霸道的main主线程】 x = 2</span><br><span class="line">【霸道的main主线程】 x = 3</span><br><span class="line">【霸道的main主线程】 x = 4</span><br><span class="line">【霸道的main主线程】 x = 5</span><br><span class="line">【霸道的main主线程】 x = 6</span><br><span class="line">【霸道的main主线程】 x = 7</span><br><span class="line">【霸道的main主线程】 x = 8</span><br><span class="line">【霸道的main主线程】 x = 9</span><br><span class="line">玩耍的线程、 x = 3</span><br><span class="line">玩耍的线程、 x = 4</span><br><span class="line">玩耍的线程、 x = 5</span><br><span class="line">玩耍的线程、 x = 6</span><br><span class="line">玩耍的线程、 x = 7</span><br><span class="line">玩耍的线程、 x = 8</span><br><span class="line">玩耍的线程、 x = 9</span><br></pre></td></tr></table></figure>

<p>sleep： 休眠的主要特点是可以自动实现线程的唤醒，以继续进行后续的处理。但是需要注意的是，如果现在有多个线程对象，休眠也是有多个先后顺序的。</p>
<p>wait和notify：</p>
<ul>
<li>synchronized关键词用于互斥访问。</li>
<li>为了让一个方法是同步的，简单的添加synchronized关键词到它们的声明上。那么同一个对象上没有两个同步方法的调用可以相互交错。</li>
<li>同步语句必须指定提供内在锁的对象。当使用synchronized(this)时候，必须避免使用同步其他对象方法的调用。</li>
<li>wait()告诉调用的线程放弃监视器和进入休眠状态，直到其他线程进入相同的监视器和调用notify()。</li>
<li>notify()唤醒在相同对象上第一个调用wait()的线程。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadB b = <span class="keyword">new</span> ThreadB();</span><br><span class="line">        b.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (b) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"Waiting for b to complete..."</span>);</span><br><span class="line">                b.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"Total is: "</span> + b.total);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> total;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                total += i;</span><br><span class="line">            &#125;</span><br><span class="line">            notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>25岁的最后一天</title>
    <url>/2020/09/30/25%E5%B2%81%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9/</url>
    <content><![CDATA[<p>刚才把之前写的内容都整理了一遍，挂的图片能换的都换了，还有些现在看起来很尴尬的内容直接删掉了，折腾一次真累。歇了一下打开日历才发现今天已经是9月30号了。今年很巧的是中秋节和国庆节碰在了一起，在贴吧里看到很多学生还因为假期的问题耿耿于怀，但是对于像我一样的待业青年，好像每一天都是假期，只不过心里不是那么放松。</p>
<br>

<a id="more"></a>

<p>昨天下午回到空无一人的家里，虽然什么吃的也没有，但是家里的干净舒服的大床倒是让我好好睡了一觉，很久没有睡得这么舒服了。以前总是觉得买房的人很傻，买完房子就要一直住在一个地方，而且还要背负繁重的房贷。但是最近我突然有了很强烈的想买房的愿望，自己的房子才是真正能落脚的地方。现在就想好好工作努力攒钱，希望能在一两年之内有一套自己的房子，不管是在哪个城市，偏远一点也无所谓。</p>
<br>

<p>昨天晚上联系上了一个住得不远的初中同学，刚好放假她也在家，聊了一会儿通过她介绍了一个房东，希望能找到一个地方安静的待一段时间。</p>
<br>

<p>25岁今天就要画上句号了，希望26岁能交上好运吧。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>七牛云备案域名过期导致图片无法查看和下载</title>
    <url>/2020/09/30/%E4%B8%83%E7%89%9B%E4%BA%91%E5%A4%87%E6%A1%88%E5%9F%9F%E5%90%8D%E8%BF%87%E6%9C%9F%E5%AF%BC%E8%87%B4%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%9F%A5%E7%9C%8B%E5%92%8C%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<p>之前一直用七牛云做博客图床，七牛云做得还是挺不错的，速度快、稳定并且还有免费空间和流量。但是前段时间备案的域名除了点问题，导致域名被七牛云删除了。</p>
<a id="more"></a>

<p><img src="https://images2.imgbox.com/15/5f/zAPOVGJv_o.png" alt="截图"></p>
<p>域名删除影响非常大，之前在博客里引用的图片无法查看，并且登录到七牛云后台也无法预览、下载图片，整个服务完全不可用了。于是在网上查了许多资料找到了解决方法。</p>
<p>官方开发了工具来管理存储的文件，其中一个命令行工具叫“qrsctl”。可以通过命令行来做一些上传下载、移动复制和空间管理等操作。</p>
<p>安装及使用方法 &gt;&gt;  <a href="https://developer.qiniu.com/kodo/tools/1300/qrsctl" target="_blank" rel="noopener">命令行辅助工具(qrsctl)</a></p>
<p>使用下面的shell脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将存储空间名称换为自己的空间名称</span></span><br><span class="line">imgs=`./qrsctl listprefix youyou-2608 ''`</span><br><span class="line"></span><br><span class="line">i=0 </span><br><span class="line">echo $imgs | tr " " "\n" | while read line</span><br><span class="line">do</span><br><span class="line">    if(($i&gt;0))</span><br><span class="line">    then</span><br><span class="line">        echo $line</span><br><span class="line">        ./qrsctl get youyou-2608 $line ./$line</span><br><span class="line">    fi</span><br><span class="line">    i=$(($i+1))</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>给脚本添加执行权限，然后运行即可。</p>
<p>但是用脚本下载图片时遇到一个问题：名称中带有“/”这种在Linux系统被用作目录分隔符的图片无法下载，会报“找不到该文件”的错误，因为它把“/”前的部分当作目录、而把后半部分当作文件名，当然找不到文件了。</p>
<p>在七牛云提了工单之后，七牛云的工程师说是这个工具本身有问题。没办法，最后只能一个一个去改文件名（域名被删除后还能改文件名），然后再下载。不得不说，工作量不是一般的大。</p>
<p>最后就是图床的问题了，看了许多网上推荐的图床感觉都不太靠谱，倒下一个图床又需要重新折腾一遍。想着后面有时间自己搭建一个图床，这样比较安心一些。</p>
]]></content>
      <categories>
        <category>博客维护</category>
      </categories>
      <tags>
        <tag>博客维护</tag>
      </tags>
  </entry>
  <entry>
    <title>《宇宙よりも遠い場所》台词-第二话</title>
    <url>/2020/09/22/%E3%80%8A%E5%AE%87%E5%AE%99%E3%82%88%E3%82%8A%E3%82%82%E9%81%A0%E3%81%84%E5%A0%B4%E6%89%80%E3%80%8B%E5%8F%B0%E8%AF%8D-%E7%AC%AC%E4%BA%8C%E8%AF%9D/</url>
    <content><![CDATA[<p>第二話：歌舞伎町のフリマントル</p>
<p>我终于踏出这一步了，去往没有你的世界。</p>
<a id="more"></a>


<p>報せ：白瀬は十一月中旬に日本を出航、南極に向けて海を南下、途中フリーマントルに寄港。<br>決まり：オーストラリアだ。<br>報せ：ここで補給と観測隊員の乗り込みを行って、十二月の上旬、南極大陸に向けて出航するの。<br>決まり：日本から乗って行くんじゃなんだ。<br>報せ：それは昔の話、今はフリーマントルから乗船、帰るにはシドニーから飛行機って言うのが普通。<br>決まり：え〜<br>報せ：そこで、私たちは白瀬がフリーマントルに寄港する時期に合わせて日本を立ち、フリーマントルに向かう。<br>決まり：うんうん。<br>報せ：そして、ここで白瀬に乗り込み、南極へ。<br>決まり：乗れるの？<br>報せ：基本的に南極観測は国家事業、成員は自衛隊員が務め、観測隊員は厳しい審査と訓練に合格した人間だけ、高校生は絶対に無理。ただ、今年は特別。<br>決まり：今年は？民間南極観測隊、三年ぶりに発遣決まる。（その笑顔を見た時に、なんか心がブカブカした、あ、生しゃぶる言って、多分これだと思った。私は今、人生で一番途方もなくて、とんでもない大きい計画を立ってている。）<br>決まり：あれ、もしかして、 せいすいかん？<br>報せ：うん。<br>決まり：あは〜</p>
<p>決まり：あ〜これも十八歳以上か。<br>恵：なに？バイト？<br>決まり：おはよう、うん、昨日話したでしょう、飛行機代。報せちゃんが用意しとけって。<br>恵：南極か。<br>決まり：うん、行ってる間、学校を休むことになるから、出席数を稼いでおけって。あっ、なにこれ？超いい！<br>恵：なに？<br>決まり：高校生女子募集、接客業、男性とお喋りしたり、お散歩したりする仕事ですって、内容によっては、月100万以上も夢じゃないかも、お〜<br>恵：見るかったら終わりだぞ。<br>決まり：大丈夫だよ、バイトするって学校には届け出すから。<br>恵：なにも分かってないな、お金はともかくとして、行けるのか本当に？<br>決まり：うん！報せちゃん言ってた、その今年でる民間の南極観測隊っていうに知り合いがあるからって、あ。<br>恵：調べて見たけど、ヤバそうだぞ。<br>決まり：4年前、新基地完成と新型砕氷艦就航に伴い、民間に払い下げれた二代目白瀬と昭和基地だが、その維持費と活動費調達に苦慮し、三年ぶりに発遣した今回の観測隊も、前回スポンサーだった企業は次々と撤退を表明して終わり、このままでは、隊員の安全が確保されないので、計画をそのまま対する批判の声も相次いているって。<br>先生：玉木さん、玉木さん、、<br>決まり：はっはい！<br>先生：つづけを読んでいただけますまいか？<br>決まり：はっはい、資金面の問題と合わせて今後も、はわ〜<br>先生：はわ、の先を聞かせていただきます。</p>
<p>決まり：あ、まだこんなにある、書き取りなんて小学校以来だよ。<br>恵：授業中に読んでるからだろう。<br>決まり：だって、我慢できなかっただもん、それで？<br>恵：それでもなにもない、一応、今のところ計画が中止になったとは書いてないけど。<br>決まり：じゃ、大丈夫だね。<br>恵：そうか？仮に中止にならなかったとしても、そう簡単に乗れるか？いくら民間だからって。<br>決まり：ほら、報せちゃん観測隊員の娘だし。<br>恵：コンサートの間席者席じゃないんだから、そんなホイホイ乗せてくれるわけないと思うけどな。<br>決まり：そうか、だよね。<br>恵：この後、会うんだろう？一度ちゃんと聞いて見た方が良いぞ。<br>決まり：うん、分かった、はわ！</p>
<p>決まり：ごめん。<br>報せ：時間は厳守！南極いくなら尚更よ、数分の遅れが生死に関わるだから。<br>決まり：だから、先生に怒られたって送ったじゃん。<br>報せ：バイトは？<br>決まり：え？<br>報せ：今日までに決めるって。<br>決まり：そうだけど、とりあえず、オーストラリアまでの飛行機代でょう？夏休みに纏めてやればなんとか。<br>報せ：いざという時のために、お金が多い方がいい、私調べて置いたから。<br>決まり：ほんど？<br>報せ：高校生女子、接客業で、男性とおしゃべりしたり、お散歩したりするバイトなんだって、かなりの時給でしょう？<br>決まり：うん、そうだけど。<br>報せ：そ、そうなの？<br>決まり：や、私も恵ちゃんに襲わたんだけど、報せちゃんもちょっと抜きてるとこあるよね。<br>報せ：抜きてない、ただ知らなかっただけで。なに？それ。<br>決まり：友達、南極ほんとに行けるのかって心配してて。<br>報せ：疑うの？<br>決まり：疑うってじゃないけど、ただ、確証がないっていうか。ね、心配になるでしょう、それに仮に中止にならなかったとしても、乗れるのかって。<br>報せ：乗れる！だって、私は小渕沢貴子の娘だから。<br>決まり：本当に？それだけで？<br>報せ：絶対大丈夫！<br>決まり：そうかな、でも。<br>報せ：嫌になったらなったって、素直に言えばいいじゃない。<br>決まり：え？<br>報せ：それ私のせいにしようとして。<br>決まり：嫌になったんじゃないよ、ただ失敗したくない、やっぱりやめとけだって思たくない、「行って良かった」、「報せちゃんの計画に乗ってよかった」って思いたい、うん、、<br>報せ：ちゃんと状況は全部わかってる、作戦も考えてある。<br>決まり：ほんとに？<br>報せ：うん、今度ちゃんと説明するから、決まりは準備進めて。<br>決まり：うん、わかった！おっ</p>
<p>決まり：いっらしゃいませ、温めはいかがなされますか？<br>店員：まあ、いろいろこれから覚えてもらえば良いから、まず補充お願い、そこ三宅さんいるから、聞いて。<br>決まり：はい！<br>決まり：あのう、、<br>日向：うわ！<br>決まり：あの、今日から入ったことになった玉木です、よろしくお願いします！<br>日向：玉木？<br>決まり：玉木マリです。<br>日向：あ、それで決まり、はは、三宅日向です、何歳？<br>決まり：十六歳、高二です。<br>日向：一緒だ、よろしく！<br>決まり：よ、よろしく。<br>日向：だったら、西校だよね。<br>決まり：うん、多西。<br>日向：なんで急にバイト？<br>決まり：はうん、ちょっと必要っていうか、行きたいところがあって。<br>日向：うんん〜それってさ、もしかして、南極？<br>決まり：え？</p>
<p>報せ：行きたい？<br>決まり：うん、なんか前から私たちの話聞いてたみたいで。<br>日向：あ、そういう風にいったら、盗み聞きみたいだろう、違うからね、二人で大声で話てだから。<br>報せ：大声？<br>日向：嫌になってったら言えば良いじゃない？嫌になったんじゃないよ、、<br>決まり：良いよ、やりなくて！<br>日向：それで、気になっててさ、そして決まりがバイトで入って来たでしょう、これは運命だって思ったね私は。<br>報せ：言っておくけど、遊びじゃないから。<br>日向：分かってる。<br>報せ：命の危険だってあるし、旅費だってちゃんと払ってもらうるし、出発は十二月だから、学校を休むことにもなる。<br>日向：I’am OK!平気だよ、バイトでお金があるし、高校を行ってないし。<br>決まり：え！そうなの？<br>日向：そんなに驚くことないだろう、中にはいるんだよ、高校行ってない十六歳だって。<br>決まり：おう。<br>日向：あ、でも、間違えるなよ、勉強は絶対負けないから、高認も通るし、この前の模試は合格判定Aだし。<br>決まり：え！まだ高二なのに！<br>報せ：じゃ、大学は行くってこと？<br>日向：そう、合格しまくて、高校で怠けて落ちたやつらにザマミロって言うのが今のとこの夢。<br>決まり：あ〜<br>報せ：でも、だったら南極行って暇なんてないじゃない。<br>日向：そうだけど、まだ受験まで2年近くあるし、来年は本気で受験勉強だって考えると、一個ぐらいになかしときたいなって。<br>決まり：分かる、だよね、今年しなかったら、もうできないもんね。<br>日向：そう！お、良いのか？このままくまんとおでん作り終わって良いのか？俺の十六歳！<br>決まり：そうそう！<br>日向：お前とはうまいお酒飲めそうだ、飲んだことないけど。<br>決まり：私も！<br>報せ：うるさい！この計画を立ってたのは私なんだから、私の指示に従って。<br>決まり：別に下がろうって言ってないけど。<br>日向：なに？めんどくさいタイプ？<br>決まり：ちょっと、、<br>報せ：作戦の概要、今度の日曜日、決行するから。じゃ、日曜。<br>三人：うん！</p>
<p>決まり、日向：バイバイ！<br>決まり：どう思う、この作戦？<br>日向：さあ、なかなか難しそうと思うけどね。<br>決まり：だよね。<br>日向：でも、あの子私らよりは南極のこと知ってるだろうし、やるしかないじゃない？引き返せるうちは、旅ではない！引き返せなくなった時に、初めてそれは旅になるのだって言うし。<br>決まり：うわ〜なにそれ？名言っぽい、誰の言葉？<br>日向：私〜<br>決まり：なんだ、、<br>日向：でも、よかったよ。<br>決まり：え？<br>日向：私あなたたち二人のこと嫌いじゃなかったんだよね、ほら、あのコンビニ、多西近いから、生徒いっぱいくるじゃん。<br>決まり：うん。<br>日向：でも、二人だけはなんか別だなって、空気が違うって言うか。<br>決まり：そんなこと言われたの初めて。<br>日向：私さあ、集団の中でグチャグチャみたいなのは苦手ててさ、だから高校無理だたんだけど、二人はいいなあって。<br>決まり：良いって、なにが？<br>日向：うん、なんだろう、嘘ついてない感じ？って言われたら、良い気する？<br>決まり：そりゃ、、<br>日向：こうして日向ちゃんは人の心にとりるだよ、じゃね〜<br>決まり：うん、、</p>
<p>決まり：新宿だ！<br>日向：ギャラギャラするな！群馬だってバレる！<br>決まり：だって、なんかキラキラしてて、どこ見ていいのわかんない！<br>日向：落ち着け！<br>報せ：決まり、まって、おいで行かないで。<br>日向：おい、間違えてる！<br>決まり：か、歌舞伎町。<br>報せ：き、来たことないの？<br>決まり：夜来るのは初めてかも、一応恵ちゃん自留めるか持って言ってたけど。<br>日向：補導されたりしないか？私は良いけど、二人は学校にバレたらまずいだろう。<br>決まり：歩いてだけでも？<br>日向：場所が場所だからな。<br>報せ：平気、大学生って顔してれば。<br>路人：なに？遊びに来たの？ちょっとちょっとだけ、、<br>決まり：どうしよう？<br>日向：面白いから、ほっとこうか。<br>日向：あった、観測隊員親睦会合意一行さま。<br>決まり：ほんと？<br>報せ：よし！後は作戦通りに。<br>決まり：でも、これ一人を誘い出すってしか書いてないけど。<br>日向：どうするの？<br>報せ：それは、普通男子隊員が多いから、女子高生がこう、、<br>日向：まさか、誘惑しろって言うんじゃないだろうな。<br>決まり：まあ、報せちゃん美人だからな。<br>報せ：私？私はないない。<br>日向：待って、私たちのどっちが行かせるつもりだったのかよ！<br>決まり：無理だよ！<br>日向：来たぞ、そうする？<br>報せ：決まり、お願い！<br>決まり：そんな！<br>日向：決まり！<br>決まり：え？！<br>日向：昭和か？！<br>決まり：じゃ日向ちゃんやってよ！<br>日向：ほら、モタモタしていると行っちゃう！足だ、なまし！<br>決まり：パンツだもん。<br>日向：じゃ、胸だ、胸を挙上せよ、いい〜か！<br>決まり：だいたい胸なら、、<br>報せ：嫌だ、嫌だ、、<br>日向：行けよ、南極行かんだら。<br>決まり：そうだよ、ずるいよ、作戦考えた報せなんだから。<br>報せ：や、で、私はだめなの。<br>日向：なにがダメなんだよ。<br>決まり：そうだよ。<br>弓子：うん、あっ。<br>佳苗：お？報せちゃん？<br>弓子：しつこいね、あの子も。<br>ゆず：誰ですか？<br>日向：お辞儀してどんするんだよ？ここ学校か？優等生か？！<br>報せ：だから私はダメだって言ってるでしょう？<br>決まり：どうして？<br>報せ：顔がバレてるの、だから、見つかったらすぐに捕まって、、<br>弓子：うわ、三人もいる！<br>報せ：逃げて、<br>日向、決まり：え？<br>報せ：逃げて！<br>決まり：日向ちゃん、早い！<br>日向：一応短距離だったらな、別れた方が良いじゃないのか？<br>報せ：そうね。<br>日向：おじ会う場所は？<br>報せ：携帯で！<br>日向：おらい〜<br>決まり：まだ追って来る。<br>報せ：観測隊員だから、体力すごいし。<br>決まり：私たちも別れる？ あ、痛い。<br>報せ：あ、ごめん。<br>決まり：うん。<br>報せ：なに？<br>決まり：うん、ただ、楽しいなあって。<br>報せ：楽しい？<br>決まり：うん、なんかね、動いてる！<br>報せ：え？<br>決まり：私の青春動いてる気がする！そう、こう言うのだ！なにかが起きそうで、なにか起こせそうで、毎日見ている景色が、目も苦しく変わっていって。<br>路人A：やっぱ外飲み最高だね、美味しいね。<br>路人B：今日朝まで飲んで、、<br>日向：え？！<br>路人A、B：バイバイ！<br>報せ、日向、決まり：あっ！！</p>
<p>佳苗：そんなに息切らすまで走らなくても、別に命奪おうわけじゃないのに、奪いそうだけど。<br>決まり：だって、報せちゃんが。<br>日向：そうだよ、捕まったら撃ちこびこもんって。<br>報せ：そんなこと言ってない。<br>弓子：しかし、よくその作戦思いつくよね。<br>佳苗：つまり、男性隊員誑かして、協力させて見っこしよってこどでしょう？悪い女ね、誰が思いついたの？<br>佳苗：まっ、そうよね、あのね、報せちゃん、何度も話した通り、あなたを連れて行くことはできないの、たとえ民間でもね、隊員が厳しい条件があって。<br>報せ：分かってます！無理を言ってるのは分かってます！でも、どうしても行きたい、だって、お母さんが待ってる。<br>決まり：報せちゃん。<br>佳苗：なに、これ？<br>報せ：見た通りです、資金困ってるですよね、私たちをそのお金でスボサーにしてください、連れて行ってくれったら、そのお金あげますから。<br>弓子：よく考えるわね。<br>佳苗：分かった、十二月一日、フリーマントりきて。<br>報せ：ほんとですか？！<br>佳苗：なんって言うと思う？そんな心配してもらわなくても、私たちは行くわ、必ずね。<br>佳苗：貴子、、、</p>
<p>弓子：まあ、気持ちは分かるけどね。<br>佳苗：あれから3年。<br>弓子：で、ほんとに資金は大丈夫なの？<br>佳苗：さっき言ってたでしょう？まあ、大変だけど、いろいろ考えてるわ。<br>弓子：白石さん、、<br>佳苗：もう、その一環！</p>
<p>決まり：お母さん、か。<br>日向：まあ、落ち込むなよ、これでダメと決まってわけじゃない。<br>報せ：後一息で、もう少しこのお金を受けたりそうだった、後少しで絶対にうまく行って、、<br>日向：こいつ、ポッじてうちゃんだ。<br>決まり：だね〜<br>日向：まあ、そうじゃなきゃこんなことできないか。<br>決まり：だね！<br>日向：ただし、緊急動議、小淵沢報せのリーダー担任を解任を要求しまーす、賛成の人？<br>決まり：はい！<br>日向：賛成多数！よってた今よりリーダーを解任します！<br>報せ：え？！<br>日向：と言うわけで、南極いくぞ！<br>日向、決まり：おぉ！<br>報せ：え？！！</p>
]]></content>
      <categories>
        <category>日语</category>
      </categories>
      <tags>
        <tag>日语</tag>
      </tags>
  </entry>
  <entry>
    <title>《宇宙よりも遠い場所》台词-第一话</title>
    <url>/2020/01/05/%E3%80%8A%E5%AE%87%E5%AE%99%E3%82%88%E3%82%8A%E3%82%82%E9%81%A0%E3%81%84%E5%A0%B4%E6%89%80%E3%80%8B%E5%8F%B0%E8%AF%8D-%E7%AC%AC%E4%B8%80%E8%AF%9D/</url>
    <content><![CDATA[<p>第一話：青春しゃくまんえん</p>
<p>決まり：淀んだ水が溜まっている、それが一気に流れて行くのが好きだった、決壊し、解放され、走り出す、ゆどみの中で拓得た力が爆発して、全てが、動き出す！</p>
<a id="more"></a>

<p>決まりの母：玉木マリさん、もう昼ですよう。<br>決まり：なんか、なんか怖い夢見た。<br>決の母：なに？<br>決まり：お母さんが濡れたタオル私の顔にかけて殺そうする夢。<br>決まりの母：それは怖っかたですね。昨日言ったようね、部屋片付けるって。<br>決まり：待ってよ！痛い、、、高校に入ったらしたいこと、日記をつける、一度だけ学校をサボる、あてのない旅に出る。<br>決まりの母：なんだそりゃ。なに？</p>
<br>

<p>恵：うん、で？<br>決まり：だから、高二になったのに、まだなにもしてないってこと気づいたわけ。<br>恵：中学の時も決まりなにもしなかったじゃん。<br>決まり：だからだよ、高校時代はなにかしなきゃって思ったの、なんとなくは良くないって。時間は限られているなのに、あの時の決心どこ行って話だよ。<br>恵：それで何するの？<br>決まり：とりあえず、実行しようと思って。<br>恵：東京？<br>決まり：うん、まずは東京なんて行って、それで当てのない旅に出る、思いのまま漂う。<br>恵：いつ？<br>決まり：痛っ！！</p>
<br>

<p>恵：明日？<br>決まり：うん、が、学校をサボって。<br>恵：まあ、いいんじゃないの？<br>決まり：ええ〜！休むだよ、ズル休みだよ。<br>恵：だからいいんじゃなの、そのぐらい。<br>決まり：そのぐらいって。<br>恵：まさか決まりしたことないのズル休み。<br>決まり：恵ちゃんあるの？<br>恵：あるでしょう。だでだって、一度ぐらい。<br>決まり：尊〜敬〜<br>恵：そういう目で見るな！<br>決まり：じゃさじゃさ、当てのない旅は？<br>恵：それはないかな。<br>決まり：じゃさじゃさじゃさ、、<br>恵：一緒には行かない。<br>決まり：なんで分かるの？<br>恵：分かるよ、決まりの考えそうなことぐらい、そう言うのは一人で行くから意味があるじゃない？<br>決まり：そうか。<br>恵：行けばいいじゃん、協力はしてあげるからさ。<br>決まり：うん！</p>
<br>

<p>決まり：ただいま〜、うん、ワクワクする〜明日駅のトイレどこで着替えるだあ、で、うわ〜海だ海だ！ヤバ、群馬だってバレる。（笑〜）<br>リン：どうしたのお姉ちゃん？<br>決まり：はぁ、なんでもない。</p>
<br>

<p>決まりの母：もう行くの？どうしたのそのカバン？<br>決まり：うん、友達から体操着借りてて。<br>決まりの母：また？<br>決まり：行ってきまーす。<br>恵：電話掛けて来るな。<br>決まり：だって。<br>恵：心配しなくても、学校には連絡入れて置いてあげたよ、真和色使って。<br>決まり：ほんと？<br>恵：泊りになる時はちゃんと食っちゅうら合わせてあげるから、心配しないで行って来い。<br>決まり：うん！私は旅に出る、トイレで着替え、学校と反対方向の電車に乗り、いつもの学校から私一人だけが飛び出して、当てのない旅に出る。まだ見たこともない場所へ。</p>
<br>

<p>恵：なんでここいる？<br>決まり：やあ、雨だし、てゆうか、やっぱりズル休みは行けないかなと言うか。<br>恵：行きたいところなかったの？<br>決まり：あったよ、たくさんあった、京都でも、沖縄でも、北海道でも。<br>恵：じゃあ、なんで行かなかった？<br>決まり：それはその、飛行機落ちるかもしれないし、新幹線大爆発するかもしれないし。<br>恵：隕石落ちるかもしないし？<br>決まり：分かってるよ分かってる。<br>恵：じゃ、なんでど？</p>
<br>

<p>恵：怖くなった？<br>決まり：ほら、私いつもそうじゃん、部活入る時も、ならいことする時も、受験でいい学校をチャレンジしようって時も、全部直前までくると怖くなって、やったないこと初めて、うまく行かなかったら、どうしようって、失敗したら、やだなあって、後悔するだなあって、ギリギリになると、いつも。<br>恵：まあ、それは悪いことじゃないと思うだけどな。<br>決まり：でも、私は嫌い、私のそうゆところ、大嫌い。<br>恵：じゃ。<br>決まり：うん。<br>恵：今度、どこかへ遊びに行く？<br>決まり：うん！<br>決まり：ちょっと、これ！</p>
<br>

<p>決まり：えっ！<br>恵：まじか、いくらある？<br>決まり：数えたら、ピッタリ百まん、<br>恵：百まん？！どうして持ってきた、警察だろう！<br>決まり：だって、気が導電してて。<br>恵：ものは良いようだな。<br>決まり：違うよ、ほんとほんとに導電してたの、て言うか、落としたのうちの学校のだったような。<br>恵：何年？<br>決まり：そこまでは分からない、後ろ姿ちら見ただけだし。<br>恵：ん。<br>恵：いる？<br>決まり：いない、、かな。髪はあそこの子くらいで、多分美人。<br>恵：後は？<br>決まり：良い匂いした、リース？<br>恵：それはな〜まあ、いいや、あの長さのかみだとそんなにいないと思うから、私一年の教室見て来る。<br>決まり：うん。</p>
<br>

<p>決まり：あ〜、落ち着かない、あ、この匂い。<br>決まり：や〜。<br>報せ：しゃくまん、しゃくまん。<br>決まり：ん。<br>報せ：百まん。<br>決まり：あ。<br>報せ：なに？なに？<br>決まり：あは、いえ、あのう。<br>報せ：それ。<br>決まり：いえ、実は昨日、、違うの、盗んだことじゃないよ、たまたま、、<br>報せ：ありがとう、ありがとう、ありがとう〜</p>
<br>

<p>決まり：南極？<br>報せ：それを書いたのは私のお母さん、南極観測隊員だったの、中学の時、行方不明になちゃったけどね。<br>決まり：そうなんだ。<br>報せ：結局見つからなくて、遺火もほとんどないままで、だから、私が行って見つけるの。<br>決まり：南極に？行けるの？<br>報せ：みんなそう言う。おばあちゃんも、友達も、先生も、先輩も、近所の人も。子供が行けると思ってるのかって、いくらかかると思ってるのかだって。<br>決まり：それで、百万。<br>報せ：うん、ずっとバイトしてね、私は行く、絶対に行って、無理だっていた全員にザマミロって言ってやる。受験終わって高校に入ったときにそう決まったの。</p>
<br>

<p>決まり：南極だよ、南極、すごいと思わない？地球の一番ハッシコだよ。<br>日向：566円になります〜<br>恵：小渕沢報せか？<br>決まり：うん、恵ちゃん知ってた？<br>恵：二組の「南極」って呼ばれてるあの子でしょう？<br>決まり：南極？<br>恵：結構有名だぞ、高校入ってたからずっと南極いく南極いくって。<br>決まり：確かに言ってた。<br>恵：行けるわけにはないのにね。<br>決まり：でも、百万あるだよ、それであの子絶対に行くって。<br>恵：行けないよ、南極だよ。それこそ、観測隊員にでもならなきゃ無理。<br>決まり：じゃ、なんで？<br>恵：そうね、だから変人って言われてるんでしょう、友達も作らず、放課後ずっとバイトして、お金貯めて。<br>決まり：ん、、</p>
<br>

<p>恵：どうか行ってく？<br>決まり：あ、うん、今日はちょっと。<br>決まり：うん、あった！</p>
<br>

<p>決まり：（笑）<br>報せ：私の自転車なんだけど。<br>A：お、そうなの？<br>A、B：南極号？<br>A：見張り代。<br>B：盗まらないように見てあげたんだよ。<br>A：サツドブ持ってるらしいじゃん。<br>B：そこし貸してくれない？ちょっとだけ。<br>決まり：あ、あのう〜こ、小渕沢さん、先生呼んでる、お金のことを聞きたいからって。<br>報せ：ほんと？<br>決まり：うん、うん、、、<br>A：気づくの早いつ、</p>
<br>

<p>報せ：じゃ、嘘なの？<br>決まり：うん。<br>報せ：びっくりさせないでよ、ほんとに先生にバレたかったと思ったでしょう。<br>決まり：眼魂だくしてあげるじゃん。<br>報せ：分かるわけないでしょう、でも、なんで？たまたま通りかかったでしょ？<br>決まり：うん、ちょっと見かけて、話したいこともあったし。<br>報せ：話したいこと？<br>決まり：私、あなたのことを応援してる！<br>報せ：え？<br>決まり：私ね、高校に入ったら、なにかしようって思ってた、今までしたことないこととか、なんかすごいこととか、でも、なにもできなくて、いざとなると、怖くなって、辞めちゃって。だから、あんなにみんなに言われて、馬鹿にされても、行くって本気で頑張れるってすごいと思う。うん！！<br>報せ：言いたい人には、言わせておけばいい、今に見てろうって熱くなれるから、そっちの方が、ずっといい。<br>決まり：なにか手伝えることない？あったら、言って！<br>報せ：じゃ、一緒に行く？<br>決まり：え？<br>報せ：前にも、何人かそう言うことくれた人がいった、でもみんなすぐいなくなるの、やっぱり無理だとか、友達に止められたとか、怖くなったとか、それが普通だと思う、だって、高校生だし、学校行ってるんだし、友達もいるだし。<br>決まり：違うよ、私はそんな簡単な気持ちで言い訳じゃなくて。<br>報せ：船の下見、次の土曜ここに来て、そうしたら、本気だって信じる。</p>
<br>

<p>決まり：砕氷艦白瀬、一般公開、、広島。<br>リン：お姉ちゃん、土曜だから、いつまでも寝て、、うわ〜<br>決まり：私は旅に出る、今度こそ、旅に出る、いつもと反対方向の電車に乗り、見たことはない風景を見るために。怖いけど、辞めちゃいたいけど、意味のないことかもしれなけど、でも、、</p>
<br>

<p>決まり：うわ〜こんなに大きいんだ。<br>報せ：赤道を抜きて、嵐を抜け、氷を割り、日本から14000キロ、宇宙よりも遥か遠い、誰も寄せ付けない、その場所へ。<br>決まり：どうやっていくつもり？<br>報せ：知りたい？<br>決まり：うん。（その口元がに似合いと笑う、私の青春が、動き出した！）</p>
<br>

<p>路人：三宅さん、こっち！<br>日向：はい！</p>
]]></content>
      <categories>
        <category>日语</category>
      </categories>
      <tags>
        <tag>日语</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派通过无刷电调驱动无刷电机</title>
    <url>/2020/01/05/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%80%9A%E8%BF%87%E6%97%A0%E5%88%B7%E7%94%B5%E8%B0%83%E9%A9%B1%E5%8A%A8%E6%97%A0%E5%88%B7%E7%94%B5%E6%9C%BA/</url>
    <content><![CDATA[<p>今天尝试了使用无刷电调来驱动无刷电机，但是刚开始遇到点问题，没理解网上的博文，还好板子没被烧掉💦</p>
<p><a href="https://blog.csdn.net/qf0129/article/details/70769054" target="_blank" rel="noopener">树莓派pwm控制无刷电机</a></p>
<a id="more"></a>

<h2 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h2><p>刚开始了卡在了连线这里，电调有两根电源线，连接12V电源，其中三根线连接树莓派，<strong>如果树莓派独立供电的话，电调只需要将信号控制线和地线连接到树莓派的GPIO口和GND口</strong>。</p>
<p>我刚开始连错了，树莓派独立供电的同时，将电调的5V输出端和GND线都连接到了树莓派上，板子突然自己开机了，才意识到接错了。后来想着不需要电调输出的电压，所以只接了信号控制线，5V输出和GND都没接，程序跑了但是电机没转动，也没信号声音。看了 <a href="https://www.cnblogs.com/raffeale/p/5585757.html" target="_blank" rel="noopener">折腾了2个晚上无刷电调(ESC)，电机终于转起来了，特此记录一下</a> 才意识到电调的GND线是一定要接到树莓派的GND口的，然后电机就动了。</p>
<p>连接图：</p>
<p><img src="https://images2.imgbox.com/ae/6d/bJjjdFRf_o.png" alt="连接图"></p>
<p><em>上面的图中电调的输入电压应该是12V，可以用4节5号电池串联。</em></p>
<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>连接好之后，给树莓派通电，接通电调连接的电源，然后用RPi.GPIO.PWM()控制电机的转速。</p>
<p>测试代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pin = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">GPIO.setmode(GPIO.BCM)</span><br><span class="line">GPIO.setup(pin, GPIO.OUT)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 频率400Hz</span></span><br><span class="line">p = GPIO.PWM(pin, <span class="number">400</span>)</span><br><span class="line">p.start(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">dc = <span class="number">10</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">40</span>):</span><br><span class="line">        dc += <span class="number">2</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'dc:'</span>, dc</span><br><span class="line">        p.ChangeDutyCycle(dc)</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    p.stop()</span><br><span class="line">    GPIO.cleanup()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派驱动4位数码管</title>
    <url>/2020/01/04/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%A9%B1%E5%8A%A84%E4%BD%8D%E6%95%B0%E7%A0%81%E7%AE%A1/</url>
    <content><![CDATA[<p>听歌：<a href="http://url.cn/5vzNt1p" target="_blank" rel="noopener">宇宙を見上げて</a> （动画《比宇宙更远的地方》插入曲）</p>
<p>经过上个周末以及元旦一天的努力，手里的web项目也过半了，于是陆续准备了许多材料打算开始做基于树莓派和OpenCV的自主寻迹小车。正好今天周六数码显示管到了，于是想先摸索着点亮看看，之前也没搞过。往上资料不是很详细，花了两三个小时才搞明白，记录一下备忘。</p>
<a id="more"></a>

<br>

<h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><ul>
<li>树莓派（3b+）</li>
<li>4位数码显示管</li>
<li>T型扩展板（非必需）</li>
<li>12根母对母杜邦线</li>
</ul>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><a href="https://www.kawabangga.com/posts/1408" target="_blank" rel="noopener">树莓派控制3641BS数码管显示数字</a></p>
<p>元件电路图：</p>
<p><img src="https://www.kawabangga.com/wp-content/uploads/2015/10/7segLed.gif" alt="4位数码管电路原理图"></p>
<p>我自己买的共阴极的。</p>
<p>引脚：</p>
<p><img src="https://www.kawabangga.com/wp-content/uploads/2015/10/3461.jpg" alt></p>
<p>引脚编号从下往上，从左往右然后再从右往左。</p>
<p>其中 12 号引脚控制第一个数字的显示，然后 9 -&gt; 2，8 -&gt; 3，6 -&gt; 4。</p>
<h2 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h2><p>在接线这儿犹豫了一会儿，因为担心接线接错了可能会直接烧毁数码显示器和树莓派，往上也没有找到详细的线路图。后来看了电路图后直接将所有引脚用母对母杜邦线接到了GPIO口。接完了了之后只测试了一个数字的显示，确认显示正常值后才开始写代码。</p>
<p>在我的3b+ T型扩展板上（用的BCM编码方式），连线是这样的：</p>
<table>
<thead>
<tr>
<th>树莓派引脚（BCM）</th>
<th>数码显示器引脚</th>
</tr>
</thead>
<tbody><tr>
<td>G18</td>
<td>11</td>
</tr>
<tr>
<td>G19</td>
<td>7</td>
</tr>
<tr>
<td>G20</td>
<td>4</td>
</tr>
<tr>
<td>G21</td>
<td>2</td>
</tr>
<tr>
<td>G22</td>
<td>1</td>
</tr>
<tr>
<td>G23</td>
<td>10</td>
</tr>
<tr>
<td>G24</td>
<td>5</td>
</tr>
<tr>
<td>G25</td>
<td>3</td>
</tr>
<tr>
<td>G13</td>
<td>12</td>
</tr>
<tr>
<td>G16</td>
<td>9</td>
</tr>
<tr>
<td>G17</td>
<td>8</td>
</tr>
<tr>
<td>G26</td>
<td>6</td>
</tr>
</tbody></table>
<h2 id="显示当前时间的代码"><a href="#显示当前时间的代码" class="headerlink" title="显示当前时间的代码"></a>显示当前时间的代码</h2><p>代码是从这里搬过来的，但是我把时间改成了小时+分钟的形式，然后这段代码有些bug，做了一些修改。</p>
<p><a href="https://www.kawabangga.com/posts/1408" target="_blank" rel="noopener">树莓派控制3641BS数码管显示数字</a></p>
<p>最后修正后的代码如下，将高电位和低电位进行了反转；在Ln157到Ln176行增加了显示1, 2, 3, 4其中一个数字的时候，将其他三个数字选择置于高电平，是高电位哦；在程序退出时增加了RPi.GPIO.cleanup()，避免程序退出数码管依然显示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mapping LED to GPIO</span></span><br><span class="line">LED_A = <span class="number">18</span> <span class="comment"># 11</span></span><br><span class="line">LED_B = <span class="number">19</span> <span class="comment"># 7</span></span><br><span class="line">LED_C = <span class="number">20</span> <span class="comment"># 4</span></span><br><span class="line">LED_D = <span class="number">21</span> <span class="comment"># 2</span></span><br><span class="line">LED_E = <span class="number">22</span> <span class="comment"># 1</span></span><br><span class="line">LED_F = <span class="number">23</span> <span class="comment"># 10</span></span><br><span class="line">LED_G = <span class="number">24</span> <span class="comment"># 5</span></span><br><span class="line">LED_DP = <span class="number">25</span> <span class="comment"># 3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># mapping public GPIO</span></span><br><span class="line">DIGIT1 = <span class="number">13</span> <span class="comment"># 12</span></span><br><span class="line">DIGIT2 = <span class="number">16</span> <span class="comment"># 9</span></span><br><span class="line">DIGIT3 = <span class="number">17</span> <span class="comment"># 8</span></span><br><span class="line">DIGIT4 = <span class="number">26</span> <span class="comment"># 6</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#sleep time - loop displey</span></span><br><span class="line">t=<span class="number">0.001</span></span><br><span class="line"> </span><br><span class="line">GPIO.setmode(GPIO.BCM)</span><br><span class="line"> </span><br><span class="line">GPIO.setup(LED_A, GPIO.OUT)</span><br><span class="line">GPIO.setup(LED_B, GPIO.OUT)</span><br><span class="line">GPIO.setup(LED_C, GPIO.OUT)</span><br><span class="line">GPIO.setup(LED_D, GPIO.OUT)</span><br><span class="line">GPIO.setup(LED_E, GPIO.OUT)</span><br><span class="line">GPIO.setup(LED_F, GPIO.OUT)</span><br><span class="line">GPIO.setup(LED_G, GPIO.OUT)</span><br><span class="line">GPIO.setup(LED_DP, GPIO.OUT)</span><br><span class="line">GPIO.setup(DIGIT1, GPIO.OUT)</span><br><span class="line">GPIO.setup(DIGIT2, GPIO.OUT)</span><br><span class="line">GPIO.setup(DIGIT3, GPIO.OUT)</span><br><span class="line">GPIO.setup(DIGIT4, GPIO.OUT)</span><br><span class="line"> </span><br><span class="line">GPIO.output(DIGIT1, <span class="literal">True</span>)</span><br><span class="line">GPIO.output(DIGIT2, <span class="literal">True</span>)</span><br><span class="line">GPIO.output(DIGIT3, <span class="literal">True</span>)</span><br><span class="line">GPIO.output(DIGIT4, <span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showDigit</span><span class="params">(no, num, showDotPoint=False)</span>:</span></span><br><span class="line"></span><br><span class="line">    GPIO.setup(LED_A, <span class="literal">False</span>)</span><br><span class="line">    GPIO.setup(LED_B, <span class="literal">False</span>)</span><br><span class="line">    GPIO.setup(LED_C, <span class="literal">False</span>)</span><br><span class="line">    GPIO.setup(LED_D, <span class="literal">False</span>)</span><br><span class="line">    GPIO.setup(LED_E, <span class="literal">False</span>)</span><br><span class="line">    GPIO.setup(LED_F, <span class="literal">False</span>)</span><br><span class="line">    GPIO.setup(LED_G, <span class="literal">False</span>)</span><br><span class="line">    GPIO.setup(LED_DP, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    GPIO.output(DIGIT1, <span class="literal">False</span>)</span><br><span class="line">    GPIO.output(DIGIT2, <span class="literal">False</span>)</span><br><span class="line">    GPIO.output(DIGIT3, <span class="literal">False</span>)</span><br><span class="line">    GPIO.output(DIGIT4, <span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">0</span>) :</span><br><span class="line">        GPIO.output(LED_A, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_B, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_C, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_D, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_E, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_F, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_G, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_DP, showDotPoint)</span><br><span class="line">    <span class="keyword">elif</span> (num == <span class="number">1</span>) :</span><br><span class="line">        GPIO.output(LED_A, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_B, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_C, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_D, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_E, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_F, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_G, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_DP, showDotPoint)</span><br><span class="line">    <span class="keyword">elif</span> (num == <span class="number">2</span>) :</span><br><span class="line">        GPIO.output(LED_A, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_B, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_C, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_D, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_E, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_F, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_G, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_DP, showDotPoint)</span><br><span class="line">    <span class="keyword">elif</span> (num == <span class="number">3</span>) :</span><br><span class="line">        GPIO.output(LED_A, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_B, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_C, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_D, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_E, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_F, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_G, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_DP, showDotPoint)</span><br><span class="line">    <span class="keyword">elif</span> (num == <span class="number">4</span>) :</span><br><span class="line">        GPIO.output(LED_A, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_B, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_C, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_D, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_E, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_F, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_G, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_DP, showDotPoint)</span><br><span class="line">    <span class="keyword">elif</span> (num == <span class="number">5</span>) :</span><br><span class="line">        GPIO.output(LED_A, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_B, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_C, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_D, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_E, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_F, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_G, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_DP, showDotPoint)</span><br><span class="line">    <span class="keyword">elif</span> (num == <span class="number">6</span>) :</span><br><span class="line">        GPIO.output(LED_A, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_B, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_C, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_D, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_E, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_F, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_G, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_DP, showDotPoint)</span><br><span class="line">    <span class="keyword">elif</span> (num == <span class="number">7</span>) :</span><br><span class="line">        GPIO.output(LED_A, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_B, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_C, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_D, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_E, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_F, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_G, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_DP, showDotPoint)</span><br><span class="line">    <span class="keyword">elif</span> (num == <span class="number">8</span>) :</span><br><span class="line">        GPIO.output(LED_A, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_B, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_C, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_D, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_E, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_F, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_G, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_DP, showDotPoint)</span><br><span class="line">    <span class="keyword">elif</span> (num == <span class="number">9</span>) :</span><br><span class="line">        GPIO.output(LED_A, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_B, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_C, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_D, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_E, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(LED_F, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_G, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(LED_DP, showDotPoint)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (no == <span class="number">1</span>) :</span><br><span class="line">        GPIO.output(DIGIT1, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(DIGIT2, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(DIGIT3, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(DIGIT4, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">elif</span> (no == <span class="number">2</span>) :</span><br><span class="line">        GPIO.output(DIGIT1, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(DIGIT2, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(DIGIT3, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(DIGIT4, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">elif</span> (no == <span class="number">3</span>) :</span><br><span class="line">        GPIO.output(DIGIT1, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(DIGIT2, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(DIGIT3, <span class="literal">False</span>)</span><br><span class="line">        GPIO.output(DIGIT4, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        GPIO.output(DIGIT1, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(DIGIT2, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(DIGIT3, <span class="literal">True</span>)</span><br><span class="line">        GPIO.output(DIGIT4, <span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display_time</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	    now = time.localtime(time.time())</span><br><span class="line">        time.sleep(t)</span><br><span class="line">        showDigit(<span class="number">1</span>, int(time.strftime(<span class="string">"%H"</span>, now)) / <span class="number">10</span>, <span class="literal">False</span>)</span><br><span class="line">        time.sleep(t)</span><br><span class="line">        showDigit(<span class="number">2</span>, int(time.strftime(<span class="string">"%H"</span>, now)) % <span class="number">10</span>, <span class="literal">True</span>)</span><br><span class="line">        time.sleep(t)</span><br><span class="line">        showDigit(<span class="number">3</span>, int(time.strftime(<span class="string">"%M"</span>, now)) / <span class="number">10</span>, <span class="literal">False</span>)</span><br><span class="line">        time.sleep(t)</span><br><span class="line">        showDigit(<span class="number">4</span>, int(time.strftime(<span class="string">"%M"</span>, now)) % <span class="number">10</span>, <span class="literal">False</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	display_time()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">	GPIO.cleanup()</span><br></pre></td></tr></table></figure>

<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>效果如下：</p>
<p><img src="https://images2.imgbox.com/d8/19/mHf8LGzs_o.png" alt></p>
<p>可能是二极管余辉的原因？每个数字显示得都很不纯净，暂时先这样吧。</p>
]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>Thymeleaf分页模板</title>
    <url>/2020/01/01/Thymeleaf%E5%88%86%E9%A1%B5%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>经常在用 Thymeleaf 分页，很多基础的知识已经有点淡忘了，今天做到了分页部分，发现连最基础的逻辑比较都记不清了。于是花了点时间又看了下 Thymeleaf 的基础知识，做了一个相当简陋的分页，记录一下以后翻用。</p>
<br>

<a id="more"></a>

<p>分页工具类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bill.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页工具类，获取分页相关数据项。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/12/29 4:01 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageHelper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 当前页码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentPage;</span><br><span class="line">    <span class="comment">// 每页数据量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize;</span><br><span class="line">    <span class="comment">// 总页数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalPage;</span><br><span class="line">    <span class="comment">// 总数据量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalCount;</span><br><span class="line">    <span class="comment">// 返回数据</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; dataList;</span><br><span class="line">    <span class="comment">// 是否为第一页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isFirstPage;</span><br><span class="line">    <span class="comment">// 是否是最后一页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isLastPage;</span><br><span class="line">    <span class="comment">// 是否有前一页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> hasPreviousPage;</span><br><span class="line">    <span class="comment">// 是否有后一页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> hasNextPage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageHelper</span><span class="params">(<span class="keyword">int</span> currenPage, <span class="keyword">int</span> pageSize, <span class="keyword">int</span> totalCount, List&lt;T&gt; dataList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentPage = currenPage;</span><br><span class="line">        <span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">        <span class="keyword">this</span>.totalCount = totalCount;</span><br><span class="line">        <span class="keyword">this</span>.dataList = dataList;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (totalCount % pageSize == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.totalPage = totalCount / pageSize;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.totalPage = totalCount / pageSize + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.isFirstPage = (currentPage == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.isLastPage = (currentPage == totalPage);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.hasNextPage = !isLastPage;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.hasPreviousPage = !isFirstPage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Thymeleaf模板：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"pagination"</span> style=<span class="string">"float: right;"</span>&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;a href="#" th:href="@&#123;billContent.do?page=1&#125;"&gt;&amp;laquo;&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li th:<span class="keyword">if</span>=<span class="string">"$&#123;pageHelper.getCurrentPage() - 2&#125; &amp;gt; 0"</span>&gt;</span><br><span class="line">        &lt;a th:text=<span class="string">"$&#123;pageHelper.getCurrentPage() - 2&#125;"</span></span><br><span class="line">           th:href="@&#123;'billContent.do?page=' + $&#123;pageHelper.getCurrentPage() - 2&#125;&#125;"&gt;1&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li th:<span class="keyword">if</span>=<span class="string">"$&#123;pageHelper.getCurrentPage() - 1&#125; &amp;gt; 0"</span>&gt;</span><br><span class="line">        &lt;a th:text=<span class="string">"$&#123;pageHelper.getCurrentPage() - 1&#125;"</span></span><br><span class="line">           th:href="@&#123;'billContent.do?page=' + $&#123;pageHelper.getCurrentPage() - 1&#125;&#125;"&gt;1&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"active"</span>&gt;</span><br><span class="line">        &lt;a th:text="$&#123;pageHelper.getCurrentPage()&#125;" th:href="@&#123;'billContent.do?page=' + $&#123;pageHelper.getCurrentPage()&#125;&#125;"&gt;1&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li th:<span class="keyword">if</span>=<span class="string">"$&#123;pageHelper.getCurrentPage() + 1&#125; &amp;lt; $&#123;pageHelper.getTotalPage() + 1&#125;"</span>&gt;</span><br><span class="line">        &lt;a th:text=<span class="string">"$&#123;pageHelper.getCurrentPage() + 1&#125;"</span></span><br><span class="line">           th:href="@&#123;'billContent.do?page=' + $&#123;pageHelper.getCurrentPage() + 1&#125;&#125;"&gt;1&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li th:<span class="keyword">if</span>=<span class="string">"$&#123;pageHelper.getCurrentPage() + 2&#125; &amp;lt; $&#123;pageHelper.getTotalPage() + 1&#125;"</span>&gt;</span><br><span class="line">        &lt;a th:text=<span class="string">"$&#123;pageHelper.getCurrentPage() + 2&#125;"</span></span><br><span class="line">           th:href="@&#123;'billContent.do?page=' + $&#123;pageHelper.getCurrentPage() + 2&#125;&#125;"&gt;1&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;a href="#" th:href="@&#123;'billContent.do?page=' + $&#123;pageHelper.getTotalPage()&#125;&#125;"&gt;&amp;raquo;&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Thymeleaf</category>
      </categories>
      <tags>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac系统下更改MySQL字符集</title>
    <url>/2019/12/31/Mac%E6%9B%B4%E6%94%B9MySQL%E5%AD%97%E7%AC%A6%E9%9B%86/</url>
    <content><![CDATA[<p>解决方案： <a href="https://zhuanlan.zhihu.com/p/34655552" target="_blank" rel="noopener">Mac环境下的MySQL编码设置</a></p>
<a id="more"></a>

<br>

<p>昨天晚上造测试数据的时候，无意间加进去几条中文数据，然后在终端里select出来之后发现中文全部变成问号了。然后就上网搜“Mac系统下修改MySQL字符集”，很多教程的内容是：</p>
<ol>
<li><p>去 /etc 目录下找是否有 my.cnf 文件；</p>
</li>
<li><p>如果没有的话去 /usr/local/mysql/support-files 文件夹下找 my-default.cnf 文件并复制到 /etc/my.cnf ，在[client]和[mysqld]标签下加上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">default-character-set = utf8</span><br><span class="line"></span><br><span class="line">default-storage-engine = INNODB</span><br><span class="line">character-set-server = utf8</span><br><span class="line">collation-server = utf8_general_ci</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>但是我本地的 /usr/local/mysql/support-files 目录下并没有 .cnf 文件，后来才知道是版本的问题，我本地装的 MySQL 是 5.7.28 ，已经没有了这个文件。</p>
<br>

<p>解决方案：</p>
<p>先在系统偏好设置里停掉 MySQL 服务，然后自己在 /etc 下创建一个 my.cnf 文件，保存之后再重启 MySQL 即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Example MySQL config file for medium systems. </span><br><span class="line"># </span><br><span class="line"># This is for a system with little memory (32M - 64M) where MySQL plays </span><br><span class="line"># an important part, or systems up to 128M where MySQL is used together with </span><br><span class="line"># other programs (such as a web server) </span><br><span class="line"># </span><br><span class="line"># MySQL programs look for option files in a set of </span><br><span class="line"># locations which depend on the deployment platform. </span><br><span class="line"># You can copy this option file to one of those </span><br><span class="line"># locations. For information about these locations, see: </span><br><span class="line"># http://dev.mysql.com/doc/mysql/en/option-files.html </span><br><span class="line"># </span><br><span class="line"># In this file, you can use all long options that a program supports. </span><br><span class="line"># If you want to know which options a program supports, run the program </span><br><span class="line"># with the &quot;--help&quot; option. </span><br><span class="line"># The following options will be passed to all MySQL clients </span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">#password = your_password </span><br><span class="line">port = 3306 </span><br><span class="line">socket = /tmp/mysql.sock </span><br><span class="line"># Here follows entries for some specific programs </span><br><span class="line"># The MySQL server </span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line">init_connect=&apos;SET NAMES utf8</span><br><span class="line">port = 3306 </span><br><span class="line">socket = /tmp/mysql.sock </span><br><span class="line">skip-external-locking </span><br><span class="line">key_buffer_size = 16M </span><br><span class="line">max_allowed_packet = 1M </span><br><span class="line">table_open_cache = 64 </span><br><span class="line">sort_buffer_size = 512K </span><br><span class="line">net_buffer_length = 8K </span><br><span class="line">read_buffer_size = 256K </span><br><span class="line">read_rnd_buffer_size = 512K </span><br><span class="line">myisam_sort_buffer_size = 8M </span><br><span class="line">character-set-server=utf8 </span><br><span class="line">init_connect=&apos;SET NAMES utf8&apos; </span><br><span class="line"># Don&apos;t listen on a TCP/IP port at all. This can be a security enhancement, </span><br><span class="line"># if all processes that need to connect to mysqld run on the same host. </span><br><span class="line"># All interaction with mysqld must be made via Unix sockets or named pipes. </span><br><span class="line"># Note that using this option without enabling named pipes on Windows </span><br><span class="line"># (via the &quot;enable-named-pipe&quot; option) will render mysqld useless! </span><br><span class="line"># </span><br><span class="line">#skip-networking</span><br><span class="line"></span><br><span class="line"># Replication Master Server (default) </span><br><span class="line"># binary logging is required for replication </span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"></span><br><span class="line"># binary logging format - mixed recommended </span><br><span class="line">binlog_format=mixed</span><br><span class="line"></span><br><span class="line"># required unique id between 1 and 2^32 - 1 </span><br><span class="line"># defaults to 1 if master-host is not set </span><br><span class="line"># but will not function as a master if omitted </span><br><span class="line">server-id = 1</span><br><span class="line"></span><br><span class="line"># Replication Slave (comment out master section to use this) </span><br><span class="line"># </span><br><span class="line"># To configure this host as a replication slave, you can choose between </span><br><span class="line"># two methods : </span><br><span class="line"># </span><br><span class="line"># 1) Use the CHANGE MASTER TO command (fully described in our manual) - </span><br><span class="line"># the syntax is: </span><br><span class="line"># </span><br><span class="line"># CHANGE MASTER TO MASTER_HOST=&lt;host&gt;, MASTER_PORT=&lt;port&gt;, </span><br><span class="line"># MASTER_USER=&lt;user&gt;, MASTER_PASSWORD=&lt;password&gt; ; </span><br><span class="line"># </span><br><span class="line"># where you replace &lt;host&gt;, &lt;user&gt;, &lt;password&gt; by quoted strings and </span><br><span class="line"># &lt;port&gt; by the master&apos;s port number (3306 by default). </span><br><span class="line"># </span><br><span class="line"># Example: </span><br><span class="line"># </span><br><span class="line"># CHANGE MASTER TO MASTER_HOST=&apos;125.564.12.1&apos;, MASTER_PORT=3306, </span><br><span class="line"># MASTER_USER=&apos;joe&apos;, MASTER_PASSWORD=&apos;secret&apos;; </span><br><span class="line"># </span><br><span class="line"># OR </span><br><span class="line"># </span><br><span class="line"># 2) Set the variables below. However, in case you choose this method, then </span><br><span class="line"># start replication for the first time (even unsuccessfully, for example </span><br><span class="line"># if you mistyped the password in master-password and the slave fails to </span><br><span class="line"># connect), the slave will create a master.info file, and any later </span><br><span class="line"># change in this file to the variables&apos; values below will be ignored and </span><br><span class="line"># overridden by the content of the master.info file, unless you shutdown </span><br><span class="line"># the slave server, delete master.info and restart the slaver server. </span><br><span class="line"># For that reason, you may want to leave the lines below untouched </span><br><span class="line"># (commented) and instead use CHANGE MASTER TO (see above) </span><br><span class="line"># </span><br><span class="line"># required unique id between 2 and 2^32 - 1 </span><br><span class="line"># (and different from the master) </span><br><span class="line"># defaults to 2 if master-host is set </span><br><span class="line"># but will not function as a slave if omitted </span><br><span class="line">#server-id = 2 </span><br><span class="line"># </span><br><span class="line"># The replication master for this slave - required </span><br><span class="line">#master-host = &lt;hostname&gt; </span><br><span class="line"># </span><br><span class="line"># The username the slave will use for authentication when connecting </span><br><span class="line"># to the master - required </span><br><span class="line">#master-user = &lt;username&gt; </span><br><span class="line"># </span><br><span class="line"># The password the slave will authenticate with when connecting to </span><br><span class="line"># the master - required </span><br><span class="line">#master-password = &lt;password&gt; </span><br><span class="line"># </span><br><span class="line"># The port the master is listening on. </span><br><span class="line"># optional - defaults to 3306 </span><br><span class="line">#master-port = &lt;port&gt; </span><br><span class="line"># </span><br><span class="line"># binary logging - not required for slaves, but recommended </span><br><span class="line">#log-bin=mysql-bin</span><br><span class="line"></span><br><span class="line"># Uncomment the following if you are using InnoDB tables </span><br><span class="line">#innodb_data_home_dir = /usr/local/mysql/data </span><br><span class="line">#innodb_data_file_path = ibdata1:10M:autoextend </span><br><span class="line">#innodb_log_group_home_dir = /usr/local/mysql/data </span><br><span class="line"># You can set .._buffer_pool_size up to 50 - 80 % </span><br><span class="line"># of RAM but beware of setting memory usage too high </span><br><span class="line">#innodb_buffer_pool_size = 16M </span><br><span class="line">#innodb_additional_mem_pool_size = 2M </span><br><span class="line"># Set .._log_file_size to 25 % of buffer pool size </span><br><span class="line">#innodb_log_file_size = 5M </span><br><span class="line">#innodb_log_buffer_size = 8M </span><br><span class="line">#innodb_flush_log_at_trx_commit = 1 </span><br><span class="line">#innodb_lock_wait_timeout = 50</span><br><span class="line"></span><br><span class="line">[mysqldump] </span><br><span class="line">quick </span><br><span class="line">max_allowed_packet = 16M</span><br><span class="line"></span><br><span class="line">[mysql] </span><br><span class="line">no-auto-rehash </span><br><span class="line"># Remove the next comment character if you are not familiar with SQL </span><br><span class="line">#safe-updates </span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[myisamchk] </span><br><span class="line">key_buffer_size = 20M </span><br><span class="line">sort_buffer_size = 20M </span><br><span class="line">read_buffer = 2M </span><br><span class="line">write_buffer = 2M</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy] </span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV打不开摄像头:Process finished with exit code 134</title>
    <url>/2019/12/29/OpenCV%E6%89%93%E4%B8%8D%E5%BC%80%E6%91%84%E5%83%8F%E5%A4%B4-Process-finished-with-exit-code-134/</url>
    <content><![CDATA[<p>报错信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Process finished with exit code 134 (interrupted by signal 6: SIGABRT)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<br>

<p>一个在树莓派上完全没有问题的打开摄像头的脚本，在笔记本上跑时报错，摄像头无法打开：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line">camera = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ret, frame = camera.read()</span><br><span class="line">    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    cv2.imshow(<span class="string">'frame'</span>, frame)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<br>

<p>这个问题困扰了很久，外网上查了很久也没有找到解决方案。因为树莓派上挂了摄像头，插拔不是很方便，并且公司的显示器是VGA接口，所以今天出门没带树莓派。下午打开PyCharm想继续学习一下OpenCV，但是又被这个错给拦住了。</p>
<p><img src="https://images2.imgbox.com/cc/da/H0fN8Zqp_o.png" alt="报错信息"></p>
<p>无意间想到会不会是Python没有权限调用系统摄像头导致的，然后在终端用管理员权限跑一下这个脚本，然后系统弹出一个弹窗，大概意思是询问<strong>“是否允许Python调用摄像头”</strong>，我还想思考一会儿，然后终端就报错了：</p>
<p><img src="https://images2.imgbox.com/7b/ae/F5xewqqb_o.png" alt="报错信息"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Process finished with exit code 134 (interrupted by signal 6: SIGABRT)</span><br></pre></td></tr></table></figure>

<p>原来之前一直都是因为权限的原因，然后点了允许，之后就不报错了。</p>
]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>将YouTube直播转播到bilibili的想法及尝试</title>
    <url>/2019/12/17/%E5%B0%86YouTube%E7%9B%B4%E6%92%AD%E8%BD%AC%E6%92%AD%E5%88%B0bilibili%E7%9A%84%E6%83%B3%E6%B3%95%E5%8F%8A%E5%B0%9D%E8%AF%95/</url>
    <content><![CDATA[<p>将YouTube直播转播到bilibili的想法及尝试</p>
<p>周末的时候本来在学习Swift的，不经意间打开Youtube直播，看到 大阪伊丹国际机场的 live camera 直播，出于对民航的兴趣，觉得直播里的陆空对话可以很好的打发时间，于是产生了能否24小时将Youtube的直播转播到墙内的疑问，带着这个疑问折腾了两天。</p>
<a id="more"></a>

<iframe width="560" height="315" src="https://www.youtube.com/embed/pV2RaaoxyF8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<大阪国际机场live camera含陆空对话>(需要梯子)



<p>在往上搜了一些资料，发现已经有很多人实现了我的想法，而且做法也超级简单：</p>
<ul>
<li>YouTube 直播地址</li>
<li>一个海外vps</li>
<li>youtube-dl</li>
<li>ffmpeg</li>
<li>bilibili直播地址</li>
</ul>
<p>用youtube-dl获取直播m3u8文件，然后用ffmpeg不断读取流数据，然后推流到bilibili直播：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -re -i <span class="string">"<span class="variable">$(youtube-dl -f 95 -g "https://www.youtube.com/watch?v=pV2RaaoxyF8")</span>"</span> -c:v copy -c:a aac -b:v 5000k -ar 44100 -ab 320k -ac 2 -strict -2 -flags +global_header -bsf:a aac_adtstoasc -bufsize 3000k -f flv <span class="string">"rtmp://txy.live-send.acg.tv/live-txy/?streamname=xxxx&amp;key=yyyy"</span></span><br></pre></td></tr></table></figure>

<p>用这个命令就可以实现上面的功能。</p>
<p>但是在实际使用操作过程中，总是在发送了100帧数据左右开始报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[tls @ 0x5566d890ffe0] The TLS connection was non-properly terminated.</span><br><span class="line">[tls @ 0x5566d8fd25a0] The TLS connection was non-properly terminated.</span><br><span class="line">[tls @ 0x5566d8fd25a0] The specified session has been invalidated <span class="keyword">for</span> some reason.</span><br><span class="line"></span><br><span class="line">av_interleaved_write_frame(): Broken pipe</span><br><span class="line">Error writing trailer of rtmp://txy.live-send.acg.tv/live-txy/?streamname=xxxx</span><br><span class="line">[aac @ 0x5566d8cf45e0] Qavg: 65536.000</span><br><span class="line">Conversion failed!</span><br></pre></td></tr></table></figure>

<p>TLS连接被关闭，在搜了一大堆资料后我依然怀疑是youtube没有正确的关闭连接，导致报错。还做了很多其他的验证：</p>
<ul>
<li>尝试在树莓派上安装ffmpeg往bilibili推流，直播了一个网上将近十来个小时，没有任何问题。</li>
<li>在香港vps上将一段已经下载好的视频推流到bilibili，有问题。</li>
<li>在美国vps上将一段已经下载好的视频推到bilibili，有问题。</li>
<li>在香港vps上将一段已经下载好的视频推流到YouTube，没有问题。</li>
<li>在美国vps上将一段已经下载好的视频推流到YouTube，没有问题。</li>
<li>在香港和美国vps上换了和树莓派相同版本的v4.1.1 ffmpeg重复上述操作，结果不变。</li>
</ul>
<p>将google搜索到的结果几乎都看了一遍，也没找到多少有价值的信息。</p>
<p>今天晚上在思考其他解决方案的时候，看到bilibili专栏的文章，尝试了作者用java写的jar包，也报相同的错误，于是联系了作者，才得知，原来这个方法已经失效了。</p>
<blockquote>
<p> <strong>这个脚本早就报废了的，现在B站只有官方py或者报备了的才可以从海外推。目前转播man已经失业，有更好转播的方案。爱丽丝</strong></p>
</blockquote>
<p>原来上面的报错是因为bilibili掐断了连接导致的。不过这也打消了我最初的疑虑：侵权问题。</p>
<p>这个想法可能要先放一段时间了，目前的想法是想尝试一下用 OpenCV 和 ffmpeg 能不能实现，不知道什么时候才能重新捡起来（逃）。</p>
</大阪国际机场live>]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派安装OpenCV-Python</title>
    <url>/2019/11/10/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85OpenCV-Python/</url>
    <content><![CDATA[<p>之前在MacOS上安装OpenCV还比较顺利，直接在PyCharm里用pip安装就成功了。但是在树莓派上安装OpenCV一直依赖关系的错。最终在重新安装完Raspberry OS之后，用清华的源安装成功了。</p>
<a id="more"></a>



<h2 id="更换清华源"><a href="#更换清华源" class="headerlink" title="更换清华源"></a>更换清华源</h2><p>官方资料：<a href="https://mirror.tuna.tsinghua.edu.cn/help/raspbian/" target="_blank" rel="noopener">Raspbian 镜像使用帮助</a></p>
<p>设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑 `/etc/apt/sources.list` 文件，删除原文件所有内容，用以下内容取代：</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 `/etc/apt/sources.list.d/raspi.list` 文件，删除原文件所有内容，用以下内容取代：</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui</span><br></pre></td></tr></table></figure>

<h2 id="安装OpenCV-Python"><a href="#安装OpenCV-Python" class="headerlink" title="安装OpenCV-Python"></a>安装OpenCV-Python</h2><p>执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装必要软件</span></span><br><span class="line">sudo apt-get install -y libjasper-dev libqtgui4 libqt4-test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装OpenCV</span></span><br><span class="line">sudo apt install python-opencv</span><br></pre></td></tr></table></figure>

<p>3b+更换为国内源的话大概一两分钟，就安装完成了。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>利用OpenCV打开摄像头，并读取视频数据显示出来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">    print(<span class="string">"camera is still closed."</span>)</span><br><span class="line"><span class="keyword">while</span> cap.isOpened():</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    <span class="keyword">if</span> ret == <span class="literal">True</span>:</span><br><span class="line">        cv2.imshow(<span class="string">'Frame'</span>, frame)</span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">25</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">'q'</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p>如果是利用终端命令通过ssh远程执行的话，会出错：cannot open display，因为ssh无法打开窗口，在树莓派终端执行不会报错。</p>
]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>更换七牛云过期SSL证书</title>
    <url>/2019/11/10/%E6%9B%B4%E6%8D%A2%E4%B8%83%E7%89%9B%E4%BA%91%E8%BF%87%E6%9C%9FSSL%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<p>更换七牛云过期SSL证书</p>
<p>转眼博客已经跑了一年了，最近又是域名到期、又是SSL证书到期。</p>
<p>刚给域名续了5年的费，存储在七牛云的图片因为SSL证书到期加载不出来了。提示“存在隐私安全隐患”，通过图片外链访问也无法加载图片，Chrome直接拒绝连接。</p>
<p>一年前配置的，流程有些忘了，今天晚上又摸索了一遍。</p>
<a id="more"></a>



<h2 id="七牛云申请证书"><a href="#七牛云申请证书" class="headerlink" title="七牛云申请证书"></a>七牛云申请证书</h2><p>据说七牛云不支持阿里云申请的证书，所以没在阿里云申请，直接在七牛云申请了TrustAisa的一年免费证书。</p>
<p>具体流程：</p>
<p>登录七牛云 &gt; SSL证书服务 &gt; 购买证书 &gt; 填写必要信息购买指向目标域名的证书（选择TrustAsia免费证书，验证方式选择DNS验证，个人信息可以随便填，貌似不需要验证）</p>
<h2 id="添加域名验证"><a href="#添加域名验证" class="headerlink" title="添加域名验证"></a>添加域名验证</h2><p>到域名解析里添加对应的TEXT类型的记录，记录值为申请证书时指定的值。我直接将以前的值变更成了新的值。</p>
<h2 id="应用SSL证书"><a href="#应用SSL证书" class="headerlink" title="应用SSL证书"></a>应用SSL证书</h2><p>大概十分钟左右证书签发成功后，到 对象存储 &gt; 域名管理 &gt; 配置 &gt; HTTPS 配置 &gt; 强制 HTTPS &gt; 可更换证书列表里选择刚才申请的证书，然后应用。等待几分钟之后，便能通过HTTPS访问存储内容了。</p>
]]></content>
      <categories>
        <category>博客维护</category>
      </categories>
      <tags>
        <tag>博客维护</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS下RIME输入法的配置</title>
    <url>/2019/11/09/Mac-OS%E4%B8%8BRIME%E8%BE%93%E5%85%A5%E6%B3%95%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Mac OS下RIME输入法配置</p>
<p>之前一直用的搜狗输入法，不得不说，搜狗输入法确实做得很不错，精准快速。但是毕竟是国产软件，联网之后隐私方面存在安全隐患，还没发布到网络的文本已经有人提前知道了💦。本想直接设置成单机版以避免输入法上传输入记录，但是貌似防火墙和改hosts文件对搜狗都不管用。于是在网上查了一下，知道了 <strong>RIME输入法</strong> 。</p>
<a id="more"></a>

<p>看到配置比较复杂，我也是犹豫了半天才下定决心搞一下的。还差 emoji表情的输入 没搞定，只弄好了基础的中文输入以及词库的扩展，以后真正有需要了再配置吧。</p>
<p>比较好的参考资料：</p>
<ul>
<li><p><a href="https://github.com/rime/squirrel" target="_blank" rel="noopener">GitHub主页</a></p>
</li>
<li><p><a href="http://ju.outofmemory.cn/entry/178796" target="_blank" rel="noopener">给 Rime 添加第三方词库</a></p>
</li>
<li><p><a href="https://lonelygo.github.io/2015-01-28-Rime_Input/" target="_blank" rel="noopener">Rime输入法—Squirrel词库添加及配置</a> （虽然有点旧了，但是很详细，推荐）</p>
</li>
</ul>
<p>安装完体验了两个小时，输入体验很不错，没遇到什么问题，以后应该会一直用下去。</p>
<p>各种软件还是去国产化吧，对待国产软件，有替代则替代，能不用则不用。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>scp-Linux文件复制命令</title>
    <url>/2019/11/03/scp-Linux%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>scp — Linux文件复制命令</p>
<blockquote>
<p>用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。</p>
</blockquote>
<a id="more"></a>

<br>

<h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><ul>
<li>-P: 端口号</li>
<li>-r: 递归复制   </li>
</ul>
<br>

<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上传文件</span></span><br><span class="line">scp -r -P xxxx /home/local_user/file_path remote_user@remote_host_addr:/home/remote_user/file_path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载文件时将 source 和 target 调换一下</span></span><br><span class="line">scp -r -P xxxx remote_user@remote_host_addr:/home/remote_user/file_path /home/local_user/file_path</span><br></pre></td></tr></table></figure>

<br>

<h2 id="Permission-denied-问题"><a href="#Permission-denied-问题" class="headerlink" title="Permission denied 问题"></a>Permission denied 问题</h2><p>今天下午上传文件到服务器的时候一直报这个错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -P xxxx file.torrent <span class="built_in">test</span>@<span class="built_in">test</span>:/home</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="built_in">test</span>@test.com<span class="string">'s password: </span></span><br><span class="line"><span class="string">scp: /home/25316538e6498c7645e3da963253977d.torrent: Permission deniedv</span></span><br></pre></td></tr></table></figure>

<p>保证密码输入正确并且重试了好几次都报同样的错，才想起来以前遇到这个问题，是因为当前用户对目标目录没有操作权限导致的，只要把目标路径改到当前用户目录下就好了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -P xxxx file.torrent <span class="built_in">test</span>@<span class="built_in">test</span>:/home/<span class="built_in">test</span>/Downloads</span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/scp.html" target="_blank" rel="noopener">18. scp 跨机远程拷贝</a></p>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>硝酸甘油炸药的制作</title>
    <url>/2019/10/27/%E7%A1%9D%E9%85%B8%E7%94%98%E6%B2%B9%E7%82%B8%E8%8D%AF%E7%9A%84%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<p>炸弹​ 💣 制作从入门到入土 👻</p>
<blockquote>
<p>在 YouTube 上看到了“回形针📎”的“原子弹制作教程”，感觉是一个提高动手能力的项目，尽管原理和流程都很简单，但是材料和设备不易得。于是想先从普通的硝酸甘油炸药开始学习吧，原料易得，危险性也不是那么高。</p>
</blockquote>
<p>学习资料：<a href="https://blog.boxun.com/hero/201208/haozhonghua2012/29_1.shtml" target="_blank" rel="noopener">自制炸药制作方法</a></p>
<a id="more"></a>



<h2 id="方式一：鞭炮"><a href="#方式一：鞭炮" class="headerlink" title="方式一：鞭炮"></a>方式一：鞭炮</h2><p>最简单易得的方式是选择黑火药。</p>
<ol>
<li>从售卖烟花爆竹的地方购买1000响左右的鞭炮</li>
<li>将鞭炮一个个拆开，将火药聚集起来</li>
</ol>
<p>一个个拆可能会比较麻烦，工作量比较大。作为简便途径，可以先将鞭炮在煤油中浸泡一段时间，然后放入绞肉馅的机器里，粉碎然后晾干可直接使用。（千万不能产生火花）</p>
<p>这种方式的成本在100块钱以内。</p>
<h2 id="方式二：自制硝酸甘油炸药"><a href="#方式二：自制硝酸甘油炸药" class="headerlink" title="方式二：自制硝酸甘油炸药"></a>方式二：自制硝酸甘油炸药</h2><h3 id="原料及材料"><a href="#原料及材料" class="headerlink" title="原料及材料"></a>原料及材料</h3><p>滴管，玻璃杯杯（2个），碳酸钠（苏打），浓硝酸，浓硫酸，甘油，水（一盆），一个茶缸，温度计（量程大一些），酸碱指示剂或者PH试纸。</p>
<h3 id="流程及步骤"><a href="#流程及步骤" class="headerlink" title="流程及步骤"></a>流程及步骤</h3><ol>
<li>取一个玻璃杯并向其中加入80ml左右的水。</li>
<li>取另一个玻璃杯加入80ml左右的水，再加入一平勺碳酸钠，配成碳酸钠溶液。</li>
<li>将茶缸放入水盆中，向茶缸中 <strong>缓慢滴入</strong>⚠️ 8~10ml左右的浓硝酸，保持温度在20℃以下。如果是夏天的话，可能需要准备一些冰块。</li>
<li>向茶缸中 <strong>缓慢滴入</strong>⚠️ 22~28ml浓硫酸，注意保持温度在20℃以下，必要时向盆中加入冰块。</li>
<li>保持4~5滴/分钟的速率将甘油 <strong>滴入</strong> 上述混合物中，一直滴到甘油在混合物表面形成甘油层为止。注意保持温度在20℃以下！</li>
<li>低温下搅拌混合物15分钟以后，将混合物倒入已经加入蒸馏水的杯子中。硝酸甘油会沉底。</li>
<li>把下层的硝酸甘油滴入碳酸钠溶液中（为了去除多余的酸），知道PH值为中性。（​⚠️​ 千万不能振荡或晃动​！）</li>
</ol>
<h3 id="填充剂"><a href="#填充剂" class="headerlink" title="填充剂"></a>填充剂</h3><p>将玻璃瓶刻蚀，形成小块，把头部瓶口用胶带之类的东西密封起来，以保证爆炸时玻璃瓶体能形成弹片。为了加大弹片的威力，可以考虑 <strong>将填充剂换成铝热剂</strong> （铝粉和氧化铁粉），发生爆炸的时候，高温会使其剧烈反应，产生更大的杀伤力。</p>
<h3 id="引爆"><a href="#引爆" class="headerlink" title="引爆"></a>引爆</h3><p>接下来是引爆系统部分。</p>
<h4 id="短路电路引爆"><a href="#短路电路引爆" class="headerlink" title="短路电路引爆"></a>短路电路引爆</h4><p>拆解无线电系统，得到一个共频系统，将其中一个短路的情况安装到炸弹上，然后用其他一些电火花即可引燃的物质与炸药放在一起，可实现 通话 &gt; 短路 &gt; 火花 &gt; 爆炸 的遥控效果。 （待研究）</p>
<h4 id="定时系统引爆"><a href="#定时系统引爆" class="headerlink" title="定时系统引爆"></a>定时系统引爆</h4><p>定时系统比较简单，普通的电子闹钟就可以胜任。</p>
<blockquote>
<p>最后向各位说明的是，制作炸弹也好，燃烧弹也好，既不是高精尖科技，也不是一个你捻子一个雷式的土法生产。需要化学，物理，结构力学，材料力学甚至日常生活方面各种的知识。</p>
</blockquote>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV——cv2.inRange()函数</title>
    <url>/2019/10/14/OpenCV%E2%80%94%E2%80%94cv2-inRange-%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>在图像中提取目标物时可以用该函数去除背景。</p>
<p>有三个参数：</p>
<ul>
<li>hsv_img：颜色空间为 HSV 的图像；</li>
<li>lower：下阈值，图像中低于此值的颜色值变为 0；</li>
<li>uppper：上阈值，图像中高于此值的颜色值变为 0。</li>
</ul>
<a id="more"></a>



<p>颜色值在此范围内的全部设置为255，然后利用得到背景和原图片进行位操作，即可得到原图中目标。</p>
<p>常用方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = cv2.imread(img_path, <span class="number">0</span>)</span><br><span class="line">img_hsv = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)</span><br><span class="line">lower = [<span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>]</span><br><span class="line">uppper = [<span class="number">200</span>, <span class="number">255</span>, <span class="number">255</span>]</span><br><span class="line"><span class="comment"># 利用上下阈值去除背景部分</span></span><br><span class="line">mask = cv2.inRange(img_hsv, lower, upper)</span><br><span class="line"><span class="comment"># 利用位运算得到目标物体</span></span><br><span class="line">target = cv2.bitwise_and(img, img, mask=mask)</span><br><span class="line">cv2.imshow(<span class="string">"mask"</span>, mask)</span><br><span class="line">cv2.imshow(<span class="string">"target"</span>, target)</span><br></pre></td></tr></table></figure>

<p>上下阈值的获取：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">color = np.array([[[xxx, xxx, xxx]]])</span><br><span class="line">hsv_color = cv2.cvtColor(color, cv2.COLOR_RGB2HSV)</span><br><span class="line">print(hsv_color)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV 学习笔记（一）</title>
    <url>/2019/10/12/OpenCV-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p><a href="https://zh.wikipedia.org/wiki/OpenCV" target="_blank" rel="noopener">OpenCV — 维基百科</a> </p>
<p><strong>OpenCV</strong>的全称是Open Source Computer Vision Library，是一个跨平台的<a href="https://zh.wikipedia.org/wiki/计算机视觉" target="_blank" rel="noopener">计算机视觉</a>库。OpenCV是由<a href="https://zh.wikipedia.org/wiki/英特尔" target="_blank" rel="noopener">英特尔公司</a>发起并参与开发，以<a href="https://zh.wikipedia.org/wiki/BSD许可证" target="_blank" rel="noopener">BSD许可证</a>授权发行，可以在商业和研究领域中免费使用。OpenCV可用于开发实时的<a href="https://zh.wikipedia.org/wiki/图像处理" target="_blank" rel="noopener">图像处理</a>、<a href="https://zh.wikipedia.org/wiki/计算机视觉" target="_blank" rel="noopener">计算机视觉</a>以及<a href="https://zh.wikipedia.org/wiki/模式识别" target="_blank" rel="noopener">模式识别</a>程序。</p>
<a id="more"></a>



<h2 id="读取和显示图像"><a href="#读取和显示图像" class="headerlink" title="读取和显示图像"></a>读取和显示图像</h2><ul>
<li>cv2.imread()：读取</li>
<li>cv2.imwrite()：写入</li>
<li>cv2.imshow()：显示</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = cv2.imread(img_path, <span class="number">0</span>)</span><br><span class="line">cv2.namedWindow(<span class="string">"imview"</span>, cv2.WINDOW_NORMAL)</span><br><span class="line">cv2.imshow(<span class="string">"imview"</span>, img)</span><br><span class="line">k = cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> k == ord(<span class="string">"s"</span>):</span><br><span class="line">  cv2.imwrite(<span class="string">"other.jpg"</span>, img)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com//blog/20191012/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72019-10-0620.25.17.png" alt></p>
<h2 id="视频的操作"><a href="#视频的操作" class="headerlink" title="视频的操作"></a>视频的操作</h2><h3 id="从摄像头读取视频"><a href="#从摄像头读取视频" class="headerlink" title="从摄像头读取视频"></a>从摄像头读取视频</h3><ul>
<li>cv2.VideoCapture(0).read()</li>
<li>cv2.cvtColor()</li>
<li>cv2.imshow()</li>
<li>cap.get(propId)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_video</span><span class="params">()</span>:</span></span><br><span class="line">    cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">        cv2.imshow(<span class="string">"frame"</span>, gray)</span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey() == ord(<span class="string">"q"</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cap.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">video</span><span class="params">()</span>:</span></span><br><span class="line">    cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">    fourcc = cv2.VideoWriter_fourcc(*<span class="string">'XVID'</span>)</span><br><span class="line">    out = cv2.VideoWriter(<span class="string">"output.avi"</span>, fourcc, <span class="number">20</span>, <span class="number">0</span>, (<span class="number">640</span>, <span class="number">480</span>))</span><br><span class="line">    <span class="keyword">while</span> (cap.isOpened()):</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            frame = cv2.flip(frame, <span class="number">0</span>)</span><br><span class="line">            out.write(frame)</span><br><span class="line">            cv2.imshow(<span class="string">"video"</span>, frame)</span><br><span class="line">            <span class="keyword">if</span> cv2.waitKey(<span class="number">0</span>) == ord(<span class="string">"q"</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cap.release()</span><br><span class="line">    out.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<h3 id="从文件中获取视频"><a href="#从文件中获取视频" class="headerlink" title="从文件中获取视频"></a>从文件中获取视频</h3><p>cv2.VideoCapture(0)表示打开默认设备，将设备索引号改成视频文件的名称就能从视频文件中读取视频，使用 waitKey()控制播放速度（通常25 ms）。</p>
<h2 id="OpenCV-中的绘图函数"><a href="#OpenCV-中的绘图函数" class="headerlink" title="OpenCV 中的绘图函数"></a>OpenCV 中的绘图函数</h2><p>学会以下函数的使用：</p>
<ul>
<li>cv2.line()</li>
<li>cv2.circle()</li>
<li>cv2.rectangle()</li>
<li>cv2.ellipse()</li>
<li>cv2.putText()</li>
</ul>
<p>参数：上面所有的绘图函数都需要的参数：</p>
<ul>
<li>img ：画布</li>
<li>color : 指定的颜色，RGB-&gt;(255, 255, 0)</li>
<li>linetype : 线条的类型，8连接，抗锯齿等。lineType=cv2.LINE_AA（抗锯齿）。</li>
</ul>
<h3 id="画线"><a href="#画线" class="headerlink" title="画线"></a>画线</h3><p>画一条直线需要指定直线的起点和终点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_line2</span><span class="params">()</span>:</span></span><br><span class="line">    canvas = np.zeros((<span class="number">300</span>, <span class="number">300</span>, <span class="number">3</span>), dtype=<span class="string">"uint8"</span>)</span><br><span class="line">    green = (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">    cv2.line(canvas, (<span class="number">20</span>, <span class="number">20</span>), (<span class="number">150</span>, <span class="number">150</span>), color=green)</span><br><span class="line">    cv2.imshow(<span class="string">"green line"</span>, canvas)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com//blog/20191012/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72019-10-0620.40.01.png" alt></p>
<h3 id="画矩形"><a href="#画矩形" class="headerlink" title="画矩形"></a>画矩形</h3><p>绘制矩形需要指定两个点的坐标：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_rectangle</span><span class="params">()</span>:</span></span><br><span class="line">    canvas = np.zeros((<span class="number">300</span>, <span class="number">300</span>, <span class="number">3</span>), dtype=<span class="string">"uint8"</span>)</span><br><span class="line">    color = (<span class="number">126</span>, <span class="number">126</span>, <span class="number">126</span>)</span><br><span class="line">    cv2.rectangle(canvas, (<span class="number">80</span>, <span class="number">80</span>), (<span class="number">250</span>, <span class="number">270</span>), color=color)</span><br><span class="line">    cv2.imshow(<span class="string">"rectangle"</span>, canvas)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com//blog/20191012/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72019-10-0620.49.11.png" alt></p>
<h3 id="画圆"><a href="#画圆" class="headerlink" title="画圆"></a>画圆</h3><p>绘制圆形需要指定圆心坐标和半径大小：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_circle</span><span class="params">()</span>:</span></span><br><span class="line">    canvas = np.zeros((<span class="number">300</span>, <span class="number">300</span>, <span class="number">3</span>), dtype=<span class="string">"uint8"</span>)</span><br><span class="line">    color = (<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">    cv2.circle(canvas, (<span class="number">150</span>, <span class="number">140</span>), <span class="number">100</span>, color=color)</span><br><span class="line">    cv2.imshow(<span class="string">"circle"</span>, canvas)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com//blog/20191012/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72019-10-0620.53.40.png" alt></p>
<h3 id="画椭圆"><a href="#画椭圆" class="headerlink" title="画椭圆"></a>画椭圆</h3><p>绘制椭圆需要指定的参数：</p>
<ol>
<li>中心点坐标</li>
<li>长轴和短轴</li>
<li>沿逆时针方向旋转的角度</li>
<li>顺时针方向起始角度和结束角度</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_ellipse</span><span class="params">()</span>:</span></span><br><span class="line">    canvas = np.zeros((<span class="number">400</span>, <span class="number">400</span>, <span class="number">3</span>), dtype=<span class="string">"uint8"</span>)</span><br><span class="line">    color = (<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">    cv2.ellipse(canvas, (<span class="number">200</span>, <span class="number">200</span>), (<span class="number">100</span>, <span class="number">150</span>), <span class="number">0</span>, <span class="number">0</span>, <span class="number">360</span>, color)</span><br><span class="line">    cv2.imshow(<span class="string">"ellipse"</span>, canvas)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com//blog/20191012/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72019-10-0620.59.20.png" alt></p>
<h3 id="在图片中添加文字"><a href="#在图片中添加文字" class="headerlink" title="在图片中添加文字"></a>在图片中添加文字</h3><p>所需参数：</p>
<ul>
<li>添加的文本</li>
<li>绘制的位置</li>
<li>字体类型</li>
<li>字体大小</li>
<li>文字的一般属性（颜色，粗细，线条类型等）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put_text</span><span class="params">()</span>:</span></span><br><span class="line">    canvas = np.zeros((<span class="number">300</span>, <span class="number">600</span>, <span class="number">3</span>), dtype=<span class="string">"uint8"</span>)</span><br><span class="line">    font = cv2.FONT_HERSHEY_SIMPLEX</span><br><span class="line">    cv2.putText(canvas, <span class="string">'Kanna Makino'</span>, (<span class="number">10</span>, <span class="number">100</span>), font, <span class="number">2</span>, (<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>), <span class="number">2</span>)</span><br><span class="line">    cv2.imshow(<span class="string">"put text"</span>, canvas)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com//blog/20191012/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72019-10-0621.12.59.png" alt></p>
<h2 id="简单的鼠标事件"><a href="#简单的鼠标事件" class="headerlink" title="简单的鼠标事件"></a>简单的鼠标事件</h2><ul>
<li>学习使用 OpenCV 处理鼠标事件</li>
<li>函数：<strong>cv2.setMouseCallback()</strong></li>
</ul>
<h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><p>鼠标事件可以获得事件对应的坐标和事件名称。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_circle</span><span class="params">(event, x, y, flags, params)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> event == cv2.EVENT_LBUTTONDBLCLK:</span><br><span class="line">        cv2.circle(img, (x, y), <span class="number">100</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">-1</span>, lineType=cv2.LINE_AA)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), dtype=<span class="string">"uint8"</span>)</span><br><span class="line">cv2.namedWindow(<span class="string">'image'</span>)</span><br><span class="line">cv2.setMouseCallback(<span class="string">'image'</span>, draw_circle)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">20</span>) &amp; <span class="number">0xFF</span> == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com//blog/20191012/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72019-10-0822.11.59.png" alt></p>
<h2 id="用滑动条做调色板"><a href="#用滑动条做调色板" class="headerlink" title="用滑动条做调色板"></a>用滑动条做调色板</h2><p>学习目标：</p>
<ul>
<li>学会把滑动条绑定到 OpenCV 的窗口</li>
<li>cv2.getTrackbarPos()</li>
<li>cv2.createTrackbar()</li>
</ul>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># _*_cdoing:utf-8_*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nothing</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img = np.zeros((<span class="number">500</span>, <span class="number">312</span>, <span class="number">3</span>), dtype=<span class="string">"uint8"</span>)</span><br><span class="line">cv2.namedWindow(<span class="string">"image"</span>)</span><br><span class="line">cv2.createTrackbar(<span class="string">"R"</span>, <span class="string">"image"</span>, <span class="number">0</span>, <span class="number">255</span>, nothing)</span><br><span class="line">cv2.createTrackbar(<span class="string">"G"</span>, <span class="string">"image"</span>, <span class="number">0</span>, <span class="number">255</span>, nothing)</span><br><span class="line">cv2.createTrackbar(<span class="string">"B"</span>, <span class="string">"image"</span>, <span class="number">0</span>, <span class="number">255</span>, nothing)</span><br><span class="line"></span><br><span class="line">switch = <span class="string">'0:OFF\n1:ON'</span></span><br><span class="line">cv2.createTrackbar(switch, <span class="string">"image"</span>, <span class="number">0</span>, <span class="number">1</span>, nothing)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    cv2.imshow(<span class="string">"image"</span>, img)</span><br><span class="line">    k = cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    r = cv2.getTrackbarPos(<span class="string">"R"</span>, <span class="string">"image"</span>)</span><br><span class="line">    g = cv2.getTrackbarPos(<span class="string">"G"</span>, <span class="string">"image"</span>)</span><br><span class="line">    b = cv2.getTrackbarPos(<span class="string">"B"</span>, <span class="string">"image"</span>)</span><br><span class="line">    s = cv2.getTrackbarPos(switch, <span class="string">"image"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> s == <span class="number">0</span>:</span><br><span class="line">        img[:] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        img[:] = [r, g, b]</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><blockquote>
<p>创建一个画板，可以选择各种颜色的画笔进行绘画操作。</p>
</blockquote>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_circle</span><span class="params">(event, x, y, flag, params)</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h2 id="核心操作"><a href="#核心操作" class="headerlink" title="核心操作"></a>核心操作</h2><h2 id="图像的基础操作"><a href="#图像的基础操作" class="headerlink" title="图像的基础操作"></a>图像的基础操作</h2><p>学习目标：</p>
<ul>
<li>获取像素的值并修改</li>
<li>获取图像的属性（信息）</li>
<li>图像的 ROI（）</li>
<li>图像通道的拆分与合并</li>
</ul>
<h3 id="获取图像的像素"><a href="#获取图像的像素" class="headerlink" title="获取图像的像素"></a>获取图像的像素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">"/Users/youyou2608/Pictures/pi.png"</span>)</span><br><span class="line">print(img.item(<span class="number">10</span>, <span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line">img.itemset((<span class="number">10</span>, <span class="number">10</span>, <span class="number">2</span>), <span class="number">100</span>)</span><br><span class="line">print(img.item(<span class="number">10</span>, <span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># 图像的属性：行，列，通道，图像数据类型，像素数目等</span></span><br><span class="line">print(img.shape)</span><br><span class="line"><span class="comment"># 像素数目</span></span><br><span class="line">print(img.size)</span><br><span class="line"><span class="comment"># 图像的数据类型</span></span><br><span class="line">print(img.dtype)</span><br><span class="line"></span><br><span class="line"><span class="comment">####### 输出 ######</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line">(<span class="number">487</span>, <span class="number">423</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">618003</span></span><br><span class="line">uint8</span><br></pre></td></tr></table></figure>

<h3 id="图像的-ROI"><a href="#图像的-ROI" class="headerlink" title="图像的 ROI"></a>图像的 ROI</h3><p>有时对图像的某一特定区域进行搜索比在一张图像中搜索有更高的准确性和性能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">"/Users/youyou2608/Pictures/pi.png"</span>)</span><br><span class="line">temp = img[<span class="number">100</span>:<span class="number">300</span>, <span class="number">10</span>:<span class="number">100</span>]</span><br><span class="line">img[<span class="number">0</span>:<span class="number">200</span>, <span class="number">100</span>:<span class="number">190</span>] = temp</span><br><span class="line">cv2.imshow(<span class="string">"image"</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">100000</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com//blog/20191012/QQ20191009-225749.png" alt></p>
<h3 id="拆分及合并图像通道"><a href="#拆分及合并图像通道" class="headerlink" title="拆分及合并图像通道"></a>拆分及合并图像通道</h3><p>对 BGR 三个通道分别进行操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将图片所有共色通道值都设置为0</span></span><br><span class="line">img = cv2.imread(<span class="string">"/Users/youyou2608/Pictures/pi.png"</span>)</span><br><span class="line">img[<span class="number">0</span>:<span class="number">300</span>, <span class="number">0</span>:<span class="number">200</span>, <span class="number">2</span>] = <span class="number">0</span></span><br><span class="line">cv2.imshow(<span class="string">"image"</span>, img)</span><br></pre></td></tr></table></figure>

<h2 id="图像上的算术运算"><a href="#图像上的算术运算" class="headerlink" title="图像上的算术运算"></a>图像上的算术运算</h2><ul>
<li>学习图像上的加法、减法和位运算等</li>
<li>cv2.add()</li>
<li>cv2.addWeighted()</li>
</ul>
<h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><p>进行加法的两幅图像的大小、类型必须一致。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.uint([<span class="number">250</span>])</span><br><span class="line">y = np.uint([<span class="number">20</span>])</span><br><span class="line">print(cv2.add(x, y))  <span class="comment"># [[255]]</span></span><br></pre></td></tr></table></figure>

<h3 id="图像混合"><a href="#图像混合" class="headerlink" title="图像混合"></a>图像混合</h3><p>图像混合其实也是加法，但是不同的是两幅图像的权重不同。</p>
<p>函数：cv2.addWeighted()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img1 = cv2.read(<span class="string">"img1.png"</span>)</span><br><span class="line">img2 = cv2.read(<span class="string">"img2.png"</span>)</span><br><span class="line"></span><br><span class="line">dst = cv2.addWeighted(img1, <span class="number">0.7</span>, img2, <span class="number">0.3</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">"image"</span>, dst)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com//blog/20191012/2019-10-1217.13.11.png" alt></p>
<p>后续…</p>
]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 mjpg-streamer 的树莓派视频监控</title>
    <url>/2019/08/05/%E5%9F%BA%E4%BA%8E-mjpg-streamer-%E7%9A%84%E6%A0%91%E8%8E%93%E6%B4%BE%E8%A7%86%E9%A2%91%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<h2 id="基于mjpg-streamer的视频监控"><a href="#基于mjpg-streamer的视频监控" class="headerlink" title="基于mjpg-streamer的视频监控"></a>基于<strong>mjpg-streamer</strong>的视频监控</h2><h3 id="视频监控搭建"><a href="#视频监控搭建" class="headerlink" title="视频监控搭建"></a>视频监控搭建</h3><p>本来想用 python 来做的，但是 VLC 串流不知道是不是设置的问题，视频采集是正常的，但是接收端接收到的视频一团糊，在无意间知道了 <strong>mjpg-streamer</strong> 这个项目，GitHub 地址：<a href="https://github.com/jacksonliam/mjpg-streamer。" target="_blank" rel="noopener">https://github.com/jacksonliam/mjpg-streamer。</a></p>
<a id="more"></a>



<p>安装方法参照GitHub：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install cmake libjpeg8-dev</span><br><span class="line"></span><br><span class="line">sudo apt-get install gcc g++</span><br><span class="line"></span><br><span class="line">cd mjpg-streamer-experimental</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<p>安装完之后就可以直接启动了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./mjpg_streamer -o "output_http.so -w ./www" -i "input_raspicam.so"</span><br></pre></td></tr></table></figure>

<p>默认使用8080端口，浏览器打开地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://192.168.0.103:8080/?action=stream</span><br></pre></td></tr></table></figure>

<p>就能实时查看树莓派摄像头采集到的视频。</p>
<h3 id="外网访问"><a href="#外网访问" class="headerlink" title="外网访问"></a>外网访问</h3><p>在局域网内，直接访问树莓派的 ip 地址就能查看视频，但是如果想从外网访问的话，还需要做点手脚。</p>
<p>使用 frp 反向隧道进行内网穿透。</p>
<p>先分别在vps 和树莓派上安装frp 服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.20.0/frp_0.20.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>

<p>解压上面下载的文件。</p>
<p>服务器端配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">进去目录</span><br><span class="line"></span><br><span class="line">vi  frps.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000         # frp与客户端绑定进行通信的端口</span><br><span class="line">auto_token = frp7</span><br><span class="line">vhost_http_port = 9000   # http 访问端口</span><br></pre></td></tr></table></figure>

<p>树莓派配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.进去目录</span><br><span class="line">2.vi frpc.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">server_addr = 云服务器的IP   # frps所在的服务器的 IP</span><br><span class="line">server_port = 7000                 # frp与服务器绑定进行通信的端口</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 192.168.0.103        # Pi所在局域网IP</span><br><span class="line">local_port = 22                       # 本地端口</span><br><span class="line">remote_port = 6000               # ssh远程访问端口</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_port = 8080                   # web 服务对应的端口——mjpg-streamer所需端口</span><br><span class="line">custom_domains = 云服务器IP   # frps所在的服务器的 IP</span><br></pre></td></tr></table></figure>

<p>依次启动服务器端的 frp，树莓派视频采集，树莓派端 frp。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br><span class="line"></span><br><span class="line">./mjpg_streamer -o "output_http.so -w ./www" -i "input_raspicam.so"</span><br><span class="line"></span><br><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure>

<p>然后打开浏览器访问：<a href="http://xxx.xxx.xxx.xxx:9000/stream.html" target="_blank" rel="noopener">http://xxx.xxx.xxx.xxx:9000/stream.html</a> ，不知道是不是因为 VPS 在国外的原因，延迟有3 s 这样子。。</p>
<p>注意：<strong>树莓派只能运行 arm 架构的 frp（<a href="http://diannaobos.iok.la:81/frp/frp-v0.20.0/frp_0.20.0_linux_arm.tar.gz" target="_blank" rel="noopener">树莓派frp</a>）</strong>。</p>
<hr>
<p>参考：</p>
<p><a href="https://blog.csdn.net/weixin_40535588/article/details/89296894" target="_blank" rel="noopener">基于树莓派+mjpg+frp+阿里云服务器的远程监控</a></p>
<p><a href="https://www.jianshu.com/p/069c61315e8a" target="_blank" rel="noopener">树莓派上MJPG-streamer安装手顺</a></p>
]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>给树莓派安装Ubuntu MATE系统</title>
    <url>/2019/06/11/%E7%BB%99%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Ubuntu-MATE%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>给树莓派安装Ubantu MATE操作系统</p>
<p>由于平时用的是Ubuntu系统，对这个系统比较熟悉，也想给树莓派也装这个系统，Linux下做SD卡启动盘网上资料比较少，担心发生对笔记本磁盘的误操作，最后在官网上找到了教程。</p>
<a id="more"></a>



<h3 id="下载系统"><a href="#下载系统" class="headerlink" title="下载系统"></a>下载系统</h3><p><a href="https://ubuntu-mate.org/raspberry-pi" target="_blank" rel="noopener"><a href="https://ubuntu-mate.org/raspberry-pi/" target="_blank" rel="noopener">Ubuntu MATE for the Raspberry Pi Model B 2, 3 and 3+</a></a></p>
<h3 id="安装工具并写入系统"><a href="#安装工具并写入系统" class="headerlink" title="安装工具并写入系统"></a>安装工具并写入系统</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gddrescue xz-utils</span><br><span class="line">unxz --verbose ubuntu-mate-18.04.2-beta1-desktop-armhf+raspi-ext4.img.xz</span><br><span class="line">sudo ddrescue -D --force ubuntu-mate-18.04.2-beta1-desktop-armhf+raspi-ext4.img /dev/sdx</span><br></pre></td></tr></table></figure>

<p><code>/dev/sda</code>代表笔记本的磁盘，SD卡的盘符一般<code>/dev/sdb1</code>。</p>
<p><img src="https://image.youyou-2608.com/blog/finished.png" alt="安装Ubuntu MATE"></p>
<h3 id="显示屏无反应"><a href="#显示屏无反应" class="headerlink" title="显示屏无反应"></a>显示屏无反应</h3><p>网上说可能是 config.txt 设置问题，和显示器的分辨率之类的有关，但是写入了镜像之后再将SD卡插入到PC，已经无法挂载，报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount /dev/sdb1 /mnt/sdb1</span><br><span class="line">mount: /mnt/sdb1: wrong fs type, bad option, bad superblock on /dev/sdb1, missing codepage or helper program, or other error.</span><br></pre></td></tr></table></figure>

<h3 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h3><p>进不去SD卡，挂载错误，说是文件类型错误。</p>
<p>安装工具：</p>
<p><code>sudo apt-get install nfs-common</code></p>
<p>仍然是无法读取。</p>
<p>先安装 <code>gnome-disk-utility</code> ，在终端执行 <code>./gnome-disk-utility</code> ，选择 <code>Restore Image...</code> ，写入镜像。</p>
<p><img src="https://image.youyou-2608.com/blog/finished.png" alt="Ubuntu MATE"></p>
<p>写完之后，退出SD卡。</p>
<p>将写入镜像的SD卡插入树莓派，连接显示器，接通电源，成功进入系统引导界面，清新的绿色界面。</p>
]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>再记Hexo博客恢复</title>
    <url>/2019/06/09/%E5%86%8D%E8%AE%B0Hexo%E5%8D%9A%E5%AE%A2%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<p>Hexo博客恢复</p>
<p>从官网下载 Nodejs <strong>二进制</strong> 文件（.tar.xz），解压到 /opt 目录下，添加连接：</p>
<p><code>sudo tar -xvf xxxx.tar.xz</code></p>
<p><code>sudo ln -s /opt/node-linux-x64xxxx/bin/node /usr/local/bin/node</code></p>
<p><code>sudo ln -s /opt/node..../bin/npm /usr/local/bin/npm</code></p>
<p>然后进入博客文件夹，执行</p>
<p><code>sudo npm install</code></p>
<p>即可完成恢复。</p>
<hr>
<p>折腾了半天一直各种报错，没想到这么简单。。</p>
]]></content>
      <categories>
        <category>博客维护</category>
      </categories>
      <tags>
        <tag>博客维护</tag>
      </tags>
  </entry>
  <entry>
    <title>我在JavaScript中踩过的坑</title>
    <url>/2019/05/19/%E6%88%91%E5%9C%A8JavaScript%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>我在Javascript中踩过的坑！</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>时至今日也没有系统深入的学习过JavaScript，虽然常用，但是也只停留在最基础的使用上。没有系统深入的了解，必然要踩一些前端众所周知，却让小白绞尽脑汁地大坑！</p>
<p>今天又在坑里摸了一天，记录一下，权当是写日记了。</p>
<p>最近连续加班，确实有些身心俱疲；加上昨天下午的“午后小睡”导致晚上失眠，到快四点钟才睡着，今天早上快十点钟还躺在床上。</p>
<a id="more"></a>



<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>正在逛Twitter，做毕设地学妹给我提了两个需求：</p>
<ul>
<li>登陆页面的表单检验；</li>
<li>注册页面的重复用户名检测。</li>
</ul>
<h2 id="问题：从Ajax中返回值"><a href="#问题：从Ajax中返回值" class="headerlink" title="问题：从Ajax中返回值"></a>问题：从Ajax中返回值</h2><p>用JQuery.validate插件给登陆表单加了校验，挺简单，同样的方法给注册界面加个校验，唯一不同的是需要使用ajax从后台请求到用户名是否已经存在，也挺简单。</p>
<p>于是乎，有了下面这段代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// do something</span></span><br><span class="line">$.validator.addMethod(<span class="string">"checkUniqueUsername"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value, element, params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || checkUniqueUsername(value);</span><br><span class="line">&#125;, <span class="string">"用户名已被占用！"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkUniqueUsername</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (username !== <span class="literal">null</span> &amp;&amp; username !== <span class="literal">undefined</span> &amp;&amp; username !== <span class="string">''</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> data = &#123;<span class="string">'loginname'</span>: username&#125;;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">'post'</span>,</span><br><span class="line">            url: <span class="string">'/checkloginname'</span>,</span><br><span class="line">            data: <span class="built_in">JSON</span>.stringify(data),</span><br><span class="line">            dataType: <span class="string">'json'</span>,</span><br><span class="line">            contentType: <span class="string">'application/json'</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="built_in">parseInt</span>(res.tip) === <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三五分钟，就写完了代码，跑一跑测一下准备验收了。诡异的事情出现了，<code>checkUniqueUsername()</code>总是返回false。</p>
<h2 id="Ajax中return的结果"><a href="#Ajax中return的结果" class="headerlink" title="Ajax中return的结果"></a>Ajax中return的结果</h2><p>没事，静下心来慢慢调，就这几行代码，怎么说也要给你调得明明白白的。调试后发现<code>parseInt(res.tip)===0</code>是true，可是return 之后函数的返回值是false，这没道理啊！</p>
<p>网上查了一下，原来是在<strong>ajax中直接return并不是return到外层函数中</strong>，不深究，改个写法，于是有了v2版本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// do something</span></span><br><span class="line">$.validator.addMethod(<span class="string">"checkUniqueUsername"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value, element, params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || checkUniqueUsername(value);</span><br><span class="line">&#125;, <span class="string">"用户名已被占用！"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkUniqueUsername</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (username !== <span class="literal">null</span> &amp;&amp; username !== <span class="literal">undefined</span> &amp;&amp; username !== <span class="string">''</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> data = &#123;<span class="string">'loginname'</span>: username&#125;;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">'post'</span>,</span><br><span class="line">            url: <span class="string">'/checkloginname'</span>,</span><br><span class="line">            data: <span class="built_in">JSON</span>.stringify(data),</span><br><span class="line">            dataType: <span class="string">'json'</span>,</span><br><span class="line">            contentType: <span class="string">'application/json'</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                result = (<span class="built_in">parseInt</span>(res.tip) === <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>检查了一下，再也想不出还能有什么问题了，那就跑一下吧。诡异的结果又出现了，函数返回值依旧是false，心态崩了，这就好比 <code>var count = 1; console.log(count);</code>却输出了2一样，难以置信！</p>
<h2 id="Ajax同步和异步"><a href="#Ajax同步和异步" class="headerlink" title="Ajax同步和异步"></a>Ajax同步和异步</h2><p>查了半天，终于看到一个答案：<strong>ajax的同步和异步。</strong>可谓是一语惊醒梦中人，我责备自己为什么调试了这么久，却没有想到这个方向，而且同步异步的坑已经不是第一次踩了。v3版本终于解决了这个问题，失之毫厘，差之千里。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// do something</span></span><br><span class="line">$.validator.addMethod(<span class="string">"checkUniqueUsername"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value, element, params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || checkUniqueUsername(value);</span><br><span class="line">&#125;, <span class="string">"用户名已被占用！"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkUniqueUsername</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (username !== <span class="literal">null</span> &amp;&amp; username !== <span class="literal">undefined</span> &amp;&amp; username !== <span class="string">''</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> data = &#123;<span class="string">'loginname'</span>: username&#125;;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">'post'</span>,</span><br><span class="line">            url: <span class="string">'/checkloginname'</span>,</span><br><span class="line">            data: <span class="built_in">JSON</span>.stringify(data),</span><br><span class="line">            dataType: <span class="string">'json'</span>,</span><br><span class="line">            contentType: <span class="string">'application/json'</span>,</span><br><span class="line">            <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                result = (<span class="built_in">parseInt</span>(res.tip) === <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是每次运行控制台都会出现JQuery的提示：<strong>使用同步会降低用户体验</strong>，总归是有个解决办法，有时间再深究一下吧。</p>
<h2 id="JavaScript浮点运算"><a href="#JavaScript浮点运算" class="headerlink" title="JavaScript浮点运算"></a>JavaScript浮点运算</h2><p>今天的经历让我回想起了去年遇到的一个JavaScript的问题，当时在做一个现金流管理系统，遇到一个需求是根据固定利息和浮动利息自动计算出最终利息，随便输了几组数据测试，没有出现异样，但是最后一组数据的时候出现了诡异的结果！<code>4.1 + 4.3 = 8.399999999999999</code>，这真是见了鬼了。。很久之前学过的知识这分钟哪里回想得起来。上网查了才发现原来是JavaScript的设计缺陷导致的问题，也都提出了几种解决方案。</p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>平时用Java习惯了，思维方式有些不灵活，从对Python的理解中也能看出来。</p>
<p>总之，遇到问题，要发散思维，尽量快速的去确定调查的方向，最终尽快的解决问题。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Java注解简单例子</title>
    <url>/2019/05/15/Java%E6%B3%A8%E8%A7%A3%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90/</url>
    <content><![CDATA[<p>了解Java注解（@Annotation）</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>为什么突然想起来注解呢？今天上午同事遇到一个和注解相关的问题，JSP页面传值到后台后（其实前后端并不分离），但是在POJO类上的校验注解值不满足的条件下也通过了，让我给帮忙看看。因为其他组的同事相同的通用代码并没有这个问题，而且对注解的处理是封装在框架中的，所以一开始便排除了问题在后台思路，转向页面传值去调查。虽然最后找到原因是因为没有清空Eclipse的.class文件重新编译，但是感觉已经对之前学过的注解部分的知识生疏了。刚好今天没加班，就赶紧复习一下。</p>
</blockquote>
<p>本想在网上找两篇文章回忆一下，但是好像例子写得都不完整。刚好前段时间刚买了一本《Java编程思想》，就赶紧翻开看了一下，一直记得书里给出的例子也是数据库字段注解相关的。</p>
<a id="more"></a>



<h2 id="相关概念及原理"><a href="#相关概念及原理" class="headerlink" title="相关概念及原理"></a>相关概念及原理</h2><p>参见 ==&gt; 《Java编程思想》第二十章&lt;注解&gt;。</p>
<p>四个元注解：</p>
<ul>
<li>@Target</li>
<li>@Retention</li>
<li>@Document</li>
<li>Inherited</li>
</ul>
<p>注解主要是用户按自己的需求来实现。</p>
<h2 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h2><p>先创建两个注解，@Digits和@NotEmpty，用来注解属性是否满足给定条件。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 标注一个字段只能为数字，且最大长度为maxLength，最大小数位为fraction</span></span><br><span class="line"><span class="comment"> * 默认没有小数位</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-05-14 21:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Digits &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxLength</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fraction</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 标注一个字段不能为空</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-05-14 21:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NotEmpty &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义一个处理类处理自定义注解：（主要利用反射机制）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 处理自定义注解</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-05-14 21:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationProcesser</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Table table)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, NoSuchFieldException </span>&#123;</span><br><span class="line">        Class clazz = table.getClass();</span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(<span class="string">"class not found!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        String fieldName;</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Annotation[] annotations = field.getDeclaredAnnotations();</span><br><span class="line">            fieldName = field.getName();</span><br><span class="line">            System.out.println(<span class="string">"--&gt; info: into "</span> + fieldName);</span><br><span class="line">            <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">                System.out.println(<span class="string">"--&gt; info: "</span> + annotation.annotationType());</span><br><span class="line">                <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> Digits) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"--&gt; info: get @Digits annotation on "</span> + fieldName);</span><br><span class="line">                    <span class="keyword">int</span> maxLength = ((Digits) annotation).maxLength();</span><br><span class="line">                    <span class="keyword">int</span> annotatedFraction = ((Digits) annotation).fraction();</span><br><span class="line">                    String[] fraction = String.valueOf(table.getCount()).split(<span class="string">"\\."</span>);</span><br><span class="line">                    <span class="keyword">if</span> (String.valueOf(table.getCount()).length() &gt; maxLength) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"--&gt; error: maxLength exceed!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (fraction.length &gt; <span class="number">1</span> &amp;&amp; fraction[<span class="number">1</span>].length() &gt; annotatedFraction) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"--&gt; error：fraction length exceed!"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"--&gt; info: "</span> + fieldName + <span class="string">" validate success!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> NotEmpty) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"--&gt; info: get @NotEmpty annotation on "</span> + fieldName);</span><br><span class="line">                    <span class="keyword">if</span> (table.getDescription() == <span class="keyword">null</span> || <span class="string">""</span>.equals(table.getDescription())) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"--&gt; error: empty is not allowed!"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"--&gt; info: "</span> + fieldName + <span class="string">" validate success!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主测试类：（<strong>省略getter和setter</strong>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Annotation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 自定义注解测试类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-05-14 21:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Table</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Digits</span>(maxLength = <span class="number">6</span>, fraction = <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Table</span><span class="params">(<span class="keyword">double</span> count, String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, ClassNotFoundException, NoSuchFieldException </span>&#123;</span><br><span class="line">        Table testTable1 = <span class="keyword">new</span> Table(<span class="number">1234567</span>, <span class="string">"description1"</span>);</span><br><span class="line">        Table testTable2 = <span class="keyword">new</span> Table(<span class="number">12.001</span>, <span class="string">"description2"</span>);</span><br><span class="line">        Table testTable3 = <span class="keyword">new</span> Table(<span class="number">123.01</span>, <span class="string">"description3"</span>);</span><br><span class="line">        Table testTable4 = <span class="keyword">new</span> Table(<span class="number">123.01</span>, <span class="keyword">null</span>);</span><br><span class="line">        Table testTable5 = <span class="keyword">new</span> Table(<span class="number">123.01</span>, <span class="string">"description5"</span>);</span><br><span class="line"></span><br><span class="line">        AnnotationProcesser processer = <span class="keyword">new</span> AnnotationProcesser();</span><br><span class="line">        processer.process(testTable1);</span><br><span class="line">        processer.process(testTable2);</span><br><span class="line">        processer.process(testTable3);</span><br><span class="line">        processer.process(testTable4);</span><br><span class="line">        processer.process(testTable5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax返回error可能原因分析</title>
    <url>/2019/05/12/ajax%E8%BF%94%E5%9B%9Eerror%E5%8F%AF%E8%83%BD%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>ajax总是进入error的可能原因</p>
<p>后台返回：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">Successfully completed request</span><br></pre></td></tr></table></figure>

<p>前端ajax总是执行error部分的代码。</p>
<p>原因：</p>
<p>后台只返回了 “success” 字符串，不是规范的json格式，所以没有执行预期逻辑。</p>
<p>最好在后台返回 <strong>严格规范</strong> 的json防止此类错误。</p>
]]></content>
      <categories>
        <category>ajax</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot中使用Swagger2构建强大的RESTful API文档</title>
    <url>/2019/04/29/Spring-Boot%E4%B8%AD%E4%BD%BF%E7%94%A8Swagger2%E6%9E%84%E5%BB%BA%E5%BC%BA%E5%A4%A7%E7%9A%84RESTful-API%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<p>Spring Boot中使用Swagger2构建强大的RESTful API文档</p>
<p>由于Spring Boot能够快速开发、便捷部署等特性，相信有很大一部分Spring Boot的用户会用来构建RESTful API。而我们构建RESTful API的目的通常都是由于多终端的原因，这些终端会共用很多底层业务逻辑，因此我们会抽象出这样一层来同时服务于多个移动端或者Web前端。</p>
<a id="more"></a>

<p>这样一来，我们的RESTful API就有可能要面对多个开发人员或多个开发团队：IOS开发、Android开发或是Web开发等。为了减少与其他团队平时开发期间的频繁沟通成本，传统做法我们会创建一份RESTful API文档来记录所有接口细节，然而这样的做法有以下几个问题：</p>
<ul>
<li>由于接口众多，并且细节复杂（需要考虑不同的HTTP请求类型、HTTP头部信息、HTTP请求内容等），高质量地创建这份文档本身就是件非常吃力的事，下游的抱怨声不绝于耳。</li>
<li>随着时间推移，不断修改接口实现的时候都必须同步修改接口文档，而文档与代码又处于两个不同的媒介，除非有严格的管理机制，不然很容易导致不一致现象。</li>
</ul>
<p>为了解决上面这样的问题，本文将介绍RESTful API的重磅好伙伴Swagger2，它可以轻松的整合到Spring Boot中，并与Spring MVC程序配合组织出强大RESTful API文档。它既可以减少我们创建文档的工作量，同时说明内容又整合入实现代码中，让维护文档和修改代码整合为一体，可以让我们在修改代码逻辑的同时方便的修改文档说明。另外Swagger2也提供了强大的页面测试功能来调试每个RESTful API。具体效果如下图所示：</p>
<p><img src="http://blog.didispace.com/content/images/2016/04/swagger2_1.png" alt></p>
<p><img src="http://blog.didispace.com/content/images/2016/04/swagger2_1.png" alt></p>
<p>下面来具体介绍，如果在Spring Boot中使用Swagger2。首先，我们需要一个Spring Boot实现的RESTful API工程，若您没有做过这类内容，建议先阅读<br><a href="http://blog.didispace.com/springbootrestfulapi/" target="_blank" rel="noopener">Spring Boot构建一个较为复杂的RESTful APIs和单元测试</a>。</p>
<p>下面的内容我们会以<a href="http://git.oschina.net/didispace/SpringBoot-Learning" target="_blank" rel="noopener">教程样例</a>中的Chapter3-1-1进行下面的实验（Chpater3-1-5是我们的结果工程，亦可参考）。</p>
<h4 id="添加Swagger2依赖"><a href="#添加Swagger2依赖" class="headerlink" title="添加Swagger2依赖"></a>添加Swagger2依赖</h4><p>在<code>pom.xml</code>中加入Swagger2的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="创建Swagger2配置类"><a href="#创建Swagger2配置类" class="headerlink" title="创建Swagger2配置类"></a>创建Swagger2配置类</h4><p>在<code>Application.java</code>同级创建Swagger2的配置类<code>Swagger2</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.didispace.web"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"Spring Boot中使用Swagger2构建RESTful APIs"</span>)</span><br><span class="line">                .description(<span class="string">"更多Spring Boot相关文章请关注：http://blog.didispace.com/"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"http://blog.didispace.com/"</span>)</span><br><span class="line">                .contact(<span class="string">"程序猿DD"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上代码所示，通过<code>@Configuration</code>注解，让Spring来加载该类配置。再通过<code>@EnableSwagger2</code>注解来启用Swagger2。</p>
<p>再通过<code>createRestApi</code>函数创建<code>Docket</code>的Bean之后，<code>apiInfo()</code>用来创建该Api的基本信息（这些基本信息会展现在文档页面中）。<code>select()</code>函数返回一个<code>ApiSelectorBuilder</code>实例用来控制哪些接口暴露给Swagger来展现，本例采用指定扫描的包路径来定义，Swagger会扫描该包下所有Controller定义的API，并产生文档内容（除了被<code>@ApiIgnore</code>指定的请求）。</p>
<h4 id="添加文档内容"><a href="#添加文档内容" class="headerlink" title="添加文档内容"></a>添加文档内容</h4><p>在完成了上述配置后，其实已经可以生产文档内容，但是这样的文档主要针对请求本身，而描述主要来源于函数等命名产生，对用户并不友好，我们通常需要自己增加一些说明来丰富文档内容。如下所示，我们通过<code>@ApiOperation</code>注解来给API增加说明、通过<code>@ApiImplicitParams</code>、<code>@ApiImplicitParam</code>注解来给参数增加说明。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/users"</span>)     <span class="comment">// 通过这里配置使下面的映射都在/users下，可去除</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Map&lt;Long, User&gt; users = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;Long, User&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户列表"</span>, notes=<span class="string">""</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">""</span>&#125;, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; r = <span class="keyword">new</span> ArrayList&lt;User&gt;(users.values());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"创建用户"</span>, notes=<span class="string">"根据User对象创建用户"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">""</span>, method=RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        users.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户详细信息"</span>, notes=<span class="string">"根据url的id来获取用户详细信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"更新用户详细信息"</span>, notes=<span class="string">"根据url的id来指定更新对象，并根据传过来的user信息来更新用户详细信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">(@PathVariable Long id, @RequestBody User user)</span> </span>&#123;</span><br><span class="line">        User u = users.get(id);</span><br><span class="line">        u.setName(user.getName());</span><br><span class="line">        u.setAge(user.getAge());</span><br><span class="line">        users.put(id, u);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"删除用户"</span>, notes=<span class="string">"根据url的id来指定删除对象"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        users.remove(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完成上述代码添加上，启动Spring Boot程序，访问：<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a><br>。就能看到前文所展示的RESTful API的页面。我们可以再点开具体的API请求，以POST类型的/users请求为例，可找到上述代码中我们配置的Notes信息以及参数user的描述信息，如下图所示。</p>
<p>[<img src="http://blog.didispace.com/content/images/2016/04/swagger2_2.png" alt="alt"><img src="http://blog.didispace.com/content/images/2016/04/swagger2_2.png" alt></p>
<h4 id="API文档访问与调试"><a href="#API文档访问与调试" class="headerlink" title="API文档访问与调试"></a>API文档访问与调试</h4><p>在上图请求的页面中，我们看到user的Value是个输入框？是的，Swagger除了查看接口功能外，还提供了调试测试功能，我们可以点击上图中右侧的Model Schema（黄色区域：它指明了User的数据结构），此时Value中就有了user对象的模板，我们只需要稍适修改，点击下方<code>“Try it out！”</code>按钮，即可完成了一次请求调用！</p>
<p>此时，你也可以通过几个GET请求来验证之前的POST请求是否正确。</p>
<p>相比为这些接口编写文档的工作，我们增加的配置内容是非常少而且精简的，对于原有代码的侵入也在忍受范围之内。因此，在构建RESTful API的同时，加入swagger来对API文档进行管理，是个不错的选择。</p>
<h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p>本文的相关例子可以查看下面仓库中的<code>chapter3-1-5</code>目录：</p>
<ul>
<li>Github：<a href="https://github.com/dyc87112/SpringBoot-Learning/tree/1.x" target="_blank" rel="noopener">https://github.com/dyc87112/SpringBoot-Learning</a></li>
<li>Gitee：<a href="https://gitee.com/didispace/SpringBoot-Learning/tree/1.x" target="_blank" rel="noopener">https://gitee.com/didispace/SpringBoot-Learning</a></li>
</ul>
<p><strong>如果您觉得本文不错，欢迎Star支持，您的关注是我坚持的动力！</strong></p>
<h4 id="参考信息"><a href="#参考信息" class="headerlink" title="参考信息"></a>参考信息</h4><ul>
<li><a href="http://swagger.io/" target="_blank" rel="noopener">Swagger官方网站</a></li>
</ul>
<p>无作者本人授权请勿转载。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次Tomcat 8005端口Cannot assign requested address的经历</title>
    <url>/2019/04/24/%E8%AE%B0%E4%B8%80%E6%AC%A1Tomcat-8005%E7%AB%AF%E5%8F%A3Cannot-assign-requested-address%E7%9A%84%E7%BB%8F%E5%8E%86/</url>
    <content><![CDATA[<p>记一次Tomcat 8005端口Cannot assign requested address : Jvm Bind的经历</p>
<p>一个正在做毕设的老乡遇到的问题：Tomcat启动的时候，报了[8005] Jvm Bind相关的异常，大概内容是端口已被占用的意思。</p>
<p>一. 先从运行/bin/shutdown.bat，再次关闭Tomcat，重新启动问题依然存在；</p>
<p>二. netstat -ano查看端口使用情况，未发现8080,8009,8005相关的端口被占用；</p>
<p>三. 打开任务管理器，确认javaw.exe未在运行，问题依然存在；</p>
<p>四. 重启机器，问题依然存在；</p>
<p>五. 参照：[<a href="https://www.cnblogs.com/heshan664754022/p/3807672.html" target="_blank" rel="noopener">Tomcat启动报错:严重: StandardServer.await: create[8005] java.net.BindException: Cannot assign requested address</a>](<a href="https://www.cnblogs.com/heshan664754022/p/3807672.html" target="_blank" rel="noopener">https://www.cnblogs.com/heshan664754022/p/3807672.html</a>) ， ping了localhost，发现收到的响应来自ipp[47.89.54.215]，打开C:/windows/system32/drivers/etc/hosts，发现以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">47.89.54.215       localhost</span><br><span class="line">47.89.54.215	hao.360.cn</span><br><span class="line">47.89.54.215	www.hao123.com</span><br><span class="line">47.89.54.215	www.3600.com</span><br><span class="line">47.89.54.215	www.114la.com</span><br><span class="line">47.89.54.215	www.duba.com</span><br><span class="line">47.89.54.215	www.hao360.cn</span><br><span class="line">47.89.54.215	123.sogou.com</span><br><span class="line">47.89.54.215	web.sogou.com</span><br><span class="line">47.89.54.215	www.hao123.cn</span><br><span class="line">47.89.54.215	hao.qq.com</span><br><span class="line">47.89.54.215	www.1616.net</span><br><span class="line">47.89.54.215	hao.rising.cn</span><br><span class="line">47.89.54.215	daohang.qq.com</span><br></pre></td></tr></table></figure>

<p>看到daohang.qq，hao123，duba，hao360，123.sougou之类的字眼，国内流氓软件那么多？”的问题又浮现在脑海。</p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA Terminal闪退</title>
    <url>/2019/04/09/IDEA-Terminal%E9%97%AA%E9%80%80/</url>
    <content><![CDATA[<p>IDEA Terminal闪退</p>
<ol>
<li>查看help &gt; Show Log in File，查看日志；</li>
</ol>
<ol>
<li>查看File &gt; Settings &gt; Terminal &gt; shell path，=&gt; /bin/bash，重启终端。</li>
</ol>
<p> <a href="https://youtrack.jetbrains.com/issue/IDEA-202821" target="_blank" rel="noopener">Black Terminal or Terminal doesnot work</a> </p>
]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Git配置代理</title>
    <url>/2019/04/06/Git%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>git的代理配置</p>
<p>给sublime安装插件的时候又碰到git clone速度过慢的问题，记录一哈！</p>
<a id="more"></a>



<ol>
<li><p>打开ss全局代理；</p>
</li>
<li><p>到 <a href="https://www.ipaddress.com/" target="_blank" rel="noopener">IPAddress.com</a> 根据 github.global.ssl.fastly.net 获取github服务器地址；</p>
</li>
<li><p>在 /etc/hosts 或者C:/windows/system32/driver/etc/hosts 文件中添加对应的记录：</p>
<p>ip github.global.ssl.fastly.net</p>
</li>
<li><p>设置git代理：</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> http和https协议代理：</span><br><span class="line">git config --global http.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> sock5的情况</span><br><span class="line">git config --global http.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 取消代理</span><br><span class="line">git config --global unset http.proxy</span><br><span class="line">git config --global unset https.proxy</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> ssh协议代理：在用户目录下建立如下文件 ~/.ssh/config，对 GitHub 的域名做单独的处理</span><br><span class="line"><span class="meta">#</span> 这里必须是 github.com，因为这个跟我们 clone 代码时的链接有关</span><br><span class="line">Host github.com</span><br><span class="line"><span class="meta">   #</span> 如果用默认端口，这里是 github.com，如果想用443端口，这里就是 ssh.github.com 详见 https://help.github.com/articles/using-ssh-over-the-https-port/</span><br><span class="line">   HostName github.com</span><br><span class="line">   User git</span><br><span class="line"><span class="meta">   #</span> 如果是 HTTP 代理，把下面这行取消注释，并把 proxyport 改成自己的 http 代理的端口</span><br><span class="line">     ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=6667</span><br><span class="line"><span class="meta">   #</span> 如果是 socks5 代理，则把下面这行取消注释，并把 6666 改成自己 socks5 代理的端口</span><br><span class="line">     ProxyCommand nc -v -x 127.0.0.1:6666 %h %p</span><br></pre></td></tr></table></figure>



<p>==&gt;&gt; <a href="https://imciel.com/2016/06/28/git-proxy/" target="_blank" rel="noopener">设置 git 代理</a> </p>
<p>在Ubuntu下需要在网络设置里打开网络代理设置代理主机：socks5://127.0.0.1:1080</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>在新机器中恢复Hexo博客</title>
    <url>/2019/03/03/%E5%9C%A8%E6%96%B0%E6%9C%BA%E5%99%A8%E4%B8%AD%E6%81%A2%E5%A4%8DHexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="在新机器上恢复Hexo博客"><a href="#在新机器上恢复Hexo博客" class="headerlink" title="在新机器上恢复Hexo博客"></a>在新机器上恢复Hexo博客</h2><h3 id="准备源文件"><a href="#准备源文件" class="headerlink" title="准备源文件"></a>准备源文件</h3><p>可以备份到github或者coding，或者使用云盘同步（例如坚果云）。</p>
<a id="more"></a>



<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装npm</span></span></span><br><span class="line">sudo apt install npm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装hexo</span></span></span><br><span class="line">sudo apt install -g hexo-cli</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#克隆源文件</span></span></span><br><span class="line">git clone user@github.com/repo/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#在仓库中添加SSH key</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装部署插件</span></span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#RSS订阅插件</span></span></span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#站点地图插件</span></span></span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装本地服务器</span></span></span><br><span class="line">npm install hexo-server --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#生成index.html插件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-generator-archive --save</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#搜索功能插件</span></span></span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#预览</span></span></span><br><span class="line">hexo s</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<h3 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h3><p>遇到一个问题：生成后访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 出现白版和”Cannot GET /“，”/“是因为在public 目录下少了index.html文件，再次生成还是无效后，确认是少了组件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-index</span><br></pre></td></tr></table></figure>

<p>参见：<a href="https://www.jianshu.com/p/af83fc73e525" target="_blank" rel="noopener">【完美解决】Hexo博客出现“Cannot GET/xxx”错误</a></p>
<p>吐槽一下coding和腾讯云之间的账号互通问题，一阵瞎引导，竟然创建了一个新账号，以前的项目找不回来，两个网站之间来回绕了几遍，无意间又用邮箱登录上去了，之前都是能自动跳转登录的，现在还和CSDN一样开始恰烂钱，强制绑定微信和手机号，无语。</p>
]]></content>
      <categories>
        <category>博客维护</category>
      </categories>
      <tags>
        <tag>博客维护</tag>
      </tags>
  </entry>
  <entry>
    <title>Java编程思想——第十四章——类型信息</title>
    <url>/2019/02/01/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E2%80%94%E2%80%94%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h1 id="第十四章-类型信息"><a href="#第十四章-类型信息" class="headerlink" title="第十四章 类型信息"></a>第十四章 类型信息</h1><hr>
<blockquote>
<p>运行时类型信息可以使得你可以在程序运行时发现和使用类型信息。</p>
</blockquote>
<p>本章主要讨论Java如何让我们在运行时识别对象和类的信息，主要有两种方式：</p>
<ol>
<li>“传统的RTTI”，假定我们在编译时已经知道了所有的类型；</li>
<li>“反射机制”，允许在运行时发现和使用类的信息。</li>
</ol>
<a id="more"></a>




<h2 id="14-1-为什么需要RTTI-Run-Time-Type-Identification"><a href="#14-1-为什么需要RTTI-Run-Time-Type-Identification" class="headerlink" title="14.1 为什么需要RTTI(Run-Time Type Identification)"></a>14.1 为什么需要RTTI(Run-Time Type Identification)</h2><p>RTTI提供类型维护的信息，为多态机制提供实现基础。多态的实现主要是通过向上转型，通过泛化父类来引用子类对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-06 14:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shapes</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Shape&gt; shapeList = Arrays.asList(<span class="keyword">new</span> Circle(), <span class="keyword">new</span> Square(), <span class="keyword">new</span> Triangle());</span><br><span class="line">        shapeList.forEach(Shape::draw);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span> + <span class="string">".draw."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Circle"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Triangle"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Square"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Circle.draw.</span><br><span class="line">Square.draw.</span><br><span class="line">Triangle.draw.</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="14-2-Class对象"><a href="#14-2-Class对象" class="headerlink" title="14.2 Class对象"></a>14.2 Class对象</h2><p>RTTI的功能主要是由Class类实现的，每个类都是Class类的一个对象。所有的类都是在第一次使用时被”类加载器”动态的加载到JVM中的，当程序创建第一个类的成员引用时，便会加载这个类，这说明构造器是类的静态方法。使用new创建的类的新对象也会被当作类的静态成员，因此Java是动态加载的。首先检查类的Class对象是否加载，如果尚未加载，默认的类的加载器会查找同名的.class文件,一旦某个类的Class对象被载入内存，便会用来创建这个类的所有对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-07 17:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SweetShop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"inside main."</span>);</span><br><span class="line">        <span class="keyword">new</span> Candy();</span><br><span class="line">        System.out.println(<span class="string">"after create candy"</span>);</span><br><span class="line">        <span class="keyword">new</span> Candy();</span><br><span class="line">        System.out.println(<span class="string">"after create candy2"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Class.forName(<span class="string">"com.typeinfo.Gum"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Class Gum not found."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"after create after gum."</span>);</span><br><span class="line">        <span class="keyword">new</span> Cookie();</span><br><span class="line">        System.out.println(<span class="string">"after create cookie"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Candy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Loading candy."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gum</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Loading gum."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cookie</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Loading cookie."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">inside main.</span><br><span class="line">Loading candy.</span><br><span class="line">after create candy</span><br><span class="line">after create candy2</span><br><span class="line">Loading gum.</span><br><span class="line">after create after gum.</span><br><span class="line">Loading cookie.</span><br><span class="line">after create cookie</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>从输出中可以看出，Java中的类都是在需要时才被加载的。forName()是Class类的一个静态成员，调用该方法可以返回相应类的实例。<br>无论何时，若要使用类型信息，必须持有Class对象的引用，Class.forName()是实现此功能的便捷方式，因为不需要再为了获取Class引用而持有该类型的引用。如果已经拥有一个类型的对象，可以使用getClass()来获取Class引用，返回表示该对象的实际类型的Class引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-07 18:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(Class cc)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Class name: "</span> + cc.getName() + <span class="string">" is interface? ["</span> + cc.isInterface() + <span class="string">"]"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Simple name: "</span> + cc.getSimpleName());</span><br><span class="line">        System.out.println(<span class="string">"Canonical name: "</span> + cc.getCanonicalName());</span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class c = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = Class.forName(<span class="string">"com.typeinfo.FancyToy"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"class not found."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">assert</span> c != <span class="keyword">null</span>;</span><br><span class="line">        printInfo(c);</span><br><span class="line">        <span class="keyword">for</span> (Class face : c.getInterfaces()) &#123;</span><br><span class="line">            printInfo(face);</span><br><span class="line">        &#125;</span><br><span class="line">        Class up = c.getSuperclass();</span><br><span class="line">        Object object = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            object = up.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"获取实例失败."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"无法访问."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">assert</span> object != <span class="keyword">null</span>;</span><br><span class="line">        printInfo(object.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">HasBatteries</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">WaterProof</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shoots</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toy</span> </span>&#123;</span><br><span class="line">    Toy() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Toy(<span class="keyword">int</span> i) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FancyToy</span> <span class="keyword">extends</span> <span class="title">Toy</span> <span class="keyword">implements</span> <span class="title">HasBatteries</span>, <span class="title">WaterProof</span>, <span class="title">Shoots</span> </span>&#123;</span><br><span class="line">    FancyToy() &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class name: com.typeinfo.FancyToy is interface? [false]</span><br><span class="line">Simple name: FancyToy</span><br><span class="line">Canonical name: com.typeinfo.FancyToy</span><br><span class="line">---------------</span><br><span class="line">Class name: com.typeinfo.HasBatteries is interface? [true]</span><br><span class="line">Simple name: HasBatteries</span><br><span class="line">Canonical name: com.typeinfo.HasBatteries</span><br><span class="line">---------------</span><br><span class="line">Class name: com.typeinfo.WaterProof is interface? [true]</span><br><span class="line">Simple name: WaterProof</span><br><span class="line">Canonical name: com.typeinfo.WaterProof</span><br><span class="line">---------------</span><br><span class="line">Class name: com.typeinfo.Shoots is interface? [true]</span><br><span class="line">Simple name: Shoots</span><br><span class="line">Canonical name: com.typeinfo.Shoots</span><br><span class="line">---------------</span><br><span class="line">Class name: com.typeinfo.Toy is interface? [false]</span><br><span class="line">Simple name: Toy</span><br><span class="line">Canonical name: com.typeinfo.Toy</span><br><span class="line">---------------</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>在给forName()方法传递类名是必须使用全限定名。<br>Class类常用方法列表：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>getName()</td>
<td>获取全限定类名</td>
</tr>
<tr>
<td>getSimpleName()</td>
<td>获取不含包类名</td>
</tr>
<tr>
<td>getCanonicalName()</td>
<td>含包名的全限定名</td>
</tr>
<tr>
<td>getInterfaces()</td>
<td>Class对象所包含的接口</td>
</tr>
<tr>
<td>isInterface()</td>
<td>判断Class对象是否是接口</td>
</tr>
<tr>
<td>newInstance()</td>
<td>虚拟构造器(该类必须含有默认构造器)</td>
</tr>
<tr>
<td>getSuperClass()</td>
<td>间接获取Class对象基类</td>
</tr>
</tbody></table>
<h3 id="14-2-1-类字面常量"><a href="#14-2-1-类字面常量" class="headerlink" title="14.2.1 类字面常量"></a>14.2.1 类字面常量</h3><p>Java还提供了另一种方法来生成Class对象的引用，即使用类字面常量，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FancyToy<span class="class">.<span class="keyword">class</span></span>;</span><br></pre></td></tr></table></figure>

<p>这样做更加简单、安全，因为它在编译器就会受到检查，因此不需要异常检查，同时根除了对forNam()方法的调用，因此更加高效。<br>类字面常量方法不仅适用于普通的类，也适用于接口，基本数据类型，数组。对于基本包装类型的Class对象。还有一个标准字段TYPE，TYPE字段是一个引用，指向对应的基本类型Class对象。<br><strong>建议使用.class方法，与普通类保持一致</strong></p>
<table>
<thead>
<tr>
<th>字面常量</th>
<th>标准TYPE字段</th>
</tr>
</thead>
<tbody><tr>
<td>boolean.class</td>
<td>Boolean.class</td>
</tr>
<tr>
<td>char.class</td>
<td>Char.class</td>
</tr>
<tr>
<td>byte.class</td>
<td>Byte.class</td>
</tr>
<tr>
<td>short.class</td>
<td>Short.class</td>
</tr>
<tr>
<td>int.class</td>
<td>Integer.class</td>
</tr>
<tr>
<td>long.class</td>
<td>Long.class</td>
</tr>
<tr>
<td>float.class</td>
<td>Flocat.class</td>
</tr>
<tr>
<td>double.class</td>
<td>Double.class</td>
</tr>
<tr>
<td>void.class</td>
<td>Void.class</td>
</tr>
</tbody></table>
<p>当使用.class来创建Class对象引用时，不会自动初始化该Class对象，包含三个过程的准备：</p>
<ol>
<li><strong>加载</strong>：由类加载器执行，查找字节码，为字节码创建Class对象；</li>
<li><strong>链接</strong>：验证类中的字节码，为静态域分配空间，如果必须的话，将解析这个类创建的对其他类的所有引用；</li>
<li><strong>初始化</strong>：如果该类具有超类，则对其进行初始化，执行静态初始化和静态初始化块。初始化被延迟到对静态方法或者非静态数据域进行首次引用时执行。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-07 19:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassInitailization</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Class initable = Initable<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        System.out.println(<span class="string">"after create initable ref."</span>);</span><br><span class="line">        System.out.println(Initable.staticFinal);</span><br><span class="line">        System.out.println(Initable.staticFinal2);</span><br><span class="line">        System.out.println(Initable2.staticNonFinal);</span><br><span class="line">        Class initable3 = Class.forName(<span class="string">"com.typeinfo.Initable3"</span>);</span><br><span class="line">        System.out.println(<span class="string">"after create initable3."</span>);</span><br><span class="line">        System.out.println(Initable3.staticNonFinal);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Initable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> staticFinal = <span class="number">47</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> staticFinal2 = ClassInitailization.random.nextInt(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Initializing initable."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Initable2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> staticNonFinal = <span class="number">147</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"initializing initable2."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Initable3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> staticNonFinal = <span class="number">74</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"initializing initable3."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">after create initable ref.</span><br><span class="line"><span class="number">47</span></span><br><span class="line">Initializing initable.</span><br><span class="line"><span class="number">258</span></span><br><span class="line">initializing initable2.</span><br><span class="line"><span class="number">147</span></span><br><span class="line">initializing initable3.</span><br><span class="line">after create initable3.</span><br><span class="line"><span class="number">74</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>初始化有效的体现了”惰性”，从Initable的引用创建中知道<strong>使用.class创建Class引用不会引发初始化</strong>，但是为了产生引用，<strong>Class.forName()立即进行了初始化</strong>。<br><strong>如果一个static final值是编译期常量，那么这个值不需要对类进行初始化就可以进行读取。但是将一个域设置为static final不足以确保这种行为</strong>，如Initable.staticFinal2的访问强制类进行了初始化。<br>如果一个常量是static但不是final的，那么在对它进行访问时，总是要求在对它进行读取前，先进行链接(分配存储空间)和初始化(初始化该域磁盘)。</p>
<h3 id="14-2-2-泛化的Class引用"><a href="#14-2-2-泛化的Class引用" class="headerlink" title="14.2.2 泛化的Class引用"></a>14.2.2 泛化的Class引用</h3><p>Class引用所表示的就是它所指向的类的确切类型，可以制造类的实例，包含类的静态成员和方法代码。<br>在Java SE5中Class引用的类型变得更加具体，这是通过允许你Class引用所指向的Class对象引用类型进行限定实现的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-07 19:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClassReference</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class intClass = <span class="keyword">int</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Class&lt;Integer&gt; genericIntClass = <span class="keyword">int</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        genericIntClass = Integer<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        intClass = <span class="keyword">double</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        <span class="comment">//genericIntClass = double.class;  //编译错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>普通的类引用不会产生警告，尽管泛型类引用只能指向其声明的类型，但是普通的类引用可以被重新赋值为其他任何类型的引用，因此通过使用泛型，可以强制编译器进行类型检查。</strong></p>
<p>如果希望稍微放宽这种限制，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Number&gt; c = <span class="keyword">int</span><span class="class">.<span class="keyword">class</span></span>;</span><br></pre></td></tr></table></figure>

<p>上述代码产生了编译错误，因为Integer Class对象不是Number Class的子类。<br>为了能够在使用泛化的Class引用时放宽限制，可以使用泛型通配符。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-07 19:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WildcardClassReference</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class&lt;? extends Number&gt; c = <span class="keyword">int</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        c = <span class="keyword">double</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码没有产生任何警告信息。Class<?>优于普通的Class，并且两者等价。
**Class<?>的好处是它表示你并非碰巧或者处于疏忽而使用了一个非具体的类型。<strong>为了创建一个Class引用，它被限定为某种类型，和extends结合，可以创建一个范围。<br>**使用泛型可以促使编译器在编译器提供类型检查。</strong></p>
<p>将泛型用于Class对象，newInstance()方法返回的将是具体的类型而不是Object。但是这种具体类型有些许限制，由具体类型的Class引用getSuperClass()返回的类型是Object类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-07 20:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericToyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        Class&lt;FancyToy&gt; fancyToyClass = FancyToy<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        FancyToy fancyToy = fancyToyClass.newInstance();</span><br><span class="line">        Class&lt;? <span class="keyword">super</span> FancyToy&gt; c = fancyToyClass.getSuperclass();</span><br><span class="line"><span class="comment">//        Class&lt;Toy&gt; toyClass = fancyToyClass.getSuperclass();   编译错误</span></span><br><span class="line">        Object object = fancyToyClass.getSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="14-2-3-新的转型语法"><a href="#14-2-3-新的转型语法" class="headerlink" title="14.2.3 新的转型语法"></a>14.2.3 新的转型语法</h3><p>Java SE5还添加了用于Class引用转型的语法，即cast()方法。cast()方法接收参数对象，并将其转型为Class引用的类型。<br>在Java SE5中另一个最没用的新特性就是Class.asSubclass，该方法允许你将一个类对象转为更加具体的对象类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-07 20:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassCasts</span> </span>&#123;</span><br><span class="line">    Building building = <span class="keyword">new</span> House();</span><br><span class="line">    Class&lt;House&gt; houseClass = House<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    House house = houseClass.cast(building);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span> <span class="keyword">extends</span> <span class="title">Building</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="14-3-类型转换前先做检查"><a href="#14-3-类型转换前先做检查" class="headerlink" title="14.3 类型转换前先做检查"></a>14.3 类型转换前先做检查</h2><p>迄今为止，RTTI的形式包括：</p>
<ol>
<li>传统的类型转换；</li>
<li>代表对象的类型的Class对象；</li>
<li>关键字instanceof：判断一个对象是不是某个特定类型的实例。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(x instaceof Dog) &#123;</span><br><span class="line">    (Dog)x.bark();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>instanceof有比较严格的限制，只可将其与命名类型比较，而不能与Class对象比较。</p>
<h2 id="14-5-instanceof和Class的等价性"><a href="#14-5-instanceof和Class的等价性" class="headerlink" title="14.5 instanceof和Class的等价性"></a>14.5 instanceof和Class的等价性</h2><p>instanceof()和isInstance()方法生成的结果完全一样，equals和==也完全一样。但是<strong>instanceof保持了类型的概念，而==比较的是实际的Class对象，没有考虑继承。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-07 20:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FamilyVsExactType</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Testing object of type :"</span> + object.getClass());</span><br><span class="line">        System.out.println(<span class="string">"object instanceof Base: "</span> + (object <span class="keyword">instanceof</span> Base));</span><br><span class="line">        System.out.println(<span class="string">"object instanceof Derived :"</span> + (object <span class="keyword">instanceof</span> Derived));</span><br><span class="line">        System.out.println(<span class="string">"Base.isInstance(object): "</span> + Base<span class="class">.<span class="keyword">class</span>.<span class="title">isInstance</span>(<span class="title">object</span>))</span>;</span><br><span class="line">        System.out.println(<span class="string">"Derived.isInstance(object): "</span> + Derived<span class="class">.<span class="keyword">class</span>.<span class="title">isInstance</span>(<span class="title">object</span>))</span>;</span><br><span class="line">        System.out.println(<span class="string">"object.getClass() == Base.class(): "</span> + (object.getClass() == Base<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        System.out.println(<span class="string">"object.getClass() == Derived.class(): "</span> + (object.getClass() == Derived<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        System.out.println(<span class="string">"object.getClass().equals(Base.class()): "</span> + (object.getClass().equals(Base<span class="class">.<span class="keyword">class</span>)))</span>;</span><br><span class="line">        System.out.println(<span class="string">"object.getClass().equals(Derived.class()): "</span> + (object.getClass().equals(Derived<span class="class">.<span class="keyword">class</span>)))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test(<span class="keyword">new</span> Base());</span><br><span class="line">        test(<span class="keyword">new</span> Derived());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Testing object of type :<span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">typeinfo</span>.<span class="title">Base</span></span></span><br><span class="line">object instanceof Base: true</span><br><span class="line">object <span class="keyword">instanceof</span> Derived :<span class="keyword">false</span></span><br><span class="line">Base.isInstance(object): <span class="keyword">true</span></span><br><span class="line">Derived.isInstance(object): <span class="keyword">false</span></span><br><span class="line">object.getClass() == Base.class(): true</span><br><span class="line">object.getClass() == Derived.class(): false</span><br><span class="line">object.getClass().equals(Base.class()): true</span><br><span class="line">object.getClass().equals(Derived.class()): false</span><br><span class="line">Testing object of type :<span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">typeinfo</span>.<span class="title">Derived</span></span></span><br><span class="line">object instanceof Base: true</span><br><span class="line">object <span class="keyword">instanceof</span> Derived :<span class="keyword">true</span></span><br><span class="line">Base.isInstance(object): <span class="keyword">true</span></span><br><span class="line">Derived.isInstance(object): <span class="keyword">true</span></span><br><span class="line">object.getClass() == Base.class(): false</span><br><span class="line">object.getClass() == Derived.class(): true</span><br><span class="line">object.getClass().equals(Base.class()): false</span><br><span class="line">object.getClass().equals(Derived.class()): true</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="14-6-反射：运行时的类信息"><a href="#14-6-反射：运行时的类信息" class="headerlink" title="14.6 反射：运行时的类信息"></a>14.6 反射：运行时的类信息</h2><p>RTTI的限制：如果需要知道某个对象的确切类型，可以使用RTTI，但是有一个限制：这个类型在编译时必须是可知的。如果获取了持有一个不在程序空间内的对象的引用或者这个类在你的程序运行许久之后才出现，此时则无法使用RTTI。</p>
<p>为什么需要反射？</p>
<ol>
<li>解决RTTI的限制；</li>
<li>希望提供在跨网络的平台上创建和运行对象的能力，即<em>远程方法调用(RMI)</em>。</li>
</ol>
<p>Class类与Java.lang.Reflect类库对反射进行了支持，该类库包含Field、Method和Constructor等类。可以用invoke()调用与Method关联的方法，调用getField()、getMethods()和getConstructor()等方法返回表示字段、方法和构造方法的数组。</p>
<p><strong>RTTI与反射之间真正的区别在于对于RTTI来说，编译器在编译时打开和检查.class文件，而对于反射机制来说，.class文件在编译时是不可获取的，所以是在运行时打开和检查.class文件。</strong></p>
<h3 id="14-6-1-类方法提取器"><a href="#14-6-1-类方法提取器" class="headerlink" title="14.6.1 类方法提取器"></a>14.6.1 类方法提取器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-08 9:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowMethods</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String usage = <span class="string">"usage"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(usage);</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; c = Class.forName(args[<span class="number">0</span>]);</span><br><span class="line">            Method[] methods = c.getMethods();</span><br><span class="line">            Constructor[] constructors = c.getConstructors();</span><br><span class="line">            <span class="keyword">if</span> (args.length == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                    System.out.println(method.toString());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">                    System.out.println(constructor.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (method.toString().contains(args[<span class="number">1</span>])) &#123;</span><br><span class="line">                        System.out.println(method.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (constructor.toString().contains(args[<span class="number">1</span>])) &#123;</span><br><span class="line">                        System.out.println(constructor.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"No such class."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.equals(java.lang.Object)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.toString()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.hashCode()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.compareTo(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.compareTo(java.lang.Object)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.indexOf(java.lang.String,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.indexOf(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.indexOf(<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.indexOf(<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.valueOf(<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.valueOf(<span class="keyword">long</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.valueOf(<span class="keyword">float</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.valueOf(<span class="keyword">boolean</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.valueOf(<span class="keyword">char</span>[])</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.valueOf(<span class="keyword">char</span>[],<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.valueOf(java.lang.Object)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.valueOf(<span class="keyword">char</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.valueOf(<span class="keyword">double</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">char</span> java.lang.String.charAt(<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.codePointAt(<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.codePointBefore(<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.codePointCount(<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.compareToIgnoreCase(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.concat(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.contains(java.lang.CharSequence)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.contentEquals(java.lang.CharSequence)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.contentEquals(java.lang.StringBuffer)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.copyValueOf(<span class="keyword">char</span>[])</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.copyValueOf(<span class="keyword">char</span>[],<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.endsWith(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.equalsIgnoreCase(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.format(java.lang.String,java.lang.Object[])</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> java.lang.String.getBytes(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">byte</span>[],<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] java.lang.String.getBytes(java.nio.charset.Charset)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] java.lang.String.getBytes(java.lang.String) <span class="keyword">throws</span> java.io.UnsupportedEncodingException</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] java.lang.String.getBytes()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> java.lang.String.getChars(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">char</span>[],<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> java.lang.String java.lang.String.intern()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.isEmpty()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[])</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.Iterable)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.lastIndexOf(<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.lastIndexOf(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.lastIndexOf(java.lang.String,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.lastIndexOf(<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.length()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.matches(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> java.lang.String.offsetByCodePoints(<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.regionMatches(<span class="keyword">int</span>,java.lang.String,<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.regionMatches(<span class="keyword">boolean</span>,<span class="keyword">int</span>,java.lang.String,<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.replace(<span class="keyword">char</span>,<span class="keyword">char</span>)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.replaceAll(java.lang.String,java.lang.String)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.replaceFirst(java.lang.String,java.lang.String)</span><br><span class="line"><span class="keyword">public</span> java.lang.String[] java.lang.String.split(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> java.lang.String[] java.lang.String.split(java.lang.String,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.startsWith(java.lang.String,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.String.startsWith(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> java.lang.CharSequence java.lang.String.subSequence(<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.substring(<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.substring(<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">char</span>[] java.lang.String.toCharArray()</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.toLowerCase(java.util.Locale)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.toLowerCase()</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.toUpperCase()</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.toUpperCase(java.util.Locale)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.String.trim()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> java.lang.Object.wait() <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> java.lang.Object.wait(<span class="keyword">long</span>,<span class="keyword">int</span>) <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.wait(<span class="keyword">long</span>) <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> java.lang.Class java.lang.Object.getClass()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.notify()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.notifyAll()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">default</span> java.util.stream.IntStream java.lang.CharSequence.chars()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">default</span> java.util.stream.IntStream java.lang.CharSequence.codePoints()</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[],<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[],java.nio.charset.Charset)</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[],java.lang.String) <span class="keyword">throws</span> java.io.UnsupportedEncodingException</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[],<span class="keyword">int</span>,<span class="keyword">int</span>,java.nio.charset.Charset)</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[],<span class="keyword">int</span>,<span class="keyword">int</span>,java.lang.String) <span class="keyword">throws</span> java.io.UnsupportedEncodingException</span><br><span class="line"><span class="keyword">public</span> java.lang.String(java.lang.StringBuilder)</span><br><span class="line"><span class="keyword">public</span> java.lang.String(java.lang.StringBuffer)</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[])</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">int</span>[],<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> java.lang.String()</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">char</span>[])</span><br><span class="line"><span class="keyword">public</span> java.lang.String(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">char</span>[],<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[],<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[],<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>参数为java.lang.String，在idea中设置运行参数：Edit Configurations&gt;Configuration&gt;Program arguments，需要填写某个类的全限定名。</p>
<h2 id="14-7-动态代理"><a href="#14-7-动态代理" class="headerlink" title="14.7 动态代理"></a>14.7 动态代理</h2><p>代理是基本的设计模式之一，是用来代替实际对象的对象，通常涉及与实际对象的通信，充当中间人的角色。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-08 10:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleProxyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">(Interface inter)</span> </span>&#123;</span><br><span class="line">        inter.doSomething();</span><br><span class="line">        inter.somethingElse(<span class="string">"banana"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        consumer(<span class="keyword">new</span> RealObject());</span><br><span class="line">        consumer(<span class="keyword">new</span> ProxyObject(<span class="keyword">new</span> RealObject()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String arg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealObject</span> <span class="keyword">implements</span> <span class="title">Interface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do something."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do something else :"</span> + arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyObject</span> <span class="keyword">implements</span> <span class="title">Interface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Interface proxied;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyObject</span><span class="params">(Interface proxied)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.proxied = proxied;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"proxy object do something."</span>);</span><br><span class="line">        proxied.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"proxy object do something else: "</span> + arg);</span><br><span class="line">        proxied.somethingElse(arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> something.</span><br><span class="line"><span class="keyword">do</span> something <span class="keyword">else</span> :banana</span><br><span class="line">proxy object <span class="keyword">do</span> something.</span><br><span class="line"><span class="keyword">do</span> something.</span><br><span class="line">proxy object <span class="keyword">do</span> something <span class="keyword">else</span>: banana</span><br><span class="line"><span class="keyword">do</span> something <span class="keyword">else</span> :banana</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>当想要执行一些额外操作，同时想将这些操作从”实际”对象中分离出去时，或者想要更加容易的做出修改时代理是很有用的。</p>
<p>通过调用静态方法Proxy.newProxyInstance()可以创建动态代理对象，<br>newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)<br>Returns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-08 10:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDynamicProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">(Interface inter)</span> </span>&#123;</span><br><span class="line">        inter.doSomething();</span><br><span class="line">        inter.somethingElse(<span class="string">"Banana"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RealObject realObject = <span class="keyword">new</span> RealObject();</span><br><span class="line">        consumer(realObject);</span><br><span class="line">        Interface proxy = (Interface) Proxy.newProxyInstance(Interface<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(),</span></span><br><span class="line">                new Class[]&#123;Interface.class&#125;, new DynamicProxyHandler(realObject));</span><br><span class="line">        consumer(proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object proxied;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxyHandler</span><span class="params">(Object proxied)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.proxied = proxied;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"proxy: "</span> + proxy.getClass() + <span class="string">" .method: "</span> + method + <span class="string">" .args: "</span> + args);</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Object object : args) &#123;</span><br><span class="line">                System.out.println(object + <span class="string">"   "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(proxied, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> something.</span><br><span class="line"><span class="keyword">do</span> something <span class="keyword">else</span> :Banana</span><br><span class="line">proxy: class com.typeinfo.$Proxy0 .method: public abstract void com.typeinfo.Interface.doSomething() .args: null</span><br><span class="line"><span class="keyword">do</span> something.</span><br><span class="line">proxy: class com.typeinfo.$Proxy0 .method: public abstract void com.typeinfo.Interface.somethingElse(java.lang.String) .args: [Ljava.lang.Object;@12a3a380</span><br><span class="line">Banana   </span><br><span class="line"><span class="keyword">do</span> something <span class="keyword">else</span> :Banana</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="14-8-空对象"><a href="#14-8-空对象" class="headerlink" title="14.8 空对象"></a>14.8 空对象</h2><p>当时用内置的null去表示空对象时，在每次使用这个对象的时候都需要先判断该对象是否为null，并且判断除了用来产生NullPointerException之外，没有任何帮助，还会产生大量冗余代码。我们希望有一个空对象，可以接收传传给它所代表的对象，但是将返回表示该对象不存在的任何真实对象的值。<br>最简单的是创建一个标记接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-08 11:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NullPerson</span> <span class="keyword">extends</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Null</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NullPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"None"</span>, <span class="string">"None"</span>, <span class="string">"None"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"NullPerson"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Person Null = <span class="keyword">new</span> NullPerson();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Null</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String first;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String last;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String first, String last, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"first='"</span> + first + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", last='"</span> + last + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="14-9-接口与类型信息"><a href="#14-9-接口与类型信息" class="headerlink" title="14.9 接口与类型信息"></a>14.9 接口与类型信息</h2><p>interface的一种重要目标就是允许隔离构件，进而降低耦合度，如果编写接口，那么可以实现这一目标，但是通过类型信息，这种耦合性还是会传播出去。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-08 11:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceViolation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> B();</span><br><span class="line">        a.f();</span><br><span class="line">        System.out.println(a.getClass().getCanonicalName());</span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> B) &#123;</span><br><span class="line">            B b = (B) a;</span><br><span class="line">            b.g();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>a被当作B实现，通过转型为B，可以调用A中不存在的方法。<br>一种解决方法是直接声明，使用实际的类而不是接口。最简单的方式是对实现使用包访问权限，这样在包外便无法访问。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-08 11:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiddenC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">makeA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> C();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">u</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">v</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即使从makeA()返回的是C类型，在包外依然无法使用A之外的任何方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-08 11:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiddenImplementation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException,</span></span><br><span class="line"><span class="function">            InvocationTargetException </span>&#123;</span><br><span class="line">        A a = HiddenC.makeA();</span><br><span class="line">        a.f();</span><br><span class="line">        System.out.println(a.getClass().getCanonicalName());</span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> C) &#123;</span><br><span class="line">            C c = (C) a;</span><br><span class="line">            c.g();</span><br><span class="line">        &#125;</span><br><span class="line">        callHiddenMethod(a, <span class="string">"g"</span>);</span><br><span class="line">        callHiddenMethod(a, <span class="string">"v"</span>);</span><br><span class="line">        callHiddenMethod(a, <span class="string">"u"</span>);</span><br><span class="line">        callHiddenMethod(a, <span class="string">"w"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">callHiddenMethod</span><span class="params">(Object object, String methodName)</span> <span class="keyword">throws</span> NoSuchMethodException,</span></span><br><span class="line"><span class="function">            InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        Method g = object.getClass().getDeclaredMethod(methodName);</span><br><span class="line">        g.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        g.invoke(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">f</span><span class="params">()</span>.</span></span><br><span class="line"><span class="function">com.typeinfo.C</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">g</span><span class="params">()</span>.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">g</span><span class="params">()</span>.</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">v</span><span class="params">()</span>.</span></span><br><span class="line"><span class="function"><span class="keyword">package</span> <span class="title">u</span><span class="params">()</span>.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">w</span><span class="params">()</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Process finished with exit code 0</span></span><br></pre></td></tr></table></figure>

<p>通过反射，仍旧可以调用所有方法，甚至是private方法，如果知道方法名，可以在Method对象上调用setAccessible(true)。<br>甚至使用发布编译后的代码也无法阻止这种情况，因为在发布的jdk中有反编译器便可突破这一限制。<br>内部类与匿名类也无法阻止反射到达并调用非公共访问权限的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-08 11:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerImplementation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException </span>&#123;</span><br><span class="line">        A a = InnerA.makeA();</span><br><span class="line">        a.f();</span><br><span class="line">        System.out.println(a.getClass().getName());</span><br><span class="line">        HiddenImplementation.callHiddenMethod(a, <span class="string">"g"</span>);</span><br><span class="line">        HiddenImplementation.callHiddenMethod(a, <span class="string">"u"</span>);</span><br><span class="line">        HiddenImplementation.callHiddenMethod(a, <span class="string">"v"</span>);</span><br><span class="line">        HiddenImplementation.callHiddenMethod(a, <span class="string">"w"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InnerA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"C.f()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"C.g()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">u</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"C.u()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">v</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"C.v()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"C.w()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">makeA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> C();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">C.f()</span><br><span class="line">com.typeinfo.InnerA$C</span><br><span class="line">C.g()</span><br><span class="line">C.u()</span><br><span class="line">C.v()</span><br><span class="line">C.w()</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.typeinfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-08 11:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonymousImplementation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException,</span></span><br><span class="line"><span class="function">            InvocationTargetException </span>&#123;</span><br><span class="line">        A a = AnonymousA.makeA();</span><br><span class="line">        a.f();</span><br><span class="line">        System.out.println(a.getClass().getName());</span><br><span class="line">        HiddenImplementation.callHiddenMethod(a, <span class="string">"g"</span>);</span><br><span class="line">        HiddenImplementation.callHiddenMethod(a, <span class="string">"u"</span>);</span><br><span class="line">        HiddenImplementation.callHiddenMethod(a, <span class="string">"v"</span>);</span><br><span class="line">        HiddenImplementation.callHiddenMethod(a, <span class="string">"w"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonymousA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">makeA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> A() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"public c.f()"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"public c.g()"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">u</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"package u()"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">v</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"protected v()"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"private w()"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> c.f()</span><br><span class="line">com.typeinfo.AnonymousA$<span class="number">1</span></span><br><span class="line"><span class="keyword">public</span> c.g()</span><br><span class="line"><span class="function"><span class="keyword">package</span> <span class="title">u</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">v</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">w</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Process finished with exit code 0</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>更改DNS为8.8.8.8访问cn.bing.com</title>
    <url>/2019/01/24/%E6%9B%B4%E6%94%B9DNS%E4%B8%BA8-8-8-8%E8%AE%BF%E9%97%AEcn-bing-com/</url>
    <content><![CDATA[<p>昨天早上开始 <a href="https://cn.bing.com" target="_blank" rel="noopener">https://cn.bing.com</a> 就无法访问：</p>
<p>今天晚上想去 <a href="https://weibo.com/bingisfordoing" target="_blank" rel="noopener">Bing搜索微博</a> 了解一下情况，ping了一下，DNS都是127.0.0.1，将DNS改为8.8.8.8还能正常访问。据说当年Google开始也是出现DNS污染，后来才离开大陆的，想想Bing也没有了，每天只能在百度看百家号那些劣质内容就觉得可怕。</p>
<a id="more"></a>



<p>从去年开始就没用百度搜索了，除了CSDN（虽然现在也被广告淹没了）还有点有用的东西。前两天搜点东西，发现不太对，好像所有的结果页面风格都差不多，过两天才看到域名，给我吓到了，前几页全是 <strong>baijiahao.baidu.com</strong> 的文章。给自己家产品引流无可厚非，但是做到这种程度还能算是一个搜索引擎吗？而且好多文章都是文不对题，可能都没有审核。最令人恶心的是竟然都没有评论功能，可能百度也觉得这些低质量内容开放评论会被喷得体无完肤吧。。。</p>
<p>那时候还没想到是百度搞的导流，还特意去查了各种百度谷歌高级搜索的资料学习了一下，折腾一番但是收效甚微。</p>
<p>想看看大家对百度搜索的看法，看到一篇很火的文章：<a href="https://www.huxiu.com/article/282406.html" target="_blank" rel="noopener">百度搜索引擎已死</a> ， 文章举了几个例子，果然全是百家号的恶心内容。</p>
<p><img src="http://i2.chinanews.com/simg/cmshd/2019/01/24/f6c14493849a45ee99d6bb64c583098a.jpg" alt="百度已死"></p>
<p><img src="https://img.huxiucdn.com/article/content/201901/22/225013242046.jpg?imageView2/2/w/1000/format/jpg/interlace/1/q/85" alt="百度搜索结果"></p>
<p>没有竞争对手，才能为所欲为吧。</p>
<p>引用原文中得一句话：<strong>写到这里，很是悲哀：偌大的中文互联网竟已堕落到如此境地，连一个搜索引擎都没有了。</strong></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之3Sum</title>
    <url>/2019/01/03/LeetCode%E4%B9%8B3Sum/</url>
    <content><![CDATA[<h2 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h2><p>输入一个数组，例如{-1 0 1 2 -1 -4}，从数组中找三个数（a,b,c），使得其和0，输出所有的（a,b,c）组合。</p>
<p>要求abc不能重复，并且a&lt;=b&lt;=c。</p>
<p>例：</p>
<p>S = {-1, 0, 1, 2, -1, -4}；</p>
<p>输出：</p>
<p>(-1, 0 ,1)</p>
<p>(-1, -1, 2)</p>
<a id="more"></a>



<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>一看到题目，不问代码行数，不问时间复杂度，便排出三个循环。。但是循环非常耗时，显然不是题目的本意。想了好长时间没有什么进展。</p>
<p>先将给定数组排序，然后指定一个数，在数组中找出两个数并且这两个数的和是目标数值的相反数：<a href="http://www.cnblogs.com/xcr1234/p/5285727.html" target="_blank" rel="noopener">【LeetCode】3Sum 解题报告</a></p>
<p>在网上找到了篇比较有新意的文章：[<a href="https://www.cnblogs.com/xcr1234/p/5285727.html" target="_blank" rel="noopener">3Sum algorithm - 非常容易理解的实现 （java)</a>] 。</p>
<hr>
<p>最后发现维基百科中就有收录：<a href="https://zh.wikipedia.org/zh-hans/3SUM" target="_blank" rel="noopener">维基百科—3SUM</a> ，还有更一般的情形 N SUM。</p>
<figure class="highlight pascal"><table><tr><td class="code"><pre><span class="line">sort(S);</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">0</span> <span class="keyword">to</span> n-<span class="number">3</span> <span class="keyword">do</span></span><br><span class="line">   a = S[i];</span><br><span class="line">   start = i+<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">end</span> = n-<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">while</span> (start &lt; <span class="keyword">end</span>) <span class="keyword">do</span></span><br><span class="line">      b = S[start]</span><br><span class="line">      c = S[<span class="keyword">end</span>];</span><br><span class="line">      <span class="keyword">if</span> (a+b+c == <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">         output a, b, c;</span><br><span class="line">         <span class="comment">// Continue search for all triplet combinations summing to zero.</span></span><br><span class="line">          <span class="keyword">end</span> = <span class="keyword">end</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (a+b+c &gt; <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">         <span class="keyword">end</span> = <span class="keyword">end</span> - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">         start = start + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>伪代码还挺容易理解的。</p>
<h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><p>因为知乎上有人宣称证明了哥德巴赫猜想的原因，这两天还特意了解了下猜想证明的历史，“1+2”、“1+3”之类的证明，虽然一点也没看懂。感觉数学真的很有魅力，严谨清晰的逻辑，精妙完美的结论，自然界中的一切每时每刻都在遵循着其中的规律运行，更加感慨于人类的智慧，都找不到合适的赞美的词了。</p>
<p>“超越数”、“黄金分割”、“哥德巴赫猜想”、“黎曼猜想”…</p>
<p>停下思绪，回到现实：<strong>当你理解它的时候你觉得进入了天堂，当你不理解它的时候你仿佛进入了地狱</strong>，看哭了…</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot基础学习笔记</title>
    <url>/2019/01/01/SpringBoot%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="内容概要"><a href="#内容概要" class="headerlink" title="内容概要"></a>内容概要</h2><ol>
<li>SpringBoot入门</li>
<li>SpringBoot配置</li>
<li>SpringBoot与日志</li>
<li>SpringBoot与Web开发</li>
<li>SpringBoot与Docker</li>
<li>SpringBoot与数据访问</li>
<li>SpringBoot启动配置原理</li>
<li>SpringBoot自定义Starters</li>
<li>SpringBoot与缓存</li>
<li>SpringBoot与消息</li>
<li>SpringBoot与检索</li>
<li>SpringBoot与任务</li>
<li>SpringBoot与安全</li>
<li>SpringBoot与分布式</li>
<li>SpringBoot与开发热部署</li>
<li>SpringBoot与监控管理</li>
</ol>
<h2 id="第一章-SpringBoot入门"><a href="#第一章-SpringBoot入门" class="headerlink" title="第一章 SpringBoot入门"></a>第一章 SpringBoot入门</h2><h3 id="1-1-SpringBoot简介"><a href="#1-1-SpringBoot简介" class="headerlink" title="1.1 SpringBoot简介"></a>1.1 SpringBoot简介</h3><p>特点：约定大于配置；去繁从简；</p>
<a id="more"></a>



<p>背景： </p>
<p>J2EE笨重的开发；</p>
<p>繁多的配置；</p>
<p>低下的效率；</p>
<p>复杂的部署；</p>
<p>第三方技术集成难度大；</p>
<p>解决方案：</p>
<p>SpringBoot：一站式J2EE的解决方案；</p>
<p>SpringCloud：分布式整体解决方案；</p>
<p>优点：</p>
<p>快速创建可独立运行的Spring项目并与主流框架集成；</p>
<p>starters自动依赖管理及版本控制；</p>
<p>使用嵌入的Servlet容器，应用无需打包；</p>
<p>大量的自动配置，简化开发，也可修改默认值；</p>
<p>无需配置XML，无代码生成，开箱即用；</p>
<p>准生产环境的运行时应用监控；</p>
<p>是对Spring技术栈的一个整合。</p>
<hr>
<h3 id="1-2-微服务"><a href="#1-2-微服务" class="headerlink" title="1.2 微服务"></a>1.2 微服务</h3><p>单体应用： 开发，测试，部署简单；</p>
<p>微服务：功能拆分，灵活配置，通信协作。</p>
<p>SpringBoot官网 &gt; 微服务文档</p>
<hr>
<h3 id="1-3-开发环境配置"><a href="#1-3-开发环境配置" class="headerlink" title="1.3 开发环境配置"></a>1.3 开发环境配置</h3><ol>
<li>JDK版本；</li>
<li>maven版本；</li>
<li>开发工具选择；</li>
<li>框架版本选择；</li>
</ol>
<hr>
<h3 id="1-4-第一个应用：HelloWorld"><a href="#1-4-第一个应用：HelloWorld" class="headerlink" title="1.4 第一个应用：HelloWorld"></a>1.4 第一个应用：HelloWorld</h3><ol>
<li>创建一个Maven项目；</li>
<li>导入SpringBoot相关依赖；</li>
<li>编写主程序，启动SpringBoot应用；</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApp<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>编写业务逻辑，服务；</li>
<li>运行主程序测试；</li>
<li>打包jar包：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行jar包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar xxx.jar</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="1-5-HelloWorld原理探究"><a href="#1-5-HelloWorld原理探究" class="headerlink" title="1.5 HelloWorld原理探究"></a>1.5 HelloWorld原理探究</h3><p>POM文件：</p>
<ol>
<li>父项目：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">父项目：</span><br></pre></td></tr></table></figure>

<p>SpringBoot的<strong>版本仲裁中心</strong>，导入依赖不需要写版本号。</p>
<ol>
<li>导入的依赖：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>spring-boot-starter-web：</p>
<p>场景启动器：帮我们导入web模块正常运行所需的依赖的组件；</p>
<p>将所有的功能场景抽取出来，做成启动器，只需要在项目中导入相关的starter，所有的依赖都会被导入，版本由spring-boot自动管理。</p>
<hr>
<h3 id="1-6-主程序类原理探究"><a href="#1-6-主程序类原理探究" class="headerlink" title="1.6 主程序类原理探究"></a>1.6 主程序类原理探究</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 18-9-9 下午2:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApp<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@SpringBootApplication标注在某个类上，指定SpringBoot的主配置类，由这个类来启动SpringBoot应用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">), @<span class="title">Filter</span>(</span></span><br><span class="line"><span class="class">    <span class="title">type</span> </span>= FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">)&#125;</span></span><br></pre></td></tr></table></figure>

<p>@SpringBootConfiguration：标注在某个类上，表示该类是SpringBoot的配置类。</p>
<p>@Configuration：配置类上标注该类。配置类也是一个组件：@Component；</p>
<p>@EnableAutoConfiguration：开启自动配置，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">需要配置的东西由SpringBoot自动配置。</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@AutoConfigurationPackage</span><br><span class="line">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@AutoConfigurationPackage：自动配置包，给容器导入一个组件，导入的组件由AutoConfigurationPackage.Registrar；</span><br><span class="line"></span><br><span class="line">将主配置类所在的及以下所有的子包里的所有组件添加到Spring容器中。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;Registrar<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">AutoConfigurationPackage</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Import：给容器中导入一些组件：AutoConfigurationImportSelector：选择哪些组件导入。</span><br><span class="line"></span><br><span class="line">	给容器中导入自动配置类（xxxAutoConfiguration）：给容器中导入场景需要的所有的组件并配置好这些组件。</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com/springboot/20180909151509.png" alt="配置类"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="keyword">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="keyword">this</span>.getBeanClassLoader());</span><br><span class="line">    Assert.notEmpty(configurations, <span class="string">"No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct."</span>);</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SpringBoot启动的时候从类路径下META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值导入到Spring容器中，自动配置类生效。</strong></p>
<p>需要自己指定的配置，已经由配置类自动配置好。</p>
<p>org/springframework/boot/spring-boot-autoconfigure/2.0.4.RELEASE/spring-boot-autoconfigure-2.0.4.RELEASE.jar!/META-INF/spring.factories</p>
<p><img src="https://image.youyou-2608.com/springboot/google-chrome_20180909152808.png" alt="自动配置类"></p>
<hr>
<h3 id="1-7-SpringBoot项目初始化器"><a href="#1-7-SpringBoot项目初始化器" class="headerlink" title="1.7 SpringBoot项目初始化器"></a>1.7 SpringBoot项目初始化器</h3><p>SpringBoot项目向导：</p>
<p><strong>IDEA &gt; New Project &gt; Spring Initializer &gt; 项目详情 &gt; 导入相关场景依赖。</strong></p>
<p>@RestController注解：</p>
<p>@ResponseBody和@RequestMapping注解组合。</p>
<ol>
<li>自动生成主程序；</li>
<li>/resources中目录结构：<ol>
<li>static：保存静态资源；</li>
<li>templates：存所有的模板页面(使用嵌入的tomcat，不支持JSP页面，但是可以使用模板引擎)；</li>
<li>application.properties：SpringBoot的默认配置文件。</li>
</ol>
</li>
</ol>
<hr>
<h2 id="第二章-SpringBoot配置文件"><a href="#第二章-SpringBoot配置文件" class="headerlink" title="第二章 SpringBoot配置文件"></a>第二章 SpringBoot配置文件</h2><h3 id="2-1-SpringBoot配置文件"><a href="#2-1-SpringBoot配置文件" class="headerlink" title="2.1 SpringBoot配置文件"></a>2.1 SpringBoot配置文件</h3><p>SpringBoot使用全局配置文件，配置文件名是固定的。</p>
<ul>
<li>application.properties；</li>
<li>application.yml。</li>
</ul>
<p>配置文件的作用：<strong>修改SpringBoot默认配置。</strong></p>
<p>YAML：不仅仅是一个标记语言，以数据为中心，比json和xml更适合做配置文件。</p>
<p>YAML：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-2-YAML基本语法"><a href="#2-2-YAML基本语法" class="headerlink" title="2.2 YAML基本语法"></a>2.2 YAML基本语法</h3><p>key: value    表示键值对，冒号之后的空格必须有的，以空格来控制层级关系。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line">	<span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">	<span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure>

<p><strong>属性和值大小写敏感。</strong></p>
<p>字面量：字符串默认不加单引号和双引号，<strong>双引号会转义特殊字符</strong>，<strong>单引号会转义特殊字符</strong>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">k:</span> <span class="string">v</span></span><br></pre></td></tr></table></figure>

<p>对象(属性和值)：本质是键值对。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span></span><br><span class="line">	<span class="attr">name:</span> <span class="string">张三</span></span><br><span class="line">	<span class="attr">age:</span> <span class="number">14</span></span><br></pre></td></tr></table></figure>

<p>行内写法：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span> <span class="string">&#123;name:</span> <span class="string">张三,age:</span> <span class="number">15</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p>数组(List, Set)：</p>
<p>用-表示数组中的一个元素。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure>

<p>行内写法：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-1配置文件注入："><a href="#2-2-1配置文件注入：" class="headerlink" title="2.2.1配置文件注入："></a>2.2.1配置文件注入：</h4><p>application.yml文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">张三</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">alive:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2018</span><span class="string">/09/11</span></span><br><span class="line">  <span class="attr">classes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">map:</span></span><br><span class="line">    <span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dog</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>JavaBean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.po;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 18-9-11 下午8:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> alive;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; classes;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", alive="</span> + alive +</span><br><span class="line">                <span class="string">", birth="</span> + birth +</span><br><span class="line">                <span class="string">", classes="</span> + classes +</span><br><span class="line">                <span class="string">", map="</span> + map +</span><br><span class="line">                <span class="string">", dog="</span> + dog +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以导入配置文件处理器之后，编写配置文件有IDE智能提示。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>@ConfigurationProperties(prefix = “person”)获取配置文件的值。</p>
<p><strong>application.properties乱码问题：file encoding勾选将properties配置文件转换成ascii码。</strong></p>
<p>配置文件的旧写法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lastName"</span> <span class="attr">value</span>=<span class="string">"zhagsa"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-2-Value注入值"><a href="#2-2-2-Value注入值" class="headerlink" title="2.2.2 @Value注入值"></a>2.2.2 @Value注入值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;11*2&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"true"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> alive;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; classes;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-3-Value和-ConfigurationProperties获取值比较："><a href="#2-2-3-Value和-ConfigurationProperties获取值比较：" class="headerlink" title="2.2.3 @Value和@ConfigurationProperties获取值比较："></a>2.2.3 @Value和@ConfigurationProperties获取值比较：</h4><table>
<thead>
<tr>
<th></th>
<th>@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td>批量注入配置文件中的属性</td>
<td>单个指定变量的值</td>
</tr>
<tr>
<td>松散绑定</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<h4 id="2-2-4-Value和-ConfigurationProperties的比较"><a href="#2-2-4-Value和-ConfigurationProperties的比较" class="headerlink" title="2.2.4 @Value和@ConfigurationProperties的比较"></a>2.2.4 @Value和@ConfigurationProperties的比较</h4><p><strong>如果只是在某个业务逻辑中需要获取一下配置文件中的值，那就用@Value；如果专门编写了Java bean和配置文件进行映射，就直接使用@ConfigurationProperties。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 18-9-12 下午9:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demo.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-3-PropertySource和-ImportSource"><a href="#2-3-PropertySource和-ImportSource" class="headerlink" title="2.3 @PropertySource和@ImportSource"></a>2.3 @PropertySource和@ImportSource</h3><p><strong>@ConfigurationProperties默认从全局配置文件中获取值。</strong></p>
<h4 id="2-3-1-PropertySource获取配置文件的值："><a href="#2-3-1-PropertySource获取配置文件的值：" class="headerlink" title="2.3.1 @PropertySource获取配置文件的值："></a>2.3.1 @PropertySource获取配置文件的值：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="line">@PropertySource(value = &#123;&quot;classpath:person.properties&quot;&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="2-3-2-ImportSource：导入Spring配置文件，是配置文件中的配置生效。"><a href="#2-3-2-ImportSource：导入Spring配置文件，是配置文件中的配置生效。" class="headerlink" title="2.3.2 @ImportSource：导入Spring配置文件，是配置文件中的配置生效。"></a>2.3.2 @ImportSource：导入Spring配置文件，是配置文件中的配置生效。</h4><p>SpringBoot默认没有加载Spring配置文件，手动编写的配置文件也无法识别，想让配置文件生效，将@ImportSource标注在主配置类上。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demoService"</span> <span class="attr">class</span>=<span class="string">"com.demo.service.DemoService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demoServiceTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> hasDemoService = applicationContext.containsBean(<span class="string">"demoService"</span>);</span><br><span class="line">    System.out.println(hasDemoService);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-3-SpringBoot推荐的添加组件方式"><a href="#2-3-3-SpringBoot推荐的添加组件方式" class="headerlink" title="2.3.3 SpringBoot推荐的添加组件方式"></a>2.3.3 SpringBoot推荐的添加组件方式</h4><p>SpringBoot推荐给容器中添加组件的方式：使用全注解，@Configuration标注配置类。</p>
<p>@Bean：<strong><u>将方法的返回值添加到容器中，组件的默认id就是方法名。</u></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo.service.DemoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 18-9-12 下午9:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span> 将方法的返回值添加到容器中，组件的默认id就是方法名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DemoService <span class="title">demoService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给容器中添加组件"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DemoService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-4-配置文件占位符"><a href="#2-4-配置文件占位符" class="headerlink" title="2.4 配置文件占位符"></a>2.4 配置文件占位符</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">张三$&#123;random.value&#125;</span></span><br><span class="line">  <span class="attr">age:</span> <span class="string">$&#123;random.int&#125;</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2018</span><span class="string">/09/11</span></span><br><span class="line">  <span class="attr">map:</span></span><br><span class="line">    <span class="attr">k1:</span> <span class="string">$&#123;random.value&#125;</span></span><br><span class="line">    <span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;person.hello:defau&#125;</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">alive:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">classes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">v2</span></span><br></pre></td></tr></table></figure>

<ol>
<li>随机数：</li>
</ol>
<p>${random.value}，${random.int}，${random.long}，${random.int(10)}，${random.int[1,10]}</p>
<ol>
<li>占位符获取配置之前的值，${app.name:默认值}</li>
</ol>
<hr>
<h3 id="2-5-Profile多环境支持"><a href="#2-5-Profile多环境支持" class="headerlink" title="2.5 Profile多环境支持"></a>2.5 Profile多环境支持</h3><blockquote>
<p>profile为不同环境提供不同配置的功能。</p>
</blockquote>
<ol>
<li><p>多profile文件的方式：</p>
<p>在主配置文件编写的时候，文件名可以是application-{profile}.properties/application-{profile}.yml；</p>
<p>SpringBoot默认使用全局环境配置</p>
</li>
<li><p>激活指定profile：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<p><strong>命令行方式：</strong></p>
<p>–spring.profiles.active=dev/prod</p>
<p><strong>虚拟机参数：</strong></p>
<p>-Dspring.profiles.active=dev/prod</p>
</li>
<li><p>yaml支持文档块的方式：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">     <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>见下图：<img src="https://image.youyou-2608.com/springboot/20180913201726.jpg" alt="厉害了"></p>
<hr>
<h3 id="2-6-配置文件加载位置"><a href="#2-6-配置文件加载位置" class="headerlink" title="2.6 配置文件加载位置"></a>2.6 配置文件加载位置</h3><p>SpringBoot启动会扫描以下位置的application.properties或者application.yml文件作为SpringBoot的默认配置文件：</p>
<ul>
<li>file：./config/</li>
<li>file：./</li>
<li>classpath：/config/</li>
<li>classpath：/</li>
</ul>
<p><strong>以上位置优先级从高到低。所有位置的配置文件都会被加载，高优先级的配置会覆盖低优先级的配置，高优先级和低优先级配置文件形成互补配置。</strong></p>
<p>server.context-path=/config02 -&gt; <a href="http://localhost:8080/config02/hello.do" target="_blank" rel="noopener">http://localhost:8080/config02/hello.do</a></p>
<p><strong>还可以通过spring.config.location来改变默认的配置文件位置(项目打包后可以使用命令行参数的形式启动项目时候来指定配置文件的位置，指定的配置文件和默认加载的配置文件会形成互补配置)。</strong></p>
<p>见下图：</p>
<p><img src="https://image.youyou-2608.com/springboot/20180913202351.jpg" alt="图片丢失"></p>
<hr>
<h3 id="2-7-外部配置文件加载顺序"><a href="#2-7-外部配置文件加载顺序" class="headerlink" title="2.7 外部配置文件加载顺序"></a>2.7 外部配置文件加载顺序</h3><p>SpringBoot也可以从以下位置加载配置文件，优先级从高到低，<strong>高优先级的配置会覆盖低优先级的配置，高低优先级的配置会形成互补配置</strong>。</p>
<ol>
<li><a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#using-boot-devtools-globalsettings" target="_blank" rel="noopener">Devtools global settings properties</a> on your home directory (<code>~/.spring-boot-devtools.properties</code> when devtools is active).</li>
<li><a href="https://docs.spring.io/spring/docs/5.0.9.RELEASE/javadoc-api/org/springframework/test/context/TestPropertySource.html" target="_blank" rel="noopener"><code>@TestPropertySource</code></a> annotations on your tests.</li>
<li><a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/api/org/springframework/boot/test/context/SpringBootTest.html" target="_blank" rel="noopener"><code>@SpringBootTest#properties</code></a> annotation attribute on your tests.</li>
<li>Command line arguments.</li>
<li>Properties from <code>SPRING_APPLICATION_JSON</code> (inline JSON embedded in an environment variable or system property).</li>
<li><code>ServletConfig</code> init parameters.</li>
<li><code>ServletContext</code> init parameters.</li>
<li>JNDI attributes from <code>java:comp/env</code>.</li>
<li>Java System properties (<code>System.getProperties()</code>).</li>
<li>OS environment variables.</li>
<li>A <code>RandomValuePropertySource</code> that has properties only in <code>random.*</code>.</li>
<li><a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features-external-config-profile-specific-properties" target="_blank" rel="noopener">Profile-specific application properties</a> outside of your packaged jar (<code>application-{profile}.properties</code> and YAML variants).</li>
<li><a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features-external-config-profile-specific-properties" target="_blank" rel="noopener">Profile-specific application properties</a> packaged inside your jar (<code>application-{profile}.properties</code> and YAML variants).</li>
<li>Application properties outside of your packaged jar (<code>application.properties</code> and YAML variants).</li>
<li>Application properties packaged inside your jar (<code>application.properties</code> and YAML variants).</li>
<li><a href="https://docs.spring.io/spring/docs/5.0.9.RELEASE/javadoc-api/org/springframework/context/annotation/PropertySource.html" target="_blank" rel="noopener"><code>@PropertySource</code></a> annotations on your <code>@Configuration</code> classes.</li>
<li>Default properties (specified by setting <code>SpringApplication.setDefaultProperties</code>).</li>
</ol>
<p>由jar包外向jar包内进行查找。</p>
<p>命令行参数（多个参数用空格分开）；</p>
<ul>
<li>java -jar xxx.jar –server.port=8081 server.context.path=/ab</li>
</ul>
<p>优先加载带profile的配置文件。</p>
<ul>
<li>jar包外的application-{profile}或application-{yml}或不带spring.profile的配置文件；</li>
<li>jar包内的application-{profile}或application-{yml}或不带spring.profile的配置文件；</li>
</ul>
<p>再加载带不profile的配置文件。</p>
<ul>
<li>jar包外的application-{profile}或application-{yml}或不带spring.profile的配置文件；</li>
<li>jar包内的application-{profile}或application-{yml}或不带spring.profile的配置文件；</li>
</ul>
<ul>
<li>@Configuration注解类上的@PropertySource；</li>
<li>通过SpringApplication.setDefaultProperties指定的默认属性。</li>
</ul>
<p>详细参见SpringBoot官网：<a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features" target="_blank" rel="noopener">SpringBoot外部配置文件加载顺序</a></p>
<hr>
<h3 id="2-8-自动配置原理"><a href="#2-8-自动配置原理" class="headerlink" title="2.8 自动配置原理"></a>2.8 自动配置原理</h3><p>配置文件能写什么，怎么写？</p>
<p>自动配置原理：</p>
<ol>
<li>SpringBoot在启动的时候加载主配置类，开启了自动配置功能：@EnableAutoConfiguration；</li>
<li>@EnableAutoConfiguration的作用：<ol>
<li>利用@EnableAutoConfigurationImportSelector给容器导入一些组件；</li>
<li>可以查看selectImports中的内容；</li>
<li>List<string> configurations = getCandidateConfigurations(annotationMetadata, attributes) 方法；<ul>
<li>SpringFactoriesLoader.loadFactoryNames()；</li>
<li>扫描所有jar包类路径下：META-INF/spring.factories；</li>
<li>将扫描到的文件内容加载包装成properties对象。</li>
</ul>
</string></li>
</ol>
</li>
<li>每一个自动配置类进行功能的自动配置；</li>
<li>所有在配置文件中能配置的属性都在xxxProperties类中配置着，配置文件能配置什么都参照配置文件中的值；</li>
</ol>
<p>SpringBoot的特点：</p>
<ol>
<li>SpringBoot启动时会加载大量的自动配置类；</li>
<li>看SpringBoot有没有自动配置类；</li>
<li>如果有，不用自己再写自动配置类。</li>
<li>给容器中自动配置类添加组件的时候，会从properties类中读取某些属性，我们就可以在配置文件中指定这些属性的值。</li>
</ol>
<hr>
<h3 id="2-9-Conditional自动配置"><a href="#2-9-Conditional自动配置" class="headerlink" title="2.9 @Conditional自动配置"></a>2.9 @Conditional自动配置</h3><blockquote>
<p>自动配置类需要在一定条件下才能生效。</p>
</blockquote>
<p>注解的作用：必须是@Conditional指定的条件成立，才能给容器中添加组件，配置里面的所有内容才生效。</p>
<table>
<thead>
<tr>
<th>@Conditional扩展</th>
<th>作用(判断是否满足当前条件)</th>
</tr>
</thead>
<tbody><tr>
<td>@ConditionalOnJava</td>
<td>系统的Java版本是否符合要求</td>
</tr>
<tr>
<td>@ConditionalOnBean</td>
<td>容器中存在指定的bean</td>
</tr>
<tr>
<td>@ConditionalOnMissingBean</td>
<td>容器中不存在指定的bean</td>
</tr>
<tr>
<td>@ConditionalOnExpression</td>
<td>满足SpEL表达式</td>
</tr>
<tr>
<td>@ConditionalOnClass</td>
<td>容器中有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnMissingClass</td>
<td>容器中没有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnProperty</td>
<td>系统中指定属性是有指定的值</td>
</tr>
<tr>
<td>@ConditionalOnResource</td>
<td>类路径下是否存在指定资源文件</td>
</tr>
<tr>
<td>@ConditionalOnWebApplication</td>
<td>当前是web环境</td>
</tr>
<tr>
<td>@ConditionalOnNotWebApplication</td>
<td>当前不是web环境</td>
</tr>
<tr>
<td>@ConditionalOnJndi</td>
<td>JNDI存在指定项</td>
</tr>
<tr>
<td>@ConditionalOnSingleCandidate</td>
<td>容器中只有一个指定的bean，或者这个bean是首选的bean</td>
</tr>
</tbody></table>
<p>自动配置文件：org/springframework/boot/spring-boot-autoconfigure/2.0.5.RELEASE/spring-boot-autoconfigure-2.0.5.RELEASE.jar!/META-INF/spring.factories</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.core.ReactorCoreAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityRequestMatcherProviderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span><br></pre></td></tr></table></figure>

<p>开启SpringBoot的debug，可以通过debug=true让控制台打印自动配置报告，便可以方便的知道哪些自动配置类生效了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">============================</span><br><span class="line">CONDITIONS EVALUATION REPORT</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   CodecsAutoConfiguration matched:</span><br><span class="line">      - @ConditionalOnClass found required class &apos;org.springframework.http.codec.CodecConfigurer&apos;; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)</span><br><span class="line"></span><br><span class="line">   CodecsAutoConfiguration.JacksonCodecConfiguration matched:</span><br><span class="line">      - @ConditionalOnClass found required class &apos;com.fasterxml.jackson.databind.ObjectMapper&apos;; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Negative matches:</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   ActiveMQAutoConfiguration:</span><br><span class="line">      Did not match:</span><br><span class="line">         - @ConditionalOnClass did not find required classes &apos;javax.jms.ConnectionFactory&apos;, &apos;org.apache.activemq.ActiveMQConnectionFactory&apos; (OnClassCondition)</span><br><span class="line"></span><br><span class="line">   AopAutoConfiguration:</span><br><span class="line">      Did not match:</span><br><span class="line">         - @ConditionalOnClass did not find required classes &apos;org.aspectj.lang.annotation.Aspect&apos;, &apos;org.aspectj.lang.reflect.Advice&apos;, &apos;org.aspectj.weaver.AnnotatedElement&apos; (OnClassCondition)</span><br></pre></td></tr></table></figure>

<h2 id="第三章-SpringBoot与日志"><a href="#第三章-SpringBoot与日志" class="headerlink" title="第三章 SpringBoot与日志"></a>第三章 SpringBoot与日志</h2><hr>
<h3 id="3-1-日志框架"><a href="#3-1-日志框架" class="headerlink" title="3.1 日志框架"></a>3.1 日志框架</h3><ul>
<li>System.out.println(“welcome!”);  不利于代码维护；</li>
<li>使用日志框架；</li>
<li>加入异步，自动归档等功能；</li>
<li>与程序耦合控制；</li>
<li>统一的接口层：日志门面。</li>
</ul>
<p>常见的日志框架：</p>
<ul>
<li>JUL（java.util.logging）；</li>
<li>JCL；</li>
<li>jboss-logging；</li>
<li>logback；</li>
<li>log4j；</li>
<li>log4j2；</li>
<li>slf4j；</li>
</ul>
<p>日志门面：SLF4J；</p>
<p>日志实现：Logback。</p>
<p>SpringBoot：底层是Spring框架，SpringBoot框架默认是JCL</p>
<p><strong>SpringBoot选用SLF4J，Logback。</strong></p>
<hr>
<h3 id="3-2-SLF4J的使用"><a href="#3-2-SLF4J的使用" class="headerlink" title="3.2 SLF4J的使用"></a>3.2 SLF4J的使用</h3><hr>
<h4 id="3-2-1-如何在系统中使用SLF4J"><a href="#3-2-1-如何在系统中使用SLF4J" class="headerlink" title="3.2.1 如何在系统中使用SLF4J"></a>3.2.1 如何在系统中使用SLF4J</h4><p>开发的时候，日志记录的方法调用，应该直接调用日志抽象层里的方法，而不是日志的实现类。</p>
<p>给系统导入slf4j的jar和logback的实现jar：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图示：</p>
<p><img src="https://image.youyou-2608.com/springboot/concrete-bindings.png" alt="具体关系"></p>
<p>每一个日志框架都有自己的配置文件，使用slf4j以后，<strong>配置文件还是作为日志实现框架本身的配置文件。</strong></p>
<hr>
<h4 id="3-2-2-遗留问题"><a href="#3-2-2-遗留问题" class="headerlink" title="3.2.2 遗留问题"></a>3.2.2 遗留问题</h4><p>a（slf4j + logback）：Spring(commons-logging)，Hibernate(jboss-logging)</p>
<p>统一日志记录，即便是别的框架也使用同一日志框架。</p>
<p><img src="https://image.youyou-2608.com/springboot/legacy.png" alt></p>
<p>如何让系统中所有的日志都统一到slf4j：</p>
<ol>
<li><u>将系统中其他日志框架排除在外；</u></li>
<li><u>用中间适配层包替换原有日志框架；</u></li>
<li><u>导入slf4j其他的实现。</u></li>
</ol>
<hr>
<h3 id="3-3-SpringBoot日志关系"><a href="#3-3-SpringBoot日志关系" class="headerlink" title="3.3 SpringBoot日志关系"></a>3.3 SpringBoot日志关系</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SpringBoot的日志功能：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SpringBoot底层依赖关系（pom.xml文件，show diagram查看maven项目依赖关系）：</p>
<p><img src="https://image.youyou-2608.com/springboot/irei.png" alt></p>
<ol>
<li>SpringBoot底层也是用slf4j + logback的方式进行日志记录；</li>
<li>SpringBoot也把其他的日志都替换成了slf4j；</li>
<li>中间替换包；</li>
<li>如果要引入其他框架，一定要把这个框架的默认日志依赖移除。</li>
</ol>
<p><strong>SpringBoot自动适应所有的日志框架，而且底层使用了slf4j + logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖移除掉。</strong></p>
<hr>
<h3 id="3-4-SpringBoot默认日志配置"><a href="#3-4-SpringBoot默认日志配置" class="headerlink" title="3.4 SpringBoot默认日志配置"></a>3.4 SpringBoot默认日志配置</h3><p>日志的级别，由低到高，可以调整日志输出的级别：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"><span class="comment">//日志的级别，由低到高</span></span><br><span class="line">logger.trace(<span class="string">"这是日志..."</span>);</span><br><span class="line">logger.debug(<span class="string">"这是debug日志..."</span>);</span><br><span class="line">logger.info(<span class="string">"这是Info信息..."</span>);</span><br><span class="line">logger.warn(<span class="string">"这是警告..."</span>);</span><br><span class="line">logger.error(<span class="string">"这是错误信息..."</span>);</span><br></pre></td></tr></table></figure>

<p>SpringBoot默认日志输出级别为info。</p>
<p>可以在application.yml中自定义日志输出级别： logging.level.com.hape.nmsl=trace</p>
<p>在当前项目下生成日志文件：logging.file=springboot.log</p>
<p>不指定路径在项目路径下生成日志文件。</p>
<p>logfile优先级高于logpath。</p>
<p>logpath：指定日志文件的路径，默认文件名spring.log。</p>
<p>logging.pattern.console：控制台输出日志的格式。</p>
<p>logging.pattern.file：日志文件输出格式。</p>
<p>日志输出格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%d：表示日期时间；</span><br><span class="line"></span><br><span class="line">%thread：表示线程号；</span><br><span class="line"></span><br><span class="line">%-5level：级别从左显示5个字符宽度；</span><br><span class="line"></span><br><span class="line">%logger&#123;50&#125;：表示logger名字最长50个字符，否则按照句点分割；</span><br><span class="line"></span><br><span class="line">%msg：日志信息；</span><br><span class="line"></span><br><span class="line">%n：换行符。</span><br></pre></td></tr></table></figure>

<p>日志格式配置实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-5-指定日志文件和日志profile功能"><a href="#3-5-指定日志文件和日志profile功能" class="headerlink" title="3.5 指定日志文件和日志profile功能"></a>3.5 指定日志文件和日志profile功能</h3><p>给类路径下放上每个日志框架自己配置文件即可，</p>
<blockquote>
<p>Because the standard <code>logback.xml</code> configuration file is loaded too early, you cannot use extensions in it. You need to either use <code>logback-spring.xml</code> or define a <code>logging.config</code> property.</p>
</blockquote>
<table>
<thead>
<tr>
<th>Logging System</th>
<th>Customization</th>
</tr>
</thead>
<tbody><tr>
<td>Logback</td>
<td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code>, or <code>logback.groovy</code></td>
</tr>
<tr>
<td>Log4j2</td>
<td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td>
</tr>
<tr>
<td>JDK (Java Util Logging)</td>
<td><code>logging.properties</code></td>
</tr>
</tbody></table>
<p>logback.xml：直接被日志框架识别；</p>
<p><strong>logback-spring.xml：日志框架不直接加载配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级功能profile。</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">可以指定某一段配置只在某个环境下生效</span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev, staging"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- configuration to be enabled when the "dev" or "staging" profiles are active--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!production"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- configuration to be enabled when the "production" profile is not active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-6-切换日志框架"><a href="#3-6-切换日志框架" class="headerlink" title="3.6 切换日志框架"></a>3.6 切换日志框架</h3><p>可以按照slf4j适配图进行相关的切换。</p>
<ol>
<li>排除不使用的包；</li>
<li>导入相关的适配包；</li>
</ol>
<p>不推荐更换SpringBoot默认使用的日志记录框架。</p>
<hr>
<h2 id="第四章-SpringBoot与Web开发"><a href="#第四章-SpringBoot与Web开发" class="headerlink" title="第四章 SpringBoot与Web开发"></a>第四章 SpringBoot与Web开发</h2><p>使用SpringBoot：</p>
<ul>
<li>创建SpringBoot应用，选中需要的模块；</li>
<li>SpringBoot自动配置好场景，需要在配置文件中指定少量配置，即可运行程序；</li>
<li>编写相关的业务逻辑。</li>
</ul>
<p>依赖于SpringBoot的自动配置。</p>
<hr>
<h3 id="4-1-webjar与静态资源映射规则"><a href="#4-1-webjar与静态资源映射规则" class="headerlink" title="4.1 webjar与静态资源映射规则"></a>4.1 webjar与静态资源映射规则</h3><p>SpringBoot对静态资源的映射规则：（WebMvcAutoConfiguration.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">    CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache()</span><br><span class="line">        .getCachecontrol().toHttpCacheControl();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry</span><br><span class="line">                                             .addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                                             .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod))</span><br><span class="line">                                             .setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(</span><br><span class="line">            registry.addResourceHandler(staticPathPattern)</span><br><span class="line">            .addResourceLocations(getResourceLocations(</span><br><span class="line">                <span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">            .setCachePeriod(getSeconds(cachePeriod))</span><br><span class="line">            .setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>所有的/webjars/**，都到classpath:/META-INF/resources/webjars找资源；</p>
<p>webjars以jar包的方式引入静态资源。</p>
<p><img src="https://image.youyou-2608.com/springboot/webjars.png" alt></p>
</li>
</ul>
<p>在访问的时候只需要写webjars下的资源名称即可。（<a href="http://localhost:8080/webjars/jquery/3.3.1-1/jquery.js）" target="_blank" rel="noopener">http://localhost:8080/webjars/jquery/3.3.1-1/jquery.js）</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1-1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>访问当前项目下的任何资源（静态资源的文件夹）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">"classpath:/META-INF/resources/", </span><br><span class="line">"classpath:/resources/",</span><br><span class="line">"classpath:/static/",</span><br><span class="line">"classpath:/public/"</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置欢迎页</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line">        <span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext),</span><br><span class="line">        applicationContext, getWelcomePage(),</span><br><span class="line">        <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>静态文件夹下的所有index.html页面；</p>
<p>映射到 private String staticPathPattern = “/**”;</p>
</li>
</ul>
<ul>
<li><p>配置喜欢的图标</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"spring.mvc.favicon.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FaviconConfiguration</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FaviconConfiguration</span><span class="params">(ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>映射到**favicon.ico静态资源文件夹。</p>
</li>
</ul>
<hr>
<h3 id="4-2-引入Thymeleaf模板引擎"><a href="#4-2-引入Thymeleaf模板引擎" class="headerlink" title="4.2 引入Thymeleaf模板引擎"></a>4.2 引入Thymeleaf模板引擎</h3><blockquote>
<p>thymeleaf, jsp, freemaker, velocity</p>
</blockquote>
<p>SpringBoot推荐的thymeleaf：</p>
<ol>
<li>引入thymeleaf；</li>
<li>自定义thymeleaf版本。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.2.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--布局功能支持程序  thymeleaf3  layout2以上版本适配--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thymeleaf.layout.dialect.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">thymeleaf.layout.dialect.version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-3-Thymeleaf语法"><a href="#4-3-Thymeleaf语法" class="headerlink" title="4.3 Thymeleaf语法"></a>4.3 Thymeleaf语法</h3><p>默认请求路径：classpath:templates/xxx.html</p>
<p>文档地址：<a href="https://www.thymeleaf.org/documentation.html" target="_blank" rel="noopener">Thymeleaf参考文档</a></p>
<p>使用方法：</p>
<ul>
<li><p>导入Thymeleaf名称空间；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http:y//www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用Thymeleaf语法；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span>显示欢迎信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>thymeleaf语法规则：</p>
<ul>
<li><p>th:text：改变text文本值；</p>
</li>
<li><p>th:任意属性都可以替换；</p>
</li>
<li><p>文档第十章/Attributes/优先级；</p>
<p><img src="https://image.youyou-2608.com/springboot/DeepinScreenshot_select-area_20181001125611.png" alt></p>
</li>
</ul>
</li>
<li><p>thymeleaf表达式；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Simple expressions:</span><br><span class="line">    Variable Expressions: $&#123;...&#125;</span><br><span class="line">    Selection Variable Expressions: *&#123;...&#125;</span><br><span class="line">    Message Expressions: #&#123;...&#125;</span><br><span class="line">    Link URL Expressions: @&#123;...&#125;</span><br><span class="line">    Fragment Expressions: ~&#123;...&#125;</span><br><span class="line">Literals</span><br><span class="line">    Text literals: &apos;one text&apos; , &apos;Another one!&apos; ,...</span><br><span class="line">    Number literals: 0 , 34 , 3.0 , 12.3 ,...</span><br><span class="line">    Boolean literals: true , false</span><br><span class="line">    Null literal: null</span><br><span class="line">    Literal tokens: one , sometext , main ,...</span><br><span class="line">Text operations:</span><br><span class="line">    String concatenation: +</span><br><span class="line">    Literal substitutions: |The name is $&#123;name&#125;|</span><br><span class="line">    Arithmetic operations:</span><br><span class="line">    Binary operators: + , - , * , / , %</span><br><span class="line">    Minus sign (unary operator): -</span><br><span class="line">Boolean operations:</span><br><span class="line">    Binary operators: and , or</span><br><span class="line">    Boolean negation (unary operator): ! , not</span><br><span class="line">Comparisons and equality:</span><br><span class="line">    Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span><br><span class="line">    Equality operators: == , != ( eq , ne )</span><br><span class="line">Conditional operators:</span><br><span class="line">    If-then: (if) ? (then)</span><br><span class="line">    If-then-else: (if) ? (then) : (else)</span><br><span class="line">    Default: (value) ?: (defaultvalue)</span><br><span class="line">Special tokens:</span><br><span class="line">	Page 17 of 106No-Operation: _</span><br></pre></td></tr></table></figure>

<p>内置对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ctx : the context object.</span><br><span class="line">#vars: the context variables.</span><br><span class="line">#locale : the context locale.</span><br><span class="line">#request : (only in Web Contexts) the HttpServletRequest object.</span><br><span class="line">#response : (only in Web Contexts) the HttpServletResponse object.</span><br><span class="line">#session : (only in Web Contexts) the HttpSession object.</span><br><span class="line">#servletContext : (only in Web Contexts) the ServletContext object.</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h3 id="4-4-SpringMVC自动配置功能"><a href="#4-4-SpringMVC自动配置功能" class="headerlink" title="4.4 SpringMVC自动配置功能"></a>4.4 SpringMVC自动配置功能</h3><p>SpringBoot文档地址：<a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications" target="_blank" rel="noopener">官方文档地址</a></p>
<h4 id="4-4-1-SpringMVC自动配置项"><a href="#4-4-1-SpringMVC自动配置项" class="headerlink" title="4.4.1 SpringMVC自动配置项"></a>4.4.1 SpringMVC自动配置项</h4><p>SpringMVC自动配置：</p>
<ul>
<li>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</li>
<li>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-static-content" target="_blank" rel="noopener">later in this document</a>)).</li>
<li>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</li>
<li>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-message-converters" target="_blank" rel="noopener">later in this document</a>).</li>
<li>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features-spring-message-codes" target="_blank" rel="noopener">later in this document</a>).</li>
<li>Static <code>index.html</code> support.</li>
<li>Custom <code>Favicon</code> support (covered <a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-favicon" target="_blank" rel="noopener">later in this document</a>).</li>
<li>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-web-binding-initializer" target="_blank" rel="noopener">later in this document</a>).</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(ViewResolver<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(<span class="title">name</span> </span>= <span class="string">"viewResolver"</span>, value = ContentNegotiatingViewResolver<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ContentNegotiatingViewResolver</span> <span class="title">viewResolver</span>(<span class="title">BeanFactory</span> <span class="title">beanFactory</span>) </span>&#123;</span><br><span class="line">    ContentNegotiatingViewResolver resolver = <span class="keyword">new</span> ContentNegotiatingViewResolver();</span><br><span class="line">    resolver.setContentNegotiationManager(</span><br><span class="line">        beanFactory.getBean(ContentNegotiationManager<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    <span class="comment">// ContentNegotiatingViewResolver uses all the other view resolvers to locate</span></span><br><span class="line">    <span class="comment">// a view so it should have a high precedence</span></span><br><span class="line">    resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">    <span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Converter&lt;?, ?&gt; converter : getBeansOfType(Converter<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">        registry.addConverter(converter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (GenericConverter converter : getBeansOfType(GenericConverter<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">        registry.addConverter(converter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Formatter&lt;?&gt; formatter : getBeansOfType(Formatter<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">        registry.addFormatter(formatter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.messageConvertersProvider.ifAvailable((customConverters) -&gt; converters</span><br><span class="line">                                               .addAll(customConverters.getConverters()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果用户有配置(@Bean，@Component)，则使用组合配置；</li>
</ul>
<h4 id="4-4-2-扩展SpringMVC配置"><a href="#4-4-2-扩展SpringMVC配置" class="headerlink" title="4.4.2 扩展SpringMVC配置"></a>4.4.2 扩展SpringMVC配置</h4><p>添加一个配置类并且继承自WebMvcConfigurerAdapter。</p>
<p>将hello.do请求映射到hello.html视图：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 18-10-1 下午1:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        super.addViewControllers(registry);</span></span><br><span class="line">        registry.addViewController(<span class="string">"/hello.do"</span>).setViewName(<span class="string">"/hello.html"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>WebMvcAutoConfiguration是SpringMVC的自动配置类；</li>
<li>在做其他自动配置时会导入：@Import(EnableWebMvcConfiguration.class)。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>容器中所有的WebMvcConfiguration都会被调用。</p>
<p>所有的配置都会共同起作用。</p>
</li>
</ul>
<h4 id="4-4-3-全面接管SpringMVC"><a href="#4-4-3-全面接管SpringMVC" class="headerlink" title="4.4.3 全面接管SpringMVC"></a>4.4.3 全面接管SpringMVC</h4><p>在配置类中添加@EnableWebMvc：丢弃所有的自动配置，手动配置所有的配置。</p>
<p>原理：</p>
<p>WebMvc：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;DelegatingWebMvcConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableWebMvc</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DelegatingWebMvcConfiguration：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>WebMvcAutoConfiguration：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = Type.SERVLET)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">DispatcherServlet</span>.<span class="title">class</span>, <span class="title">WebMvcConfigurer</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">//容器中缺少此组件，该自动配置生效</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(<span class="title">WebMvcConfigurationSupport</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureOrder</span>(<span class="title">Ordered</span>.<span class="title">HIGHEST_PRECEDENCE</span> + 10)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(</span>&#123; DispatcherServletAutoConfiguration<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ValidationAutoConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-5-引入资源"><a href="#4-5-引入资源" class="headerlink" title="4.5 引入资源"></a>4.5 引入资源</h3><p>SpringBoot中使用<strong>webjars</strong>引入jquery和bootstrap之类的资源：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;webjars/bootstrap/4.1.3/css/bootstrap.css&#125;"</span> <span class="attr">th:type</span>=<span class="string">"text/css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>即使更换项目访问名也可以正常加载静态资源。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 18-10-1 下午1:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        super.addViewControllers(registry);</span></span><br><span class="line">        registry.addViewController(<span class="string">"/hello.do"</span>).setViewName(<span class="string">"/hello.html"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"/hello.html"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurerAdapter <span class="title">webMvcConfigurerAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"/hello.html"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-6-国际化"><a href="#4-6-国际化" class="headerlink" title="4.6 国际化"></a>4.6 国际化</h3><ol>
<li><strong>编写国际化配置文件；</strong></li>
<li>使用ResourceBundleMessageSource管理国际化资源文件；</li>
<li>在页面使用fmt:message取出国际化内容。</li>
</ol>
<p>配置如下图：</p>
<p><img src="https://image.youyou-2608.com/springboot/international.png" alt></p>
<p>SpringBoot自动配置（MessageSourceAutoConfiguration.java）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="comment">//类路径下配置文件spring.messages</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.messages"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSourceProperties <span class="title">messageSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MessageSourceProperties();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MessageSourceProperties properties = messageSourceProperties();</span><br><span class="line">    ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;</span><br><span class="line">        <span class="comment">//设置国际化资源文件的基础名（去除国际语言代码）</span></span><br><span class="line">        messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(</span><br><span class="line">            StringUtils.trimAllWhitespace(properties.getBasename())));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (properties.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        messageSource.setDefaultEncoding(properties.getEncoding().name());</span><br><span class="line">    &#125;</span><br><span class="line">    messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());</span><br><span class="line">    Duration cacheDuration = properties.getCacheDuration();</span><br><span class="line">    <span class="keyword">if</span> (cacheDuration != <span class="keyword">null</span>) &#123;</span><br><span class="line">        messageSource.setCacheMillis(cacheDuration.toMillis());</span><br><span class="line">    &#125;</span><br><span class="line">    messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());</span><br><span class="line">    messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());</span><br><span class="line">    <span class="keyword">return</span> messageSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置配置文件地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.message=login</span><br></pre></td></tr></table></figure>

<p>页面中获取国际化资源：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">lable</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:message</span>=<span class="string">"#&#123;login.tip&#125;"</span>&gt;</span>Tips<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lable</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:message</span>=<span class="string">"#&#123;login.username&#125;"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lable</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:message</span>=<span class="string">"#&#123;login.password&#125;"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lable</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:message</span>=<span class="string">"#&#123;login.remember&#125;"</span>&gt;</span>remember<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>浏览器根据浏览器语言设置的信息自动切换国际化。</p>
<p>SpringMVC区域信息组件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mvc"</span>, name = <span class="string">"locale"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties</span><br><span class="line">        .getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    &#125;</span><br><span class="line">    AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">    localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    <span class="keyword">return</span> localeResolver;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认根据请求头获取的区域信息展示国际化信息。</span></span><br></pre></td></tr></table></figure>

<p><strong>可以在请求参数上携带区域信息实现国际化：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://localhost:8080/hello.do?language=zh_CN</span><br><span class="line">https://localhost:8080/hello.do?language=en_US</span><br></pre></td></tr></table></figure>

<p>手动配置区域信息解析器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.LocaleResolver;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 18-10-3 下午4:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>&#123;</span><br><span class="line">        String language = httpServletRequest.getParameter(<span class="string">"language"</span>);</span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(language)) &#123;</span><br><span class="line">            String[] regionInfo = language.split(<span class="string">"_"</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(regionInfo[<span class="number">0</span>], regionInfo[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-7-拦截器"><a href="#4-7-拦截器" class="headerlink" title="4.7 拦截器"></a>4.7 拦截器</h3><ul>
<li>PostMapping()：RestfulAPI注解；</li>
<li>开发期间禁用Thymeleaf的缓存：spring.thymeleaf.cache=false；</li>
<li>错误消息的显示；</li>
<li>防止表单重复提交，添加视图视图映射后，使用重定向。</li>
<li>使用拦截器进行身份校验；</li>
<li>编写拦截器，在配置类中注册拦截器。</li>
<li>页面中使用Thymeleaf获取值。</li>
</ul>
<hr>
<h3 id="4-8-CRUD实验"><a href="#4-8-CRUD实验" class="headerlink" title="4.8 CRUD实验"></a>4.8 CRUD实验</h3><h4 id="4-8-1-实验要求"><a href="#4-8-1-实验要求" class="headerlink" title="4.8.1 实验要求"></a>4.8.1 实验要求</h4><p>实验要求：</p>
<ol>
<li><p>RestfulAPI风格：</p>
<ol>
<li>URI：/资源名称/资源标识；</li>
<li>HTTP请求方式区分对资源的CRUD操作；</li>
</ol>
<table>
<thead>
<tr>
<th>操作</th>
<th>普通CRUD</th>
<th>RestfulCRUD</th>
</tr>
</thead>
<tbody><tr>
<td>查询</td>
<td>getEmp</td>
<td>emp—GET</td>
</tr>
<tr>
<td>添加</td>
<td>addEmp?xxx</td>
<td>emp—POST</td>
</tr>
<tr>
<td>修改</td>
<td>updateEmp?id=xxx&amp;xxx=xxx</td>
<td>emp/{id}—PUT</td>
</tr>
<tr>
<td>删除</td>
<td>deleteEmp?id=1</td>
<td>emp/{id}—DELETE</td>
</tr>
</tbody></table>
</li>
</ol>
<ol>
<li><p>实验的请求架构：</p>
<table>
<thead>
<tr>
<th></th>
<th>请求URI</th>
<th>请求方式</th>
</tr>
</thead>
<tbody><tr>
<td>查询所有的员工</td>
<td>emps</td>
<td>GET</td>
</tr>
<tr>
<td>查询某个员工</td>
<td>emp/{id}</td>
<td>GET</td>
</tr>
<tr>
<td>来到添加界面</td>
<td>emp</td>
<td>GET</td>
</tr>
<tr>
<td>添加员工</td>
<td>emp</td>
<td>POST</td>
</tr>
<tr>
<td>来到修改界面</td>
<td>emp/{id}</td>
<td>PUT</td>
</tr>
<tr>
<td>修改员工</td>
<td>emp</td>
<td>PUT</td>
</tr>
<tr>
<td>删除员工</td>
<td>emp/{id}</td>
<td>DELETE</td>
</tr>
</tbody></table>
</li>
</ol>
<h4 id="4-8-2-公共页面抽取—列表页"><a href="#4-8-2-公共页面抽取—列表页" class="headerlink" title="4.8.2 公共页面抽取—列表页"></a>4.8.2 公共页面抽取—列表页</h4><ol>
<li><p>利用Thymeleaf抽取公共页面；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line">&amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>“~{templatename::selector}”：模板名选择器；</p>
<p>~{templatename::fragmentname}：模板名：片断名。</p>
</li>
<li><p>默认效果：</p>
<p>insert片段都在div标签中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>三种引入功能片段的th属性：</p>
<ol>
<li><strong>th:insert：将公共片段整个插入到声明引入的元素中；</strong></li>
<li><strong>th:replace：将声明引入的元素替换为公共片段；</strong></li>
<li><strong>th:include：将被引入的片段的内容包含进这个标签中。</strong></li>
</ol>
</li>
</ol>
<hr>
<h4 id="4-8-3-链接高亮-amp-列表完成"><a href="#4-8-3-链接高亮-amp-列表完成" class="headerlink" title="4.8.3 链接高亮&amp;列表完成"></a>4.8.3 链接高亮&amp;列表完成</h4><p><img src="https://image.youyou-2608.com/springboot/paramterizable.png" alt></p>
<p><strong>实现方法：引入公共片段时传入相关参数，公共片段根据参数高亮相关部分。</strong></p>
<p>Thymeleaf日期工具对象(文档附录 &gt; dates)：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;#dates.format(date, &apos;dd/MMM/yyyy HH:mm&apos;)&#125;</span><br><span class="line">$&#123;#dates.arrayFormat(datesArray, &apos;dd/MMM/yyyy HH:mm&apos;)&#125;</span><br><span class="line">$&#123;#dates.listFormat(datesList, &apos;dd/MMM/yyyy HH:mm&apos;)&#125;</span><br><span class="line">$&#123;#dates.setFormat(datesSet, &apos;dd/MMM/yyyy HH:mm&apos;)&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="4-8-4-添加员工-gt-来到添加页面"><a href="#4-8-4-添加员工-gt-来到添加页面" class="headerlink" title="4.8.4 添加员工 &gt; 来到添加页面"></a>4.8.4 添加员工 &gt; 来到添加页面</h4><ol>
<li>添加表单：Bootstrap官网模板直接复制；</li>
<li>通过 *<em>添加 *</em>按钮跳转到添加页面；</li>
<li>使用th:each完成部门的遍历；</li>
</ol>
<hr>
<h4 id="4-8-5-添加员工-gt-完成添加"><a href="#4-8-5-添加员工-gt-完成添加" class="headerlink" title="4.8.5 添加员工 &gt; 完成添加"></a>4.8.5 添加员工 &gt; 完成添加</h4><ol>
<li>完成添加后 <strong>重定向</strong> 至列表页面（forward或者redirect）；</li>
<li>提交的数据格式问题：日期格式：<ol>
<li>日期格式化：SpringMVC将页面提交的值需要转换成指定的类型；</li>
<li><strong>在配置文件中自定义表单提交的日期格式。</strong></li>
</ol>
</li>
</ol>
<hr>
<h4 id="4-8-6-修改员工信息"><a href="#4-8-6-修改员工信息" class="headerlink" title="4.8.6 修改员工信息"></a>4.8.6 修改员工信息</h4><ol>
<li>配置HiddenHttpMethodFilter；</li>
</ol>
<hr>
<h4 id="4-8-7-删除员工"><a href="#4-8-7-删除员工" class="headerlink" title="4.8.7 删除员工"></a>4.8.7 删除员工</h4><hr>
<h3 id="4-9-定制错误页面"><a href="#4-9-定制错误页面" class="headerlink" title="4.9 定制错误页面"></a>4.9 定制错误页面</h3><ol>
<li><p>默认出错处理：返回一个默认的错误处理页面：在页面共享信息；</p>
</li>
<li><p>如果是其他客户端，默认响应一个json数据；</p>
</li>
<li><p>可以参照ErrorAutoConfiguration，错误处理的自动配置，在容器中添加如下组件：</p>
<ol>
<li><p>DefaultErrorAttributes；</p>
</li>
<li><p>BasicErrorController：处理默认的error错误请求；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(produces = <span class="string">"text/html"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                              HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    HttpStatus status = getStatus(request);</span><br><span class="line">    Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(</span><br><span class="line">        request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">    response.setStatus(status.value());</span><br><span class="line">    ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">    <span class="keyword">return</span> (modelAndView != <span class="keyword">null</span>) ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ErrorPageCustomizer：系统出现错误，来到/error请求进行处理：web.xml；</p>
</li>
<li><p>DefaultErrorViewResolver；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    Map&lt;Series, String&gt; views = <span class="keyword">new</span> EnumMap&lt;&gt;(Series<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    views.put(Series.CLIENT_ERROR, <span class="string">"4xx"</span>);</span><br><span class="line">    views.put(Series.SERVER_ERROR, <span class="string">"5xx"</span>);</span><br><span class="line">    SERIES_VIEWS = Collections.unmodifiableMap(views);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    ModelAndView modelAndView = resolve(String.valueOf(status), model);</span><br><span class="line">    <span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">        modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line">    TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders</span><br><span class="line">        .getProvider(errorViewName, <span class="keyword">this</span>.applicationContext);</span><br><span class="line">    <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<p>定制自定义错误页面：</p>
<ol>
<li><p>有模板引擎的情况下：error/状态码，将错误命名为status_code.html放在classpath:error/下，发生此错误会来到该页面；</p>
<p>可以使用4xx和5xx作为错误页面的文件名来匹配该类型的所有错误，精确匹配优先；</p>
<p>页面能获取的信息：</p>
<ol>
<li>timestamp；</li>
<li>message；</li>
<li>status code；</li>
<li>exception；</li>
<li>errors。</li>
</ol>
</li>
<li><p>没有模板引擎：静态资源文件夹下寻找。</p>
</li>
</ol>
<p>定制自定义json数据：</p>
<ol>
<li><p>没有自适应效果，浏览器和客户端返回的都是json数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span></span><br><span class="line"><span class="meta">@Response</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>自适应效果：转发给/error进行自适应效果处理，给request中传入自己的参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(produces = <span class="string">"text/html"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                              HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    HttpStatus status = getStatus(request);</span><br><span class="line">    Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(</span><br><span class="line">        request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">    response.setStatus(status.value());</span><br><span class="line">    ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">    <span class="keyword">return</span> (modelAndView != <span class="keyword">null</span>) ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">    Map&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class="line">                                                  isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">    HttpStatus status = getStatus(request);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(body, status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将自定义错误信息携带：</p>
<p>响应数据由getErrorAttributes()获取：</p>
<ol>
<li><p>编写一个ErrorController的实现类或者AbstractErrorController的子类，放在容器中；</p>
</li>
<li><p>页面上能用的数据或者json返回的数据都是errorAttributes.getErrorAttributes得到；DefaultErrorAttributes.getErrorAttributes()进行错误处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.error.DefaultErrorAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 18-10-7 下午4:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorHandler</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            org.springframework.web.reactive.function.server.ServerRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getErrorAttributes(request, includeStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<hr>
<h2 id="第五章-配置嵌入式Servlet容器"><a href="#第五章-配置嵌入式Servlet容器" class="headerlink" title="第五章 配置嵌入式Servlet容器"></a>第五章 配置嵌入式Servlet容器</h2><hr>
<h3 id="5-1-定制嵌入式Servlet容器"><a href="#5-1-定制嵌入式Servlet容器" class="headerlink" title="5.1 定制嵌入式Servlet容器"></a>5.1 定制嵌入式Servlet容器</h3><p>默认使用嵌入式tomcat8.5.4作为嵌入式的Servlet容器；</p>
<p><img src="https://image.youyou-2608.com/springboot/tomcat.png" alt></p>
<ol>
<li>如何定制嵌入式的Servlet容器？</li>
<li>SpringBoot能否支持其他的Servlet容器？</li>
</ol>
<ol>
<li>修改和Server有关的配置(server.properties)：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server.port=8080</span><br><span class="line">servet.context-path=/path</span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong>编写一个EmbeddedServletContainerCustomizer来修改嵌入式Servlet容器：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainerCustomizer <span class="title">embeddedServletContainerCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class="line">        container.setPort(<span class="number">8083</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>与容器相关的类：ServerProperties.class</p>
<p>SpringBoot2.0：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedTomcatConfig</span> <span class="keyword">implements</span> <span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">ConfigurableServletWebServerFactory</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableServletWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">        factory.setContextPath(<span class="string">"/test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-2-注册Servlet容器三大组件"><a href="#5-2-注册Servlet容器三大组件" class="headerlink" title="5.2 注册Servlet容器三大组件"></a>5.2 注册Servlet容器三大组件</h3><p>Servlet：ServletRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean&lt;MyServlet&gt; <span class="title">myServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyServlet(), <span class="string">"/servlet.do"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Filter：FilterRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;MyFilter&gt; <span class="title">myFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FilterRegistrationBean&lt;MyFilter&gt; registrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">    registrationBean.setFilter(<span class="keyword">new</span> MyFilter());</span><br><span class="line">    registrationBean.setUrlPatterns(Arrays.asList(<span class="string">"/hello.do"</span>, <span class="string">"/nihao.do"</span>));</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Listener：ServletListenerRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean&lt;MyListener&gt; <span class="title">myListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean&lt;MyListener&gt;();</span><br><span class="line">    registrationBean.setListener(<span class="keyword">new</span> MyListener());</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="5-3-嵌入式Servlet容器自动配置原理"><a href="#5-3-嵌入式Servlet容器自动配置原理" class="headerlink" title="5.3 嵌入式Servlet容器自动配置原理"></a>5.3 嵌入式Servlet容器自动配置原理</h3><p>EmbeddedWebServerFactoryCustomizerAutoConfiguration.class</p>
<p>Tomcat：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Tomcat<span class="class">.<span class="keyword">class</span>, <span class="title">UpgradeProtocol</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">static</span> <span class="title">class</span> <span class="title">TomcatWebServerFactoryCustomizerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TomcatWebServerFactoryCustomizer <span class="title">tomcatWebServerFactoryCustomizer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Environment environment, ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TomcatWebServerFactoryCustomizer(environment, serverProperties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Jetty：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Server<span class="class">.<span class="keyword">class</span>, <span class="title">Loader</span>.<span class="title">class</span>, <span class="title">WebAppContext</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">static</span> <span class="title">class</span> <span class="title">JettyWebServerFactoryCustomizerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JettyWebServerFactoryCustomizer <span class="title">jettyWebServerFactoryCustomizer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Environment environment, ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JettyWebServerFactoryCustomizer(environment, serverProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Undertow：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Undertow<span class="class">.<span class="keyword">class</span>, <span class="title">SslClientAuthMode</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">static</span> <span class="title">class</span> <span class="title">UndertowWebServerFactoryCustomizerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UndertowWebServerFactoryCustomizer <span class="title">undertowWebServerFactoryCustomizer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Environment environment, ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UndertowWebServerFactoryCustomizer(environment, serverProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件：Server.properties：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"server"</span>, ignoreUnknownFields = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerProperties</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>ConfigurableTomcatWebServerFactory.class：</p>
<p><img src="https://image.youyou-2608.com/springboot/hy.png" alt></p>
<hr>
<h3 id="5-4-使用外置的Servlet容器"><a href="#5-4-使用外置的Servlet容器" class="headerlink" title="5.4 使用外置的Servlet容器"></a>5.4 使用外置的Servlet容器</h3><p>内置的servlet容器不支持jsp；</p>
<ol>
<li>向项目中导入tomcat服务器，创建web.xml文件，添加application.properties配置；打包方式为war包；</li>
</ol>
<p>必须编写一个ServletInitializer文件；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources($&#123;MainClass&#125;<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>将嵌入式spring-boot-start-web内嵌的tomcat的scope指定为provided；</li>
</ol>
<hr>
<h2 id="第六章-Docker技术"><a href="#第六章-Docker技术" class="headerlink" title="第六章 Docker技术"></a>第六章 Docker技术</h2><h3 id="6-1-docker简介"><a href="#6-1-docker简介" class="headerlink" title="6.1 docker简介"></a>6.1 docker简介</h3><p>概念：Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、<a href="http://www.whatis.com.cn/word_5275.htm" target="_blank" rel="noopener">bare metal</a>、OpenStack 集群和其他的基础应用平台。 </p>
<p><a href="http://www.docker.org.cn/book/docker/what-is-docker-16.html" target="_blank" rel="noopener">Docker入门</a></p>
<p><img src="https://image.youyou-2608.com/springboot/image_docker.png" alt></p>
<hr>
<h3 id="6-2-Docker核心概念"><a href="#6-2-Docker核心概念" class="headerlink" title="6.2 Docker核心概念"></a>6.2 Docker核心概念</h3><ol>
<li>docker主机(Host)：安装了Docker程序的机器(Docker直接安装在操作系统之上)；</li>
<li>docker客户端(Client)：连接Docker主机进行操作；</li>
<li>docker仓库(Registry)：用来保存各种打包好的软件镜像；</li>
<li>docker镜像(Images)：软件打包好的镜像，放在docker仓库中；</li>
<li>docker容器(Container)：镜像启动后的实例称为一个容器，容器是独立运行的一个或一组应用；</li>
</ol>
<p>使用docker容器的步骤：</p>
<ol>
<li>安装docker；</li>
<li>去docker仓库找到这个软件对应的镜像；</li>
<li>使用docker运行这个镜像，就会生成一个Docker镜像容器；</li>
<li>对容器的启动和停止就是对软件的启动和停止。</li>
</ol>
<hr>
<h3 id="6-3-Docker常用操作"><a href="#6-3-Docker常用操作" class="headerlink" title="6.3 Docker常用操作"></a>6.3 Docker常用操作</h3><p>镜像官方网站：<a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search mysql     //搜索镜像</span><br><span class="line">docker pull mysql:5.5   //拉取镜像</span><br><span class="line">docker images           //查看本地所有镜像</span><br><span class="line">docker rmi images-id    //删除本地镜像</span><br></pre></td></tr></table></figure>

<p><img src="https://image.youyou-2608.com/springboot/docker_run.png" alt></p>
<p><strong>各个独立的容器互不干扰，独立运行。</strong></p>
<hr>
<h3 id="6-4-环境搭建"><a href="#6-4-环境搭建" class="headerlink" title="6.4 环境搭建"></a>6.4 环境搭建</h3><h4 id="6-4-1-安装MySQL："><a href="#6-4-1-安装MySQL：" class="headerlink" title="6.4.1 安装MySQL："></a>6.4.1 安装MySQL：</h4><p>启动一个MySQL实例(需要指定密码和<strong>端口映射</strong>)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -p port --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span></span><br></pre></td></tr></table></figure>

<p>官方文档：<a href="https://hub.docker.com/_/mysql/" target="_blank" rel="noopener">MySQL文档</a></p>
<p>几个高级操作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">使用配置文件：</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span></span><br><span class="line"></span><br><span class="line">不适用配置文件：</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span></span><br></pre></td></tr></table></figure>

<h4 id="6-4-2-安装Redis"><a href="#6-4-2-安装Redis" class="headerlink" title="6.4.2 安装Redis"></a>6.4.2 安装Redis</h4><h4 id="6-4-3-安装RabbitMQ"><a href="#6-4-3-安装RabbitMQ" class="headerlink" title="6.4.3 安装RabbitMQ"></a>6.4.3 安装RabbitMQ</h4><h4 id="6-4-4-安装ElasticSearch"><a href="#6-4-4-安装ElasticSearch" class="headerlink" title="6.4.4 安装ElasticSearch"></a>6.4.4 安装ElasticSearch</h4><hr>
<h2 id="第七章-SpringBoot与数据库访问"><a href="#第七章-SpringBoot与数据库访问" class="headerlink" title="第七章 SpringBoot与数据库访问"></a>第七章 SpringBoot与数据库访问</h2><p>SpringBoot与数据访问相关的场景启动器：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring-boot-starter-data-cassandra</span><br><span class="line"></span><br><span class="line">Starter for using Cassandra distributed database and Spring Data Cassandra</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-cassandra-reactive</span><br><span class="line"></span><br><span class="line">Starter for using Cassandra distributed database and Spring Data Cassandra Reactive</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-couchbase</span><br><span class="line"></span><br><span class="line">Starter for using Couchbase document-oriented database and Spring Data Couchbase</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-couchbase-reactive</span><br><span class="line"></span><br><span class="line">Starter for using Couchbase document-oriented database and Spring Data Couchbase Reactive</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-elasticsearch</span><br><span class="line"></span><br><span class="line">Starter for using Elasticsearch search and analytics engine and Spring Data Elasticsearch</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-jpa</span><br><span class="line"></span><br><span class="line">Starter for using Spring Data JPA with Hibernate</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-ldap</span><br><span class="line"></span><br><span class="line">Starter for using Spring Data LDAP</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-mongodb</span><br><span class="line"></span><br><span class="line">Starter for using MongoDB document-oriented database and Spring Data MongoDB</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-mongodb-reactive</span><br><span class="line"></span><br><span class="line">Starter for using MongoDB document-oriented database and Spring Data MongoDB Reactive</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-neo4j</span><br><span class="line"></span><br><span class="line">Starter for using Neo4j graph database and Spring Data Neo4j</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-redis</span><br><span class="line"></span><br><span class="line">Starter for using Redis key-value data store with Spring Data Redis and the Lettuce client</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-redis-reactive</span><br><span class="line"></span><br><span class="line">Starter for using Redis key-value data store with Spring Data Redis reactive and the Lettuce client</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-rest</span><br><span class="line"></span><br><span class="line">Starter for exposing Spring Data repositories over REST using Spring Data REST</span><br><span class="line"></span><br><span class="line">Pom</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-solr</span><br><span class="line"></span><br><span class="line">Starter for using the Apache Solr search platform with Spring Data Solr</span><br><span class="line"></span><br><span class="line">Pom</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="7-1-整合JDBC与数据源"><a href="#7-1-整合JDBC与数据源" class="headerlink" title="7.1 整合JDBC与数据源"></a>7.1 整合JDBC与数据源</h3><p>建表语句执行：classpath:schema-*.sql</p>
<p>数据操作语句：classpath:data-*.sql</p>
<p>也可以使用schema在application.yml中自定义数据文件地址。</p>
<hr>
<h3 id="7-2-Druid数据源配置"><a href="#7-2-Druid数据源配置" class="headerlink" title="7.2 Druid数据源配置"></a>7.2 Druid数据源配置</h3><ol>
<li>引入依赖；</li>
<li>配置属性。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">type指定数据源</span><br></pre></td></tr></table></figure>

<p>添加一个配置类，将Druid配置映射到数据源。</p>
<p>结合过滤器和Servlet设置Druid监控。</p>
<hr>
<h3 id="7-3-整合MyBatis"><a href="#7-3-整合MyBatis" class="headerlink" title="7.3 整合MyBatis"></a>7.3 整合MyBatis</h3><p>启动器：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mybatis-spring-boot-starter</span><br></pre></td></tr></table></figure>

<p>获取插入数据库的记录的ID：</p>
<p>@Options(userGeneratedKeys=, keyProperty=）</p>
<p>开启MyBatis驼峰命名：</p>
<p>写一个配置类，实现ConfigurationCustomizer接口中的customize()方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">configuration.setMapUnderscopeToCamelCase(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<p>批量扫描所有的@Mapper注解：</p>
<p>@MapperScan(value=””)</p>
<p>相关配置文件见官网文档。</p>
<p>全局配置文件配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mybatis-config-location:classpath:mybatis/config.xml</span><br><span class="line">mybatis-config-mapper:class:mybatis/mapper.xml</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="7-4-SpringData数据访问JPA"><a href="#7-4-SpringData数据访问JPA" class="headerlink" title="7.4 SpringData数据访问JPA"></a>7.4 SpringData数据访问JPA</h3>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>深田恭子的日剧跑</title>
    <url>/2018/12/02/%E6%B7%B1%E7%94%B0%E6%81%AD%E5%AD%90%E7%9A%84%E6%97%A5%E5%89%A7%E8%B7%91/</url>
    <content><![CDATA[<p>深田恭子的日剧跑—Bilibili</p>
<iframe src="//player.bilibili.com/player.html?aid=9855476&cid=16293423&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="470px" width="700px"> </iframe>



<iframe src="//player.bilibili.com/player.html?aid=9921445&cid=16402294&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="470px" width="700px"> </iframe>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>dubbo学习笔记</title>
    <url>/2018/12/02/dubbo%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>dubbo学习笔记</p>
<p><a href="http://dubbo.apache.org/zh-cn/index.html" target="_blank" rel="noopener">dubbo中文官方网站</a></p>
<p><a href="http://dubbo.apache.org/zh-cn/docs/user/quick-start.html" target="_blank" rel="noopener">dubbo官方文档</a></p>
<a id="more"></a>



<h3 id="分布式系统及其演变历程"><a href="#分布式系统及其演变历程" class="headerlink" title="分布式系统及其演变历程"></a>分布式系统及其演变历程</h3><p><img src="http://dubbo.apache.org/docs/zh-cn/user/sources/images/dubbo-architecture-roadmap.jpg" alt="dubbo"></p>
<p>单一应用架构：</p>
<p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p>
<p>垂直应用架构：</p>
<p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p>
<p>分布式服务架构：</p>
<p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</p>
<p>流动计算架构：</p>
<p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p>
<h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><p>RPC（Remote Procedure Call）—<a href="https://baike.baidu.com/item/%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8/7854346" target="_blank" rel="noopener">远程过程调用</a>，它是一种通过<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C/143243" target="_blank" rel="noopener">网络</a>从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。<a href="https://baike.baidu.com/item/RPC%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">RPC协议</a>假定某些<a href="https://baike.baidu.com/item/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/8048821" target="_blank" rel="noopener">传输协议</a>的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/9636548" target="_blank" rel="noopener">网络通信</a>模型中，RPC跨越了<a href="https://baike.baidu.com/item/%E4%BC%A0%E8%BE%93%E5%B1%82/4329536" target="_blank" rel="noopener">传输层</a>和<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E5%B1%82/4329788" target="_blank" rel="noopener">应用层</a>。RPC使得开发包括网络<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F" target="_blank" rel="noopener">分布式</a>多程序在内的应用程序更加容易。</p>
<p>远程过程调用：序列化和网络通信。</p>
<h3 id="特性一览"><a href="#特性一览" class="headerlink" title="特性一览"></a>特性一览</h3><ul>
<li>面向接口代理的高性能RPC调用</li>
<li>智能负载均衡</li>
<li>服务自动注册与发现</li>
<li>高度可扩展能力</li>
<li>运行期流量调度</li>
<li>可视化的服务治理与运维</li>
</ul>
<h3 id="dubbo应用架构"><a href="#dubbo应用架构" class="headerlink" title="dubbo应用架构"></a>dubbo应用架构</h3><p><img src="http://dubbo.apache.org/img/architecture.png" alt="高性能Java RPC框架"></p>
<h3 id="dubbo快速启动"><a href="#dubbo快速启动" class="headerlink" title="dubbo快速启动"></a>dubbo快速启动</h3><p><a href="http://dubbo.apache.org/zh-cn/docs/user/quick-start.html" target="_blank" rel="noopener">dubbo快速启动</a></p>
<h3 id="dubbo实例"><a href="#dubbo实例" class="headerlink" title="dubbo实例"></a>dubbo实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/12/2 下午7:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAddress</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line">    <span class="keyword">private</span> String consignee;</span><br><span class="line">    <span class="keyword">private</span> String phoneNum;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isDefault;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserAddress</span><span class="params">(Integer id, String userId, String userAddress, String consignee, String phoneNum,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">boolean</span> isDefault)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.userAddress = userAddress;</span><br><span class="line">        <span class="keyword">this</span>.consignee = consignee;</span><br><span class="line">        <span class="keyword">this</span>.phoneNum = phoneNum;</span><br><span class="line">        <span class="keyword">this</span>.isDefault = isDefault;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"UserAddress&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", userId='"</span> + userId + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", userAddress='"</span> + userAddress + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", consignee='"</span> + consignee + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", phoneNum='"</span> + phoneNum + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", isDefault="</span> + isDefault +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/12/2 下午7:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">initOrder</span><span class="params">(String userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bean.UserAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/12/2 下午7:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;UserAddress&gt; <span class="title">getUserAddressList</span><span class="params">(String userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bean.UserAddress;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/12/2 下午7:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">getUserAddressList</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        UserAddress userAddress1 = <span class="keyword">new</span> UserAddress(<span class="number">1</span>, <span class="string">"001"</span>, <span class="string">"人民广场"</span>, <span class="string">"100"</span>, <span class="string">"230189"</span>, <span class="keyword">true</span>);</span><br><span class="line">        UserAddress userAddress2 = <span class="keyword">new</span> UserAddress(<span class="number">2</span>, <span class="string">"002"</span>, <span class="string">"文化公园"</span>, <span class="string">"101"</span>, <span class="string">"230190"</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(userAddress1, userAddress2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dubbo.service.consumer.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/12/2 下午8:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">initOrder</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUserAddressList(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dubbo.service.consumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/12/2 下午9:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/initOrder.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">initOrder</span><span class="params">(@RequestParam(<span class="string">"userId"</span>)</span> String userId) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.initOrder(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dubbo.service.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DubboDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Spring boot application</span><br><span class="line">spring.application.name = dubbo-provider-demo</span><br><span class="line">server.port = 9090</span><br><span class="line">management.port = 9091</span><br><span class="line"></span><br><span class="line"># Base packages to scan Dubbo Components (e.g., @Service, @Reference)</span><br><span class="line">dubbo.scan.basePackages  = com.alibaba.boot.dubbo.demo.provider.service</span><br><span class="line"></span><br><span class="line"># Dubbo Config properties</span><br><span class="line">## ApplicationConfig Bean</span><br><span class="line">dubbo.application.id = dubbo-provider-demo</span><br><span class="line">dubbo.application.name = dubbo-provider-demo</span><br><span class="line"></span><br><span class="line">## ProtocolConfig Bean</span><br><span class="line">dubbo.protocol.id = dubbo</span><br><span class="line">dubbo.protocol.name = dubbo</span><br><span class="line">dubbo.protocol.port = 12345</span><br><span class="line"></span><br><span class="line">## RegistryConfig Bean</span><br><span class="line">dubbo.registry.id = my-registry</span><br><span class="line">dubbo.registry.address = N/A</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>dubbo</category>
      </categories>
      <tags>
        <tag>dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习笔记-第三章-高级装配</title>
    <url>/2018/11/24/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%89%E7%AB%A0-%E9%AB%98%E7%BA%A7%E8%A3%85%E9%85%8D/</url>
    <content><![CDATA[<p>第三章：高级装配</p>
<p>本章内容：</p>
<ul>
<li>Spring profile</li>
<li>条件化的bean声明</li>
<li>自动装配与歧义性</li>
<li>bean的作用域</li>
<li>Spring表达式语言</li>
</ul>
<hr>
<h3 id="3-1-环境与profile"><a href="#3-1-环境与profile" class="headerlink" title="3.1 环境与profile"></a>3.1 环境与profile</h3><p>在软件开发的不同阶段需要不同的环境和配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(destroyMethod = <span class="string">"shutdown"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EmbeddedDatabaseBuilder()</span><br><span class="line">        .addScript(<span class="string">"classpath:ch3.sql"</span>)</span><br><span class="line">        .addScript(<span class="string">"classpath:ch3.1.sql"</span>)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>



<p>为了适应环境更换的需求，可以将所需要的所有的配置类配置到每个bean中，然后在构建阶段选择需要使用的bean，但是从开发环境切换到生产环境时可能会发生问题。</p>
<h4 id="3-1-1-配置profile-bean"><a href="#3-1-1-配置profile-bean" class="headerlink" title="3.1.1 配置profile bean"></a>3.1.1 配置profile bean</h4><p>Spring为此种场景提供了profile功能。</p>
<p>使用profile注解来声明在合适的阶段使用合适的bean。将所有的bean整理到一个profile中，确保在需要的时候active相应的bean。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ch3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jndi.JndiObjectFactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/24 下午1:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(destroyMethod = <span class="string">"shutdown"</span>)</span><br><span class="line">    <span class="meta">@Profile</span>(<span class="string">"dev"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">embeddedDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EmbeddedDatabaseBuilder()</span><br><span class="line">                .setType(EmbeddedDatabaseType.H2)</span><br><span class="line">                .addScript(<span class="string">"classpath:test.sql"</span>)</span><br><span class="line">                .addScript(<span class="string">"classpath:test1.sql"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile</span>(<span class="string">"prod"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">jndiDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JndiObjectFactoryBean jndiObjectFactoryBean =</span><br><span class="line">                <span class="keyword">new</span> JndiObjectFactoryBean();</span><br><span class="line">        jndiObjectFactoryBean.setJndiName(<span class="string">"jndi/myDS"</span>);</span><br><span class="line">        jndiObjectFactoryBean.setResourceRef(<span class="keyword">true</span>);</span><br><span class="line">        jndiObjectFactoryBean.setProxyInterface(javax.sql.DataSource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> (DataSource) jndiObjectFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>虽然所有的bean都被声明在一个profile里，但是只有当指定的profile被激活时，相应的bean才会被创建，没有指定profile的bean始终都会被创建，与激活的profile没有关系。</strong></p>
<p>在XML中配置profile：</p>
<p>可以通过beans元素的profile属性，在xml中配置profile。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">profile</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbc:embedded-database</span> <span class="attr">id</span>=<span class="string">"dataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">"classpath:test.sql"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">"classpath:test1.sql"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbc:embedded-database</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>只有profile属性与当前激活的profile相匹配的配置文件才会被用到。</strong></p>
<p>重复使用beans属性指定多个profile：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans</span> <span class="attr">profile</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbc:embedded-database</span> <span class="attr">id</span>=<span class="string">"dataSource"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">"classpath:test.sql"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">"classpath:test1.sql"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbc:embedded-database</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">beans</span> <span class="attr">profile</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jee:jndi-lookup</span> <span class="attr">jndi-name</span>=<span class="string">"jdbc/MyDatabase"</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">resource-ref</span>=<span class="string">"true"</span> <span class="attr">proxy-interface</span>=<span class="string">"javax.sql.DataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>虽然id都一样，类型都是javax.sql.dataSource，但是只会创建指定profile的bean。</strong></p>
<h4 id="3-1-2-激活profile"><a href="#3-1-2-激活profile" class="headerlink" title="3.1.2 激活profile"></a>3.1.2 激活profile</h4><p>Spring在确定处于激活状态的profile时，依赖于两个独立的属性：</p>
<ul>
<li>spring.profiles.active</li>
<li>spring.profiles.default</li>
</ul>
<p>优先级从上到下，如果spring.profiles.active没有设置，则看spring.profiles.default，否则只会创建没有定义在profiles中的bean。</p>
<p>有多种方式设置这两个属性：</p>
<ul>
<li>作为DispatcherServlet的初始化参数</li>
<li>作为web应用的上下文参数</li>
<li>作为JNDI条目</li>
<li>作为环境变量</li>
<li>作为JVM属性</li>
<li>在集成测试类上使用@ActiveProfiles属性</li>
</ul>
<p>在web.xml配置文件中设置默认的profile：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>spring.profiles.default<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>spring.profiles.default<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>可以同时激活多个profile，以逗号分隔。</strong></p>
<p>使用profile进行测试：</p>
<p>Spring提供了@ActiveProfiles注解，用来指定测试时使用的profile。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJunit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span></span>=&#123;PersistenceTestConfig<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line">@ActiveProfiles("dev")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersistenceTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-2-条件化的bean"><a href="#3-2-条件化的bean" class="headerlink" title="3.2 条件化的bean"></a>3.2 条件化的bean</h3><p>需求：</p>
<ol>
<li>希望一个或多个bean只有在类路径下包含某个特定的库时才创建</li>
<li>希望某个bean在特定的bean声明之后再创建</li>
</ol>
<p>Spring 4引入了@Conditional注解，只有条件计算结果为true才会创建bean，否则不创建。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ch3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Condition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/24 下午2:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MagicExistsCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line">        Environment environment = conditionContext.getEnvironment();</span><br><span class="line">        <span class="keyword">return</span> environment.containsProperty(<span class="string">"magic"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Conditional</span>(MagicExistsCondition<span class="class">.<span class="keyword">class</span>)   //条件化创建<span class="title">bean</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">MagicBean</span> <span class="title">magicBean</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MagicBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ConditionContext接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConditionContext</span> </span>&#123;</span><br><span class="line">    <span class="function">BeanDefinitionRegistry <span class="title">getRegistry</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ConfigurableListableBeanFactory <span class="title">getBeanFactory</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Environment <span class="title">getEnvironment</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ResourceLoader <span class="title">getResourceLoader</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ClassLoader <span class="title">getClassLoader</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>getRegistry：根据返回值可以检查bean定义</li>
<li>getEnvirnment：检查环境变量</li>
<li>getResourceLoader：读取加载的资源</li>
<li>getClassLoader：加载并检查类是否存在</li>
</ul>
<p>AnnotatedTypeMetadata接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AnnotatedTypeMetadata</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAnnotated</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">getAnnotationAttributes</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">getAnnotationAttributes</span><span class="params">(String var1, <span class="keyword">boolean</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">MultiValueMap&lt;String, Object&gt; <span class="title">getAllAnnotationAttributes</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">MultiValueMap&lt;String, Object&gt; <span class="title">getAllAnnotationAttributes</span><span class="params">(String var1, <span class="keyword">boolean</span> var2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-3-处理启动装配的歧义性"><a href="#3-3-处理启动装配的歧义性" class="headerlink" title="3.3 处理启动装配的歧义性"></a>3.3 处理启动装配的歧义性</h3><p>仅有一个bean匹配所需结果时，自动装配才是有效的，如果有多个bean能够匹配结果的话，这种歧义性会阻碍Spring自动装配属性、构造器参数和方法参数。</p>
<p>Spring提供的解决方案：</p>
<ul>
<li>将可选bean中的其中一个声明为首选（primary）</li>
<li>使用限定符（qualifier）缩小可选范围</li>
</ul>
<h4 id="3-3-1-标示首选的bean"><a href="#3-3-1-标示首选的bean" class="headerlink" title="3.3.1 标示首选的bean"></a>3.3.1 标示首选的bean</h4><p>将其中一个可选的bean声明为首选可以避免自动装配的歧义性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDessert</span><span class="params">(Dessert dessert)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dessert = dessert;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IceCream</span> <span class="keyword">implements</span> <span class="title">Dessert</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dessert <span class="title">dessert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IceCream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"iceCream"</span> <span class="attr">class</span>=<span class="string">"com.test.dessert.IceCream"</span> <span class="attr">primary</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-2-限定自动装配的bean"><a href="#3-3-2-限定自动装配的bean" class="headerlink" title="3.3.2 限定自动装配的bean"></a>3.3.2 限定自动装配的bean</h4><p>设置首选bean的局限性在于 <strong>@Primary无法将可选方案范围限定到一个无歧义性的选项中</strong> ，当首选bean的数量超过一个时，无法进一步缩小限定范围。</p>
<p>@Qualifier注解是使用限定符的主要方式，与@Autowired协同使用，在注入时指定要注入的bean。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"iceCream"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDessert</span><span class="params">(Dessert dessert)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dessert = dessert;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Qualifier注解的参数就是想要注入的bean的id，所有使用@Component注解的类都会创建为bean，且id为首字母小写的类名。</p>
<p>基于默认id作为限定符是简单的，但是当类名被更改之后会使限定符失效。</p>
<p>创建自定义的限定符：</p>
<p>可以设置自己的限定符，而不依赖于bean id作为限定符。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"cold"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IceCream</span> <span class="keyword">implements</span> <span class="title">Dessert</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时cold限定符分配给了IceCream bean，只需要在合适的地方引入cold限定符即可自动装配。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"cold"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Dessert <span class="title">iceCream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IceCream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时类限定名的变更不会影响到自动装配。但是当应用中出现同名的注解@Qualifier(“cold”)时，歧义性又会再次出现。</p>
<p>这时需要多个@Qualifier注解来进一步缩小限定范围。</p>
<hr>
<h3 id="3-4-bean的作用域"><a href="#3-4-bean的作用域" class="headerlink" title="3.4 bean的作用域"></a>3.4 bean的作用域</h3><p><strong>默认情况下，Spring应用上下文中的所有bean都是以单例模式创建的。不管给定的bean被注入到其他bean多少次，每次注入的都是同一个实例。</strong></p>
<p>如果一个类是可变（mutable）的，那么对其进行重用时可能会遇到意想不到的问题。</p>
<p>Spring定义的bean作用域：</p>
<ul>
<li>单例（Singleton）：在整个应用中，只创建一个bean；</li>
<li>原型（Prototype）：每次注入或者通过上下文获取bean时都创建一个新的bean；</li>
<li>会话（Session）：在Web应用中，为每个回话创建一个bean；</li>
<li>请求（Request）：在Web应用中，为每个请求创建一个bean。</li>
</ul>
<p>@Scope注解：</p>
<p>用来指定bean的作用域：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class="line"><span class="comment">//或者 @Scope("prototype")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Notepad</span> </span>&#123;</span><br><span class="line">    <span class="comment">//something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>XML配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"notepad"</span> <span class="attr">class</span>=<span class="string">"com.app.Notepad"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-5-运行时值注入"><a href="#3-5-运行时值注入" class="headerlink" title="3.5 运行时值注入"></a>3.5 运行时值注入</h3><p>Spring提供了两种运行时求值的方式：</p>
<ul>
<li>属性占位符（Property placeholder）；</li>
<li>Spring表达式语言（S片EL）。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:/com/soundsys/app.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpressiveConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Environment env;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BlankDisc <span class="title">disc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BlankDisc(env.getProperty(<span class="string">"disc.title"</span>), env.getProperty(<span class="string">"disc.artist"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring的Environment：</p>
<p>getProperty()方法的四种重载方式：</p>
<ul>
<li>String getProperty(String key)；</li>
<li>String getProperty(String key, String defaultValue)；</li>
<li>T getProperty(String key, Class<t> type)；</t></li>
<li>T getProperty(String key, Class<t> type, T defaultValue)；</t></li>
</ul>
<p>使用重载形式的getProperty()方法可以避免类型转换：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> connectionCount = env.getProperty(<span class="string">"db.connection.count"</span>, Integer<span class="class">.<span class="keyword">class</span>, 10)</span>;</span><br></pre></td></tr></table></figure>

<p>Environment常见方法：</p>
<ul>
<li>boolean containsProperty(String property)；</li>
<li>String[] getActiveProfiles()；</li>
<li>String[] getDefaultProfiles()；</li>
<li>boolean acceptsProfiles(String… profiles)。</li>
</ul>
<p>解析属性占位符：</p>
<p>Spring支持将属性定义到外部的属性文件中，并使用占位符将其值插入到Spring bean中。在Spring装配中，占位符的形式为使用 “${…}” 的形式包装的属性名称。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sgtPeppers"</span> <span class="attr">class</span>=<span class="string">"soundsystem.BlankDisc"</span> <span class="attr">c:_title</span>=<span class="string">"$&#123;disc.title&#125;"</span> <span class="attr">c:_artist</span>=<span class="string">"$&#123;disc.artist&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用组件扫描和自动装配时：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlankDisc</span><span class="params">(@Value(<span class="string">"$&#123;disc.title&#125;"</span> String title, @Value(<span class="string">"$&#123;disc.artist&#125;"</span>)</span> String artist) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line">    <span class="keyword">this</span>.artist = artist;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SpEL表达式语言：</p>
<p>将表达式语言放到 “#{…}” 之中。</p>
<ul>
<li>“#{1 + 1}”</li>
<li>“#{T(System).currentMillis()}”</li>
<li>“#{sgtPeppers.artist}”</li>
<li>“#{false}”</li>
<li>“#{artistSelector.selectArtists().toUpperCase()}”</li>
</ul>
<p>SpEL运算符：</p>
<table>
<thead>
<tr>
<th>运算符类型</th>
<th>运算符</th>
</tr>
</thead>
<tbody><tr>
<td>算术运算符</td>
<td>+、-、*、/、%、</td>
</tr>
<tr>
<td>比较运算符</td>
<td>&lt;、&gt;、==、&lt;=、&gt;=、lt、gt、eq、le、ge</td>
</tr>
<tr>
<td>逻辑运算符</td>
<td>and、or、not、|</td>
</tr>
<tr>
<td>条件运算符</td>
<td>?:(ternary)、?:()</td>
</tr>
<tr>
<td>正则表达式</td>
<td>matches</td>
</tr>
</tbody></table>
<p>计算正则表达式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#&#123;admin.email matches '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.com'&#125;</span><br></pre></td></tr></table></figure>

<p>计算集合：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#&#123;jukebox.songs[4].title&#125;</span><br><span class="line">#&#123;jukebox.songs[T(java.lang.Math).random()*jukebox.songs.size()].title&#125;</span><br><span class="line">#&#123;jukebox.songs.?[artist eq 'Aerosmith']&#125;  //.?[]得到集合的一个子集</span><br><span class="line">#&#123;jukebox.songs.^[artist eq 'Areosmith']&#125;  //.^[]查询集合中的第一个匹配项</span><br><span class="line">#&#123;jukebox.songs.$[artist eq 'Areosmith'].![title]&#125;  //.$[]查询集合中的最后一个匹配项，.![]从集合的每个成员中选择特定的属性放到另外一个集合中</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之Reverse Polish Notation</title>
    <url>/2018/11/24/LeetCode%E4%B9%8BReverse-Polish-Notation/</url>
    <content><![CDATA[<h3 id="1-关于Reverse-Polish-Notation"><a href="#1-关于Reverse-Polish-Notation" class="headerlink" title="1. 关于Reverse Polish Notation"></a>1. 关于Reverse Polish Notation</h3><p>摘自 <a href="https://zh.wikipedia.org/zh-hans/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95" target="_blank" rel="noopener">维基百科</a> 的解释：</p>
<blockquote>
<p><strong>逆波兰表示法</strong>（<strong>Reverse Polish notation</strong>，<strong>RPN</strong>，或<strong>逆波兰记法</strong>），是一种是由<a href="https://zh.wikipedia.org/wiki/%E6%B3%A2%E5%85%B0" title="波兰" target="_blank" rel="noopener">波兰</a><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E5%AE%B6" title="数学家" target="_blank" rel="noopener">数学家</a><a href="https://zh.wikipedia.org/wiki/%E6%89%AC%C2%B7%E6%AD%A6%E5%8D%A1%E8%B0%A2%E7%BB%B4%E5%A5%87" title="扬·武卡谢维奇" target="_blank" rel="noopener">扬·武卡谢维奇</a>1920年引入的数学表达式方式，在逆波兰记法中，所有<a href="https://zh.wikipedia.org/w/index.php?title=%E6%93%8D%E4%BD%9C%E7%AC%A6&action=edit&redlink=1" title="操作符（页面不存在）" target="_blank" rel="noopener">操作符</a>置于<a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E6%95%B0" title="操作数" target="_blank" rel="noopener">操作数</a>的后面，因此也被称为<strong>后缀表示法</strong>。逆波兰记法不需要括号来标识操作符的优先级。</p>
</blockquote>
<a id="more"></a>



<h3 id="2-题目内容"><a href="#2-题目内容" class="headerlink" title="2. 题目内容"></a>2. 题目内容</h3><p>Evaluate the value of an arithmetic expression in <a href="http://en.wikipedia.org/wiki/Reverse_Polish_notation" target="_blank" rel="noopener">Reverse Polish Notation</a>.</p>
<p>Valid operators are+,-,*,/. Each operand may be an integer or another expression.<br>Some examples:</p>
<p> [“2”, “1”, “+”, “3”, “*”] -&gt; ((2 + 1) * 3) -&gt; 9<br> [“4”, “13”, “5”, “/“, “+”] -&gt; (4 + (13 / 5)) -&gt; 6</p>
<h3 id="3-解题思路"><a href="#3-解题思路" class="headerlink" title="3. 解题思路"></a>3. 解题思路</h3><p>对于一个合法的字符数组，依次扫描该字符数组：</p>
<ol>
<li>如果该字符是”+”,”-“,”*”,”/“中的任意一个，则将其放入栈中；</li>
<li>如果该字符是操作符，则从栈中取出两个操作数按照顺序进行运算；</li>
<li>直到扫描完毕，取出栈中的最后一个数，即为结果。</li>
</ol>
<h3 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">evalRPN</span><span class="params">(String[] tokens)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; operators = <span class="keyword">new</span> ArrayList&lt;String&gt;() &#123;&#123;</span><br><span class="line">        add(<span class="string">"+"</span>);</span><br><span class="line">        add(<span class="string">"-"</span>);</span><br><span class="line">        add(<span class="string">"*"</span>);</span><br><span class="line">        add(<span class="string">"/"</span>);</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">    Stack&lt;Integer&gt; tempValue = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> number1;</span><br><span class="line">    <span class="keyword">int</span> number2;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!operators.contains(token)) &#123;</span><br><span class="line">            tempValue.push((Integer.valueOf(token)));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            number1 = tempValue.pop();</span><br><span class="line">            number2 = tempValue.pop();</span><br><span class="line">            <span class="keyword">switch</span> (token) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">                    result = number2 + number1;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">                    result = number2 - number1;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">                    result = number2 * number1;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">                    result = number2 / number1;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tempValue.push(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tempValue.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Python爬取B站数据</title>
    <url>/2018/11/22/%E5%88%A9%E7%94%A8Python%E7%88%AC%E5%8F%96B%E7%AB%99%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h3 id="最初的想法"><a href="#最初的想法" class="headerlink" title="最初的想法"></a>最初的想法</h3><p>最近在想起能不能爬一下B站的用户信息，看看能不能统计一下B站的年龄信息。但是很遗憾，在个人主页里只能看到注册日期和生日，而不能看到完整的生日信息。</p>
<p>还是换个目标吧，好久没用python了，就当是复习一下基础知识。于是找了一下B站的API，官方没有开放的API可供调用，意料之中，已经有大佬准备好了：<a href="https://github.com/Kotobuki-Tsumugi/Bilibili_Views_spider" target="_blank" rel="noopener">GitHub-B站野生接口</a> 。</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BilibiliSpider</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.online_api = <span class="string">"https://api.bilibili.com/x/web-interface/online"</span>  <span class="comment"># 在线人数</span></span><br><span class="line">        self.video_api = <span class="string">"https://api.bilibili.com/x/web-interface/archive/stat?&amp;aid=%s"</span>  <span class="comment"># 视频信息</span></span><br><span class="line">        self.newlist_api = <span class="string">"https://api.bilibili.com/x/web-interface/newlist?&amp;rid=%s&amp;pn=%s&amp;ps=%s"</span>  <span class="comment"># 最新视频信息</span></span><br><span class="line">        self.region_api = <span class="string">"https://api.bilibili.com/x/web-interface/dynamic/region?&amp;rid=%s&amp;pn=%s&amp;ps=%s"</span>  <span class="comment"># 最新动态信息</span></span><br><span class="line">        self.member_api = <span class="string">"http://space.bilibili.com/ajax/member/GetInfo"</span>  <span class="comment"># 用户信息</span></span><br><span class="line">        self.stat_api = <span class="string">"https://api.bilibili.com/x/relation/stat?vmid=%s"</span>  <span class="comment"># 用户关注数和粉丝总数</span></span><br><span class="line">        self.upstat_api = <span class="string">"https://api.bilibili.com/x/space/upstat?mid=%s"</span>  <span class="comment"># 用户总播放量和总阅读量</span></span><br><span class="line">        self.follower_api = <span class="string">"https://api.bilibili.com/x/relation/followings?vmid=%s&amp;pn=%s&amp;ps=%s"</span>  <span class="comment"># 用户关注信息</span></span><br><span class="line">        self.fans_api = <span class="string">"https://api.bilibili.com/x/relation/followers?vmid=%s&amp;pn=%s&amp;ps=%s"</span>  <span class="comment"># 用户粉丝信息</span></span><br></pre></td></tr></table></figure>

<h3 id="抓取在线人数"><a href="#抓取在线人数" class="headerlink" title="抓取在线人数"></a>抓取在线人数</h3><p>最简单的例子，在 StuPeter 的例子里有现成的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">member_online_count</span><span class="params">(self)</span>:</span></span><br><span class="line">    ret_val = requests.get(self.online_api)</span><br><span class="line">    <span class="keyword">if</span> ret_val.status_code != <span class="number">200</span> <span class="keyword">or</span> ret_val.content <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        print(<span class="string">"获取当前在线人数失败"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    ret_content = json.loads(ret_val.content)</span><br><span class="line">    <span class="keyword">return</span> ret_content[<span class="string">"data"</span>][<span class="string">"web_online"</span>]</span><br></pre></td></tr></table></figure>

<h3 id="将返回数据写入文件"><a href="#将返回数据写入文件" class="headerlink" title="将返回数据写入文件"></a>将返回数据写入文件</h3><p>每次执行脚本都记录下当前时间：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_file</span><span class="params">(self, cnt)</span>:</span></span><br><span class="line">    now = datetime.datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">    f = open(self.file, <span class="string">"a"</span>)</span><br><span class="line">    content_to_write = <span class="string">"["</span> + now + <span class="string">"] : ["</span> + str(cnt) + <span class="string">"]"</span></span><br><span class="line">    f.write(content_to_write + <span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="配置定时任务"><a href="#配置定时任务" class="headerlink" title="配置定时任务"></a>配置定时任务</h3><p>配置定时任务(Ubantu18.04)每十分钟执行一次：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0,10,20,30,40,50 * * * * python /home/username/python/bilibili_spider.py</span><br></pre></td></tr></table></figure>

<h3 id="matplotlib折线图展示"><a href="#matplotlib折线图展示" class="headerlink" title="matplotlib折线图展示"></a>matplotlib折线图展示</h3><p>爬完数据之后数据数据都在文件里，直接数据文件中读取记录下的 时间 和 人数值，做成折线图：</p>
<p>还需要再研究研究，to be updated…</p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客同时部署到github和coding并设置双线解析</title>
    <url>/2018/11/19/Hexo%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2%E5%88%B0github%E5%92%8Ccoding%E5%B9%B6%E8%AE%BE%E7%BD%AE%E5%8F%8C%E7%BA%BF%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>因为github服务器禁止了百度爬虫，所以不能百度收录不了站点，导致访问量很低，本来不想折腾的，想了一下还是将博客也部署到了coding上，方便百度的收录。</p>
<a id="more"></a>



<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><ol>
<li><p>在coding上创建一个名为 <strong>用户名</strong> (不是昵称)的项目，并开启pages服务；</p>
</li>
<li><p>将本地ssh公钥文件添加到coding的SSH公钥中并测试是否能访问：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T -p 443 git@git-ssh.coding.net</span><br></pre></td></tr></table></figure>
</li>
<li><p>在站点配置文件中添加上coding仓库地址：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:Kotobuki-Tsumugi/Kotobuki-Tsumugi.github.io.git</span></span><br><span class="line">    <span class="attr">coding:</span> <span class="string">git@git.dev.tencent.com:Kobobuki-Tsumugi/Kobobuki-Tsumugi.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在站点目录/source下创建一个名为Staticfile的空文件；</p>
</li>
<li><p>生成并上传静态文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>
</li>
<li><p>在域名解析中新增两条CNAME记录，指向username.coding.me，注意区分境外线路和默认线路，指向coding的必须为默认线路，如果不能正常访问，可以先暂停github的解析，待coding的解析成功后再开启github的解析，解析反应不及时。</p>
</li>
<li><p>向百度提交站点sitemap文件地址。</p>
</li>
</ol>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>其中也遇到一些玄学的问题：</p>
<p><img src="https://images2.imgbox.com/0e/48/c6Y1zWYh_o.png" alt="coding提示域名绑定异常"></p>
<p>比如上图，我如果绑定youyou-2608.com 则一直提示“域名未联通”，即便我已经添加了指向username.coding.me的CNAME记录，添加<a href="http://www.youyou-2608.com" target="_blank" rel="noopener">www.youyou-2608.com</a> 能绑定上，但是绑定状态一直是异常，访问username.coding.me也能正常跳转到<a href="https://youyou-2608.com" target="_blank" rel="noopener">https://youyou-2608.com</a> ，没太搞明白，既然已经能正常访问，也就作罢了。</p>
]]></content>
      <categories>
        <category>博客维护</category>
      </categories>
      <tags>
        <tag>博客维护</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客备份</title>
    <url>/2018/11/18/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h3 id="养成备份的好习惯"><a href="#养成备份的好习惯" class="headerlink" title="养成备份的好习惯"></a>养成备份的好习惯</h3><p>花了好长时间总算是把博客搭建起来了，之前自己买的服务器用Wordpress搭建博客，但是因为服务器经常需要使用，安装一些其他软件什么的，导致Wordpress运行不是很稳定，还很容易被墙。</p>
<p>因为Hexo每次执行hexo g -d之后发布的都是生成的静态文件，站点以及主题的配置文件不会一同发布到github上，最重要的是，如果在另一个机器上要更新博客，根本做不到。所以就想着把源文件备份一下。</p>
<a id="more"></a>



<hr>
<h3 id="使用github备份轻松备份"><a href="#使用github备份轻松备份" class="headerlink" title="使用github备份轻松备份"></a>使用github备份轻松备份</h3><p>github本来就是一个仓库，用它来备份最合适不过了。</p>
<ol>
<li>建立本地文件夹，将需要备份的文件存拷贝到该文件夹中；</li>
<li>在username.github.io仓库下新建一个分支；</li>
<li>建立本地备份文件夹与远程仓库的关联；</li>
<li>将本地文件夹push到仓库；</li>
<li>每次博客更新，先发布静态文件，然后在提交源文件。</li>
</ol>
<hr>
<h3 id="需要备份的文件"><a href="#需要备份的文件" class="headerlink" title="需要备份的文件"></a>需要备份的文件</h3><ol>
<li>_config.yml</li>
<li>package.json</li>
<li>/scaffolds</li>
<li>/source</li>
<li>/themes</li>
</ol>
<hr>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>感觉每次更新博客之后都需要拷贝一下上面这几个文件，感觉还是比较麻烦，没想到什么好办法。</p>
<p><strong>git第一次commit之后才能查看到本地分支，push之后能显示远程分支。</strong></p>
<hr>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>用python脚本来复制文件，并且将执行命令添加到终端命令中，这样只需要多执行一个自定义命令来运行脚本，更方便。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!user/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">source_path = <span class="string">"/Users/youyou2608/Kotobuki"</span></span><br><span class="line">target_path = <span class="string">"/Users/youyou2608/BlogBack"</span></span><br><span class="line">filter_files = [<span class="string">"db.json"</span>, <span class="string">"public"</span>, <span class="string">"package-lock.json"</span>, <span class="string">"node_modules"</span>, <span class="string">".deploy_git"</span>]</span><br><span class="line">file_updated = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy_files</span><span class="params">(source_dir, target_dir)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(source_dir):</span><br><span class="line">        <span class="keyword">if</span> f <span class="keyword">in</span> filter_files:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        source_file = os.path.join(source_dir, f)</span><br><span class="line">        target_file = os.path.join(target_dir, f)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(source_file):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(target_dir):</span><br><span class="line">                os.makedirs(target_dir)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(target_file) <span class="keyword">or</span> (</span><br><span class="line">                    os.path.exists(target_file) <span class="keyword">and</span> os.path.getsize(target_file) != os.path.getsize(source_file)):</span><br><span class="line">                open(target_file, <span class="string">"wb"</span>).write(open(source_file, <span class="string">"rb"</span>).read())</span><br><span class="line">                file_updated.append(source_file)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(source_file):</span><br><span class="line">            copy_files(source_file, target_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"开始Hexo站点源文件复制.."</span>)</span><br><span class="line">    copy_files(source_path, target_path)</span><br><span class="line">    print(<span class="string">"站点源文件复制完毕.."</span>)</span><br></pre></td></tr></table></figure>



<p>在 /etc/profile 中添加一行：alias ‘copy_hexo_source’=’python copy_hexo_source.py’ ，这样终端运行 copy_hexo_source 就可以复制文件了。</p>
]]></content>
      <categories>
        <category>博客维护</category>
      </categories>
      <tags>
        <tag>博客维护</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习笔记-第二章-装配Bean</title>
    <url>/2018/11/17/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%A3%85%E9%85%8DBean/</url>
    <content><![CDATA[<p>第二章：装配Bean</p>
<p>本章内容：</p>
<ul>
<li>声明bean</li>
<li>构造器注入和Setter方法注入</li>
<li>装配bean</li>
<li>控制bean的创建和销毁</li>
</ul>
<blockquote>
<p>在Spring中，对象无需自己查找或创建与其所关联的对象，容器负责把需要相互协作的对象引用赋值给各个对象，这种协作关系成为<strong>装配</strong>。</p>
</blockquote>
<hr>
<h3 id="2-1-Spring配置的可选方案"><a href="#2-1-Spring配置的可选方案" class="headerlink" title="2.1 Spring配置的可选方案"></a>2.1 Spring配置的可选方案</h3><blockquote>
<p>Spring容器负责创建应用程序中的bean并通过DI来协调对象之间的关系。开发人员需要做的是告诉Spring需要创建哪些对象并且如何装配在一起。</p>
</blockquote>
<a id="more"></a>



<p>Spring提供了三种可选方式：</p>
<ul>
<li>XML配置</li>
<li>Java显式配置</li>
<li>隐式的bean发现机制和自动装配</li>
</ul>
<p>如何选择：<strong>尽可能使用自动配置机制，当必须显式配置时使用JavaConfig，当JavaConfig中没有同样实现时使用XML配置。</strong></p>
<hr>
<h3 id="2-2-自动化装配bean"><a href="#2-2-自动化装配bean" class="headerlink" title="2.2 自动化装配bean"></a>2.2 自动化装配bean</h3><ul>
<li>自动扫描</li>
<li>自动装配</li>
</ul>
<h4 id="2-2-1-创建可被发现的bean"><a href="#2-2-1-创建可被发现的bean" class="headerlink" title="2.2.1 创建可被发现的bean"></a>2.2.1 创建可被发现的bean</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kotobuki2.soundsys;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/17 下午7:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CompactDisc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kotobuki2.soundsys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/17 下午7:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title = <span class="string">"SgtPeppers title"</span>;</span><br><span class="line">    <span class="keyword">private</span> String artiest = <span class="string">"The Beatles"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"playing.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kotobuki2.soundsys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/17 下午7:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过XML配置开启注解扫描：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"soundsys"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>自动装配测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kotobuki2.soundsys.CDPlayerConfig;</span><br><span class="line"><span class="keyword">import</span> com.kotobuki2.soundsys.CompactDisc;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertNotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/17 下午7:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span> </span>= CDPlayerConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CDPlayerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CompactDisc compactDisc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cdTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertNotNull(compactDisc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-2-为组件扫描的bean命名"><a href="#2-2-2-为组件扫描的bean命名" class="headerlink" title="2.2.2 为组件扫描的bean命名"></a>2.2.2 为组件扫描的bean命名</h4><p>默认将类名第一个字母小写后的字符串作为bean的id。</p>
<p>可以通过注解标示bean的别名：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"alias"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-2-3-设置组件扫描的基础包"><a href="#2-2-3-设置组件扫描的基础包" class="headerlink" title="2.2.3 设置组件扫描的基础包"></a>2.2.3 设置组件扫描的基础包</h4><p><strong>默认以配置类所在的包为基础包进行扫描。</strong></p>
<p>自定义扫描包：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"package-name"</span>)</span><br><span class="line"><span class="comment">//扫描多个基础包</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"package1"</span>, <span class="string">"package2"</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>但是用直接指定包名会出现问题：包名被变更以后便无法扫描到所需要的类，因此，还有另一种指定扫描包的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackageClasses = &#123;CDPlayer<span class="class">.<span class="keyword">class</span>, <span class="title">DVDPlayer</span>.<span class="title">class</span>&#125;)</span></span><br></pre></td></tr></table></figure>

<p>这种方式下，这些类所在的包都会作为基础包进行扫描，即便代码重构也不会受到影响。</p>
<h4 id="2-2-4-通过为bean添加注解实现自动装配"><a href="#2-2-4-通过为bean添加注解实现自动装配" class="headerlink" title="2.2.4 通过为bean添加注解实现自动装配"></a>2.2.4 通过为bean添加注解实现自动装配</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kotobuki2.soundsys;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/17 下午8:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MediaPlayer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kotobuki2.soundsys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/17 下午8:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayer</span> <span class="keyword">implements</span> <span class="title">MediaPlayer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CompactDisc compactDisc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CDPlayer</span><span class="params">(CompactDisc compactDisc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.compactDisc = compactDisc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        compactDisc.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Autowired注解不仅能够用在构造器上，也能用在属性的Setter方法上。</p>
<hr>
<h3 id="2-3-通过Java装配bean"><a href="#2-3-通过Java装配bean" class="headerlink" title="2.3 通过Java装配bean"></a>2.3 通过Java装配bean</h3><blockquote>
<p>在进行显式配置的时候，JavaConfig是更好的方案，因为其强大、类型安全并且重构友好。因为其本身就是Java代码。</p>
</blockquote>
<p>声明简单的bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name=<span class="string">"alias"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> CompactDisc <span class="title">sgtPeppers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SgtPeppers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>借助JavaConfig实现注入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> CDPlayer(<span class="keyword">new</span> sgtPeppers());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">(CompactDisc disc)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CDplayer(disc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后者不要求disc必须在JavaConfig中声明，实际上它可以通过组件扫描功能自动发现或者XML来进行配置。</p>
<p>通过构造器注入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">(CompactDisc disc)</span></span>&#123;</span><br><span class="line">    CDPlayer cdPlayer = <span class="keyword">new</span> CDPlayer(disc);</span><br><span class="line">    cdPlayer.setCompactDisc(disc);</span><br><span class="line">    <span class="keyword">return</span> cdPlayer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-4-通过XML装配Bean"><a href="#2-4-通过XML装配Bean" class="headerlink" title="2.4 通过XML装配Bean"></a>2.4 通过XML装配Bean</h3><p>在XML配置中，需要创建一个以<beans>作为根元素的XML配置文件。</beans></p>
<p><strong>可以借助Spring Tool Suite创建和管理Spring XML配置文件</strong>。</p>
<h4 id="2-4-1-声明一个简单的bean："><a href="#2-4-1-声明一个简单的bean：" class="headerlink" title="2.4.1 声明一个简单的bean："></a>2.4.1 声明一个简单的bean：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean_id"</span> <span class="attr">class</span>=<span class="string">"com.soundsys.SgtPeppers"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果没有指明id，bean将会根据类全限定名指定，为了减少XML配置的繁琐，只需要对需要按名称引用的bean进行命名。“com.soundsys.SgtPeppers#0”…</p>
<p><constructor-arg> 元素：</constructor-arg></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span> <span class="attr">class</span>=<span class="string">"com.soundsys.CDPlayer"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"compactDisc"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-2-c命名空间"><a href="#2-4-2-c命名空间" class="headerlink" title="2.4.2 c命名空间"></a>2.4.2 c命名空间</h4><p><a href="https://blog.csdn.net/elim168/article/details/74516439" target="_blank" rel="noopener">p命名空间和c命名空间</a></p>
<h4 id="2-4-3-将字面量注入到构造器中："><a href="#2-4-3-将字面量注入到构造器中：" class="headerlink" title="2.4.3 将字面量注入到构造器中："></a>2.4.3 将字面量注入到构造器中：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"compactDisc"</span> <span class="attr">class</span>=<span class="string">"com.soundsys.BlackDisc"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"title"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"The Beatles"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 value 属性，将给定的值注入到构造器中。</p>
<h4 id="2-4-3-装配集合"><a href="#2-4-3-装配集合" class="headerlink" title="2.4.3 装配集合"></a>2.4.3 装配集合</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beat"</span> <span class="attr">class</span>=<span class="string">"com.soundsys.beat"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"The Beatles"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"bean1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"bean2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"bean3"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beat"</span> <span class="attr">class</span>=<span class="string">"com.soundsys.beat"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"The Beatles"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>SgtPeppers<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>The Beatles<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用两者的区别就是 list 和 set 会忽略重复元素。</p>
<h4 id="2-4-4-p命名空间"><a href="#2-4-4-p命名空间" class="headerlink" title="2.4.4 p命名空间"></a>2.4.4 p命名空间</h4><p><a href="https://blog.csdn.net/elim168/article/details/74516439" target="_blank" rel="noopener">p命名空间和c命名空间</a></p>
<h4 id="2-4-5-导入混合配置"><a href="#2-4-5-导入混合配置" class="headerlink" title="2.4.5 导入混合配置"></a>2.4.5 导入混合配置</h4><p>在 JavaConfig 中引用 JavaConfig 配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(CDConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">(CompactDisc disc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CDPlayer(disc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(CDPlayerConfig<span class="class">.<span class="keyword">class</span>, <span class="title">CDConfig</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SoundSysConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建一个配置类，使用@Import导入两个配置类。</p>
<p>在JavaConfig中引入XML配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(CDPlayerConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ImportResource("classpath:cd-config.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoundSysConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在XML配置中引用XML配置：</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"cd-config.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span> <span class="attr">class</span>=<span class="string">"com.soundsys.CDPlayer"</span> <span class="attr">c:cd-ref</span>=<span class="string">"compactDisc"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在XML中引入JavaConfig配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.soundsys.CDConfig"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span> <span class="attr">class</span>=<span class="string">"com.soundsys.CDPlayer"</span> <span class="attr">c:cd-ref</span>=<span class="string">"compactDisc"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.soundsys.CDConfig"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"cdplayer-config.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>新建一个配置文件，分别导入JavaConfig配置和XML配置。</p>
<hr>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote>
<p>Spring框架的核心是Spring容器，负责管理应用中组件的生命周期，它会创建这些组件并保证它们的依赖能够得到满足。</p>
<p>尽可能使用自动配置，以避免显式配置带来的维护成本。</p>
<p>如果确实需要显式配置，应优先选择基于Java的配置，因为其更加强大、类型安全且易于重构。</p>
</blockquote>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之单链表重排序</title>
    <url>/2018/11/17/LeetCode%E5%AD%90%E5%8D%95%E9%93%BE%E8%A1%A8%E9%87%8D%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>Given a singly linked list <em>L</em>: <em>L</em> 0→<em>L</em> 1→…→<em>L</em> <em>n</em>-1→<em>L</em> n,<br>reorder it to: <em>L</em> 0→<em>L</em> <em>n</em> →<em>L</em> 1→<em>L</em> <em>n</em>-1→<em>L</em> 2→<em>L</em> <em>n</em>-2→…</p>
<p>You must do this in-place without altering the nodes’ values.</p>
<p>For example,<br>Given{1,2,3,4}, reorder it to{1,4,2,3}.</p>
<a id="more"></a>



<h3 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h3><ul>
<li><p>时间限制：1秒</p>
</li>
<li><p>空间限制：32768K</p>
</li>
</ul>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>两个游标：一个用来指向下一次将要插入元素的位置，另一个用来遍历链表。从根结点开始遍历，如果当前节点的next节点不为空并且next的next节点不为空，则取最后一个节点插入到当前节点之后，游标一跳两个位置。直到游标一节点的next节点为空或者next的next节点为空。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.reorder.list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sort.linkedlist.ListNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/17 下午4:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span> || head.next.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode pt = head;</span><br><span class="line">        ListNode index = head;</span><br><span class="line">        ListNode preIndex = head;</span><br><span class="line">        <span class="keyword">while</span> (pt.next != <span class="keyword">null</span> &amp;&amp; pt.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (index.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                preIndex = index;</span><br><span class="line">                index = index.next;</span><br><span class="line">            &#125;</span><br><span class="line">            preIndex.next = <span class="keyword">null</span>;</span><br><span class="line">            index.next = pt.next;</span><br><span class="line">            pt.next = index;</span><br><span class="line">            pt = pt.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方法可行，但是每排序一个节点都需要遍历一次链表，效率比较低，可以看到下图，运行时间较长，占用内存已经 <strong><font color="red">超过空间限制</font></strong> 了。</p>
<p><img src="https://image.youyou-2608.com/blog/leetcode1.png" alt="链表重排序"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>看了一下网上给出的方案，几乎都是一样的：</p>
<p>这道链表重排序问题可以拆分为以下三个小问题：</p>
<ol>
<li><p>使用快慢指针来找到链表的中点，并将链表从中点处断开，形成两个独立的链表。</p>
</li>
<li><p>将第二个链翻转。</p>
</li>
<li><p>将第二个链表的元素间隔地插入第一个链表中。</p>
</li>
</ol>
<p>都是将链表拆成两个独立的链表进行重排序。</p>
<p>剽窃来的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;这道链表重排序问题可以拆分为以下三个小问题：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 使用快慢指针来找到链表的中点，并将链表从中点处断开，形成两个独立的链表。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. 将第二个链翻转。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3. 将第二个链表的元素间隔地插入第一个链表中。</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head || !head-&gt;next || !head-&gt;next-&gt;next) <span class="keyword">return</span>;</span><br><span class="line">        ListNode *fast = head;</span><br><span class="line">        ListNode *slow = head;</span><br><span class="line">        <span class="keyword">while</span> (fast-&gt;next &amp;&amp; fast-&gt;next-&gt;next) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *mid = slow-&gt;next;</span><br><span class="line">        slow-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode *last = mid;</span><br><span class="line">        ListNode *pre = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (last) &#123;</span><br><span class="line">            ListNode *next = last-&gt;next;</span><br><span class="line">            last-&gt;next = pre;</span><br><span class="line">            pre = last;</span><br><span class="line">            last = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (head &amp;&amp; pre) &#123;</span><br><span class="line">            ListNode *next = head-&gt;next;</span><br><span class="line">            head-&gt;next = pre;</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">            head-&gt;next-&gt;next = next;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>时间空间使用都很少，性能问题没了。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之二叉树非递归前序遍历</title>
    <url>/2018/11/17/LeetCode%E5%AD%90%E4%BA%8C%E5%8F%89%E6%A0%91%E9%9D%9E%E9%80%92%E5%BD%92%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>Given a binary tree, return the <em>preorder</em> traversal of its nodes’ values.</p>
<p>For example:<br>Given binary tree{1,#,2,3},</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line"> /</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>return[1,2,3].</p>
<p><strong>Note:</strong> Recursive solution is trivial, could you do it iteratively?</p>
<p><strong>使用非递归的方法前序遍历二叉树。</strong></p>
<a id="more"></a>



<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>前序遍历就是按照中、左、右的顺序对二叉树进行遍历。</p>
<p>思路很简单，如果当前节点不为空，不断遍历当前节点的左子树，如果当前节点有右子树的话，将其放入栈中以便后期遍历其右子树，如果当前节点为空，则取出栈顶元素按照同样的方式遍历其右子树。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.postorder.raversal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/17 下午3:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreOrderSolution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        TreeNode pointer = root;</span><br><span class="line">        <span class="keyword">while</span> (pointer != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (pointer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                list.add(pointer.val);</span><br><span class="line">                <span class="keyword">if</span> (pointer.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    stack.push(pointer);</span><br><span class="line">                &#125;</span><br><span class="line">                pointer = pointer.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pointer = stack.pop();</span><br><span class="line">            pointer = pointer.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>牛客网做得还不错，就是现在还是只支持C++和Java。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之二叉树非递归后续遍历</title>
    <url>/2018/11/17/LeetCode%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E9%9D%9E%E9%80%92%E5%BD%92%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<p>周末突然降温，哪儿也去不了，不如在家刷题。</p>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>Given a binary tree, return the <em>postorder</em> traversal of its nodes’ values.</p>
<p>For example:<br>Given binary tree{1,#,2,3},</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line"> /</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>return[3,2,1].</p>
<p><strong>Note:</strong> Recursive solution is trivial, could you do it iteratively？</p>
<p><strong>使用非递归方法后序遍历二叉树。</strong></p>
<a id="more"></a>



<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>二叉树后序遍历就是对每个节点按照左、右、中的顺序进行遍历。</p>
<p>详细的解析参见：<a href="https://www.jianshu.com/p/456af5480cee" target="_blank" rel="noopener">二叉树遍历(先序、中序、后序)</a> ，讲得非常详细易懂。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.postorder.raversal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/17 下午1:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        TreeNode pointer = root;</span><br><span class="line">        TreeNode lastVisit = root;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() || pointer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (pointer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(pointer);</span><br><span class="line">                pointer = pointer.left;</span><br><span class="line">            &#125;</span><br><span class="line">            pointer = stack.peek();</span><br><span class="line">            <span class="keyword">if</span> (pointer.right == <span class="keyword">null</span> || pointer.right == lastVisit) &#123;</span><br><span class="line">                list.add(pointer.val);</span><br><span class="line">                lastVisit = pointer;</span><br><span class="line">                stack.pop();</span><br><span class="line">                pointer = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pointer = pointer.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>是时候好好重修一下数据结构了。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之链表插入排序</title>
    <url>/2018/11/16/LeetCode%E4%B9%8B%E9%93%BE%E8%A1%A8%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p><a href="https://www.nowcoder.com/practice/152bc6c5b14149e49bf5d8c46f53152b?tpId=46&tqId=29034&tPage=1&rp=1&ru=/ta/leetcode&qru=/ta/leetcode/question-ranking" target="_blank" rel="noopener">链表插入排序</a> 是 <a href="https://www.nowcoder.com" target="_blank" rel="noopener">牛客网</a> 上LeetCode在线编程的一道题。</p>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>Sort a linked list using insertion sort.</p>
<p>使用插入排序对链表排序，此处为单链表。</p>
<a id="more"></a>



<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>插入排序</strong>就是依次将未排序部分的第一个元素插入到已排序部分合适的位置，使得已排序部分仍然有序。</p>
<p>列表可以直接根据位置索引元素，但是链表不可以直接取得指定位置的元素。</p>
<p>根据插入排序的思路：将整个链表按照已排序和未排序分为两部分，未排序部分的首个元素即为将要被排序的元素，问题变为将一个元素插入到一个有序链表中使得该链表仍然有序。分为两种情况：一种是合适位置在有序链表的非末尾，另一种是在有序链表的末尾，然后其他的问题就是注意插入时的赋值顺序。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">insertionSortList1</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode root = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ListNode temp = root;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span> &amp;&amp; head.val &gt;= temp.next.val)</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        <span class="keyword">if</span> (temp.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp.next = head;</span><br><span class="line">            head = head.next;</span><br><span class="line">            temp.next.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ListNode temp2 = temp.next;</span><br><span class="line">            temp.next = head;</span><br><span class="line">            head = head.next;</span><br><span class="line">            temp.next.next = temp2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考：<a href="http://www.cnblogs.com/tonyluis/p/4579295.html" target="_blank" rel="noopener">http://www.cnblogs.com/tonyluis/p/4579295.html</a></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习笔记-第一章-Spring之旅</title>
    <url>/2018/11/14/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-Spring%E4%B9%8B%E6%97%85/</url>
    <content><![CDATA[<p>第一部分：Spring的核心</p>
<ul>
<li><p>第一章：Spring之旅</p>
<p>介绍Spring框架，包括Spring DI和AOP。</p>
</li>
<li><p>第二章：装配Bean</p>
<p>Spring的自动配置、基于Java的配置和XML配置。</p>
</li>
<li><p>第三章：高级装配</p>
<p>Spring的条件化配置，处理自动装配时的歧义性，作用域以及Spring表达式语言。</p>
</li>
<li><p>第四章：面向切面的Spring</p>
<p>展示如何使用Spring的AOP特性把系统级服务从它们所服务的对象中解耦出来。</p>
</li>
</ul>
<a id="more"></a>





<hr>
<p>第一章 Spring之旅</p>
<p>本章内容：</p>
<ul>
<li>Spring的Bean容器</li>
<li>介绍Spring的核心模块</li>
<li>更为强大的Spring生态系统</li>
<li>Spring的新功能</li>
</ul>
<p><strong>创建Spring的主要目的是用来替代更加重量级的企业级Java技术，尤其是EJB。</strong>相当于EJB来说，Spring提供了更加轻量级和更加简单的编程模型。</p>
<hr>
<h3 id="1-1-简化Java开发"><a href="#1-1-简化Java开发" class="headerlink" title="1.1 简化Java开发"></a>1.1 简化Java开发</h3><h4 id="1-1-1-Spring的非侵入式编程"><a href="#1-1-1-Spring的非侵入式编程" class="headerlink" title="1.1.1 Spring的非侵入式编程"></a>1.1.1 Spring的非侵入式编程</h4><p>在基于Spring构建的应用中，一般不会有任何痕迹表明你使用了Spring，最坏的场景是在一个类上使用了Spring注解，但是这个类依旧是一个Pojo类。</p>
<p>Spring的非侵入式编程模型意味着这个类在Spring应用还是在非Spring应用中都能发挥同样的作用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kotobuki;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/14 下午9:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-1-2-依赖注入"><a href="#1-1-2-依赖注入" class="headerlink" title="1.1.2 依赖注入"></a>1.1.2 依赖注入</h4><p>在一个应用中通常会涉及到很多类，这些类需要相互协作来完成特定的功能，如果让每个类管理与自己协作的类，则会导致应用高度耦合。</p>
<blockquote>
<p> 依赖注入带来的最大好处就是松耦合。如果一个对象只通过借口来表明依赖关系，那么这种依赖就能够在对象毫不知情的情况下用不同的实现替换。</p>
<p>可以让对其他的类有依赖的类自动获得已经准备好的依赖。</p>
</blockquote>
<p>一个送外卖的过程：当不是用DI的时候送餐员需要自己准备外卖，然后再配送。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.clerk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.com.food.Dinner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/15 下午8:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliveryWithoutDI</span> <span class="keyword">implements</span> <span class="title">Delivery</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Dinner dinner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeliveryWithoutDI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dinner = <span class="keyword">new</span> Dinner(<span class="string">"rice"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delivery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"delivery it on time."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当使用DI之后，当有外卖需要配送的时候，分配送餐员，送餐员会自动获得需要配送的外卖，需要做的只是负责配送，而不用关心其他事情。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.clerk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.com.food.Dinner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/15 下午8:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliveryClerk</span> <span class="keyword">implements</span> <span class="title">Delivery</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Dinner dinner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeliveryClerk</span><span class="params">(Dinner dinner)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dinner = dinner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delivery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"delivery on time."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-1-3-应用切面"><a href="#1-1-3-应用切面" class="headerlink" title="1.1.3 应用切面"></a>1.1.3 应用切面</h4><blockquote>
<p>面向切面编程允许你把遍布应用各处的功能分离出来形成可重用的组件。</p>
</blockquote>
<p>一个系统或应用由许多不同的组件构成，但是每一个组件在负责自己的功能之外，通常还要承担额外的责任。一些与核心业务无关的代码会融入到核心业务逻辑中。比如转账，除了发生金钱的转移之外，还要验证身份、记录账单以及给用户发送通知。这些会跨越系统的组件成为横切关注点。它们会使核心业务代码变得复杂。</p>
<p><img src="https://image.youyou-2608.com/blog/AOP1.png" alt="Spring AOP"></p>
<p>通过AOP，可以将与核心业务无关的代码分离出来。</p>
<h4 id="1-1-4-使用模板消除样板式代码"><a href="#1-1-4-使用模板消除样板式代码" class="headerlink" title="1.1.4 使用模板消除样板式代码"></a>1.1.4 使用模板消除样板式代码</h4><p>使用JDBC访问数据库，会产生大量与查询语句无关的代码，还必须要捕捉异常，虽然无济于事。</p>
<p>Spring旨在通过模板封装来消除样板式代码。</p>
<p><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/data-access.html#spring-data-tier" target="_blank" rel="noopener">Data Access with JDBC</a></p>
<h3 id="1-2-容纳你的bean"><a href="#1-2-容纳你的bean" class="headerlink" title="1.2 容纳你的bean"></a>1.2 容纳你的bean</h3><blockquote>
<p>在Spring应用中，你的应用对象生存于Spring容器中，Spring容器负责创建对象，装配并管理它们的整个生命周期。</p>
</blockquote>
<p>使用应用上下文：</p>
<ul>
<li>AnnotationConfigApplicationContext：从一个或多个基于Java的配置类中加载Spring应用上下文。</li>
<li>AnnotationConfigWebApplicationContext：从一个或多个基于Java的配置类中加载Spring Web应用上下文。</li>
<li>ClassPathXmlApplicationContext：从类路径下的一个或多个XML配置文件中加载上下文定义。</li>
<li>FileSystemXmlApplicationContext：从文件系统下的一个或多个XML配置文件中加载上下文定义。</li>
<li>XmlWebApplicationContext：从Web应用下的一个或多个XML配置文件中还在上下文定义。</li>
</ul>
<p>bean的生命周期：</p>
<p><img src="https://image.youyou-2608.com/bean-lifecycle.png" alt="bean的生命周期"></p>
<p><img src="https://image.youyou-2608.com/bean2.png" alt="Bean的生命周期"></p>
<h3 id="1-3-俯瞰Spring风景线"><a href="#1-3-俯瞰Spring风景线" class="headerlink" title="1.3 俯瞰Spring风景线"></a>1.3 俯瞰Spring风景线</h3><p>Spring的模块：</p>
<p><img src="https://image.youyou-2608.com/springmodel" alt="Spring模块"></p>
<table>
<thead>
<tr>
<th><a href="https://docs.spring.io/spring/docs/5.1.2.RELEASE/spring-framework-reference/core.html#spring-core" target="_blank" rel="noopener">Core</a></th>
<th>IoC container, Events, Resources, i18n, Validation, Data Binding, Type Conversion, SpEL, AOP.</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://docs.spring.io/spring/docs/5.1.2.RELEASE/spring-framework-reference/testing.html#testing" target="_blank" rel="noopener">Testing</a></td>
<td>Mock objects, TestContext framework, Spring MVC Test, WebTestClient.</td>
</tr>
<tr>
<td><a href="https://docs.spring.io/spring/docs/5.1.2.RELEASE/spring-framework-reference/data-access.html#spring-data-tier" target="_blank" rel="noopener">Data Access</a></td>
<td>Transactions, DAO support, JDBC, ORM, Marshalling XML.</td>
</tr>
<tr>
<td><a href="https://docs.spring.io/spring/docs/5.1.2.RELEASE/spring-framework-reference/web.html#spring-web" target="_blank" rel="noopener">Web Servlet</a></td>
<td>Spring MVC, WebSocket, SockJS, STOMP messaging.</td>
</tr>
<tr>
<td><a href="https://docs.spring.io/spring/docs/5.1.2.RELEASE/spring-framework-reference/web-reactive.html#spring-webflux" target="_blank" rel="noopener">Web Reactive</a></td>
<td>Spring WebFlux, WebClient, WebSocket.</td>
</tr>
<tr>
<td><a href="https://docs.spring.io/spring/docs/5.1.2.RELEASE/spring-framework-reference/integration.html#spring-integration" target="_blank" rel="noopener">Integration</a></td>
<td>Remoting, JMS, JCA, JMX, Email, Tasks, Scheduling, Cache.</td>
</tr>
<tr>
<td><a href="https://docs.spring.io/spring/docs/5.1.2.RELEASE/spring-framework-reference/languages.html#languages" target="_blank" rel="noopener">Languages</a></td>
<td>Kotlin, Groovy, Dynamic languages.</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之水仙花数</title>
    <url>/2018/11/11/LeetCode%E4%B9%8B%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0/</url>
    <content><![CDATA[<h3 id="1-水仙花数"><a href="#1-水仙花数" class="headerlink" title="1. 水仙花数"></a>1. 水仙花数</h3><p>以下是摘自 <a href="https://zh.wikipedia.org/zh-hans/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0" target="_blank" rel="noopener">维基百科</a> 中的释义：</p>
<blockquote>
<p>在<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E8%AE%BA" title="数论" target="_blank" rel="noopener">数论</a>中，<strong><a href="https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1" title="水仙花" target="_blank" rel="noopener">水仙花</a>数</strong>（<strong>Narcissistic number</strong>）<sup><a href="https://zh.wikipedia.org/zh-hans/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-mw-1" target="_blank" rel="noopener">[1]</a></sup><sup><a href="https://zh.wikipedia.org/zh-hans/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-moore-2" target="_blank" rel="noopener">[2]</a></sup>，也被称为<strong>超完全数字不变数</strong>（<strong>pluperfect digital invariant, PPDI</strong>）<sup><a href="https://zh.wikipedia.org/zh-hans/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-3" target="_blank" rel="noopener">[3]</a>/sup&gt;、<strong><a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E6%88%80" title="自恋" target="_blank" rel="noopener">自恋</a>数</strong>、<strong>自幂数</strong>、<strong><a href="https://zh.wikipedia.org/wiki/%E9%98%BF%E5%A7%86%E6%96%AF%E5%A3%AF" title="阿姆斯壮" target="_blank" rel="noopener">阿姆斯壮</a>数</strong>或<strong>阿姆斯特朗数</strong>（<strong>Armstrong number</strong>）<sup><a href="https://zh.wikipedia.org/zh-hans/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-4" target="_blank" rel="noopener">[4]</a></sup> ，用来描述一个<strong>N</strong>位非负整数，其各位数字的<strong>N</strong>次方和等于该数本身。</sup></p>
</blockquote>
<p>这里定义的N=3。</p>
<a id="more"></a>



<h3 id="2-问题描述"><a href="#2-问题描述" class="headerlink" title="2. 问题描述"></a>2. 问题描述</h3><p>春天是鲜花的季节，水仙花就是其中最迷人的代表，数学上有个水仙花数，他是这样定义的： “水仙花数”是指一个三位数，它的各位数字的立方和等于其本身，比如：153=1^3+5^3+3^3。 现在要求输出所有在m和n范围内的水仙花数。</p>
<p>对于每个测试实例，要求输出所有在给定范围内的水仙花数，就是说，输出的水仙花数必须大于等于m,并且小于等于n，如果有多个，则要求从小到大排列在一行内输出，之间用一个空格隔开;<br>如果给定的范围内不存在水仙花数，则输出no;<br>每个测试实例的输出占一行。</p>
<p>输入：<br>100 120<br>300 380</p>
<p>输出：<br>no<br>370 371</p>
<h3 id="3-问题分析"><a href="#3-问题分析" class="headerlink" title="3. 问题分析"></a>3. 问题分析</h3><p>我的解决思路：先将给出的数字按照个位十位百位的顺序拆解，然后计算各数位三次方之和，再和原数进行比较比较。思路比较简单。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.odd.number;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhulongkun20@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/3 下午12:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">getNumbers</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; comps = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">double</span> num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">            comps.clear();</span><br><span class="line">            comps = getNumberComponent(i);</span><br><span class="line">            <span class="keyword">for</span> (Integer comp : comps) &#123;</span><br><span class="line">                num += Math.pow(comp, <span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num == i) &#123;</span><br><span class="line">                result.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">getNumberComponent</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> base = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> comp;</span><br><span class="line">        <span class="keyword">int</span> lastComp;</span><br><span class="line">        List&lt;Integer&gt; components = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (number % (base / <span class="number">10</span>) != number) &#123;</span><br><span class="line">            <span class="keyword">int</span> power = <span class="number">0</span>;</span><br><span class="line">            lastComp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Integer index : components) &#123;</span><br><span class="line">                lastComp += index * Math.pow(<span class="number">10</span>, power);</span><br><span class="line">                power += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            comp = ((number - lastComp) % base) / (base / <span class="number">10</span>);</span><br><span class="line">            components.add(comp);</span><br><span class="line">            base *= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> components;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (input.hasNextLine()) &#123;</span><br><span class="line">            String str = input.nextLine();</span><br><span class="line">            String[] numbers = str.split(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> start = Integer.valueOf(numbers[i]);</span><br><span class="line">                <span class="keyword">int</span> end = Integer.valueOf(numbers[i + <span class="number">1</span>]);</span><br><span class="line">                result = getNumbers(start, end);</span><br><span class="line">                <span class="keyword">if</span> (result.isEmpty()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"no"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Integer aResult : result) &#123;</span><br><span class="line">                        System.out.print(aResult + <span class="string">" "</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="他山之石"><a href="#他山之石" class="headerlink" title="他山之石"></a>他山之石</h3><p>貌似在评论区里看到了有用python解决的：</p>
<p><img src="https://images2.imgbox.com/be/68/HnUhQ8il_o.png" alt="图片"></p>
<p>没太看懂。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
</search>
